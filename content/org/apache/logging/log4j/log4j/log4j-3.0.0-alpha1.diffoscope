1 / 33 target/reference/org.apache.logging.log4j/log4j-core-3.0.0-alpha1.jar log4j-core/target/log4j-core-3.0.0-alpha1.jar
--- target/reference/org.apache.logging.log4j/log4j-core-3.0.0-alpha1.jar
+++ log4j-core/target/log4j-core-3.0.0-alpha1.jar
├── zipinfo {}
│ @@ -1,8 +1,8 @@
│ -Zip file size: 1579487 bytes, number of entries: 1070
│ +Zip file size: 1579474 bytes, number of entries: 1070
│  -rw----     1.0 fat        0 bx stor 23-Jun-18 00:20 META-INF/
│  -rw----     2.0 fat    18523 b- defN 23-Jun-18 00:20 META-INF/MANIFEST.MF
│  -rw----     1.0 fat        0 b- stor 23-Jun-18 00:20 META-INF/services/
│  -rw----     1.0 fat        0 b- stor 23-Jun-18 00:20 org/
│  -rw----     1.0 fat        0 b- stor 23-Jun-18 00:20 org/apache/
│  -rw----     1.0 fat        0 b- stor 23-Jun-18 00:20 org/apache/logging/
│  -rw----     1.0 fat        0 b- stor 23-Jun-18 00:20 org/apache/logging/log4j/
│ @@ -820,15 +820,15 @@
│  -rw----     2.0 fat     1646 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/pattern/ThreadIdPatternConverter.class
│  -rw----     2.0 fat     1699 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/pattern/ThreadNamePatternConverter.class
│  -rw----     2.0 fat     1686 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/pattern/ThreadPriorityPatternConverter.class
│  -rw----     2.0 fat     7346 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/pattern/ThrowablePatternConverter.class
│  -rw----     2.0 fat     2078 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/pattern/UuidPatternConverter.class
│  -rw----     2.0 fat     4592 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/pattern/VariablesNotEmptyReplacementConverter.class
│  -rw----     2.0 fat      143 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/pattern/package-info.class
│ --rw----     2.0 fat    33621 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/plugins/Log4jPlugins.class
│ +-rw----     2.0 fat    33623 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/plugins/Log4jPlugins.class
│  -rw----     2.0 fat      143 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/plugins/package-info.class
│  -rw----     2.0 fat      217 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/script/Script.class
│  -rw----     2.0 fat      261 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/script/ScriptBindings.class
│  -rw----     2.0 fat      526 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/script/ScriptConditional.class
│  -rw----     2.0 fat      617 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/script/ScriptManager$1.class
│  -rw----     2.0 fat     1262 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/script/ScriptManager.class
│  -rw----     2.0 fat      411 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/script/ScriptManagerFactory.class
│ @@ -1065,8 +1065,8 @@
│  -rw----     2.0 fat     5932 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/util/internal/HttpInputStreamUtil.class
│  -rw----     2.0 fat     1021 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/util/internal/LastModifiedSource.class
│  -rw----     2.0 fat     1341 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/util/internal/Status.class
│  -rw----     2.0 fat      140 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/core/util/package-info.class
│  -rw----     2.0 fat     8426 b- defN 23-Jun-18 00:20 META-INF/maven/org.apache.logging.log4j/log4j-core/pom.xml
│  -rw----     2.0 fat       76 b- defN 23-Jun-18 00:20 META-INF/maven/org.apache.logging.log4j/log4j-core/pom.properties
│  -rw----     2.0 fat     4323 b- defN 23-Jun-18 00:20 module-info.class
│ -1070 files, 3541781 bytes uncompressed, 1354477 bytes compressed:  61.8%
│ +1070 files, 3541783 bytes uncompressed, 1354464 bytes compressed:  61.8%
├── org/apache/logging/log4j/core/plugins/Log4jPlugins.class
│ ├── procyon -ec {}
│ │ @@ -9,10 +9,10 @@
│ │      private static final PluginEntry[] ENTRIES;
│ │      
│ │      public PluginEntry[] getEntries() {
│ │          return Log4jPlugins.ENTRIES;
│ │      }
│ │      
│ │      static {
│ │ -        ENTRIES = new PluginEntry[] { PluginEntry.builder().setKey("loggernamelevelrewritepolicy").setClassName("org.apache.logging.log4j.core.appender.rewrite.LoggerNameLevelRewritePolicy").setName("LoggerNameLevelRewritePolicy").setNamespace("Core").setElementType("rewritePolicy").setPrintable(true).get(), PluginEntry.builder().setKey("integerpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.IntegerPatternConverter").setName("IntegerPatternConverter").setNamespace("FileConverter").get(), PluginEntry.builder().setKey("relativetimepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.RelativeTimePatternConverter").setName("RelativeTimePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("marker").setClassName("org.apache.logging.log4j.core.lookup.MarkerLookup").setName("marker").setNamespace("Lookup").get(), PluginEntry.builder().setKey("jctoolsblockingqueue").setClassName("org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory").setName("JCToolsBlockingQueue").setNamespace("Core").setElementType("BlockingQueueFactory").setPrintable(true).get(), PluginEntry.builder().setKey("stringmatchfilter").setClassName("org.apache.logging.log4j.core.filter.StringMatchFilter").setName("StringMatchFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("equalsignorecase").setClassName("org.apache.logging.log4j.core.pattern.EqualsIgnoreCaseReplacementConverter").setName("equalsIgnoreCase").setNamespace("Converter").get(), PluginEntry.builder().setKey("null").setClassName("org.apache.logging.log4j.core.appender.NullAppender").setName("Null").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("directwriterolloverstrategy").setClassName("org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy").setName("DirectWriteRolloverStrategy").setNamespace("Core").setElementType("DirectWriteRolloverStrategy").setPrintable(true).get(), PluginEntry.builder().setKey("timebasedtriggeringpolicy").setClassName("org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy").setName("TimeBasedTriggeringPolicy").setNamespace("Core").setElementType("TimeBasedTriggeringPolicy").setPrintable(true).get(), PluginEntry.builder().setKey("ssl").setClassName("org.apache.logging.log4j.core.net.ssl.SslConfiguration").setName("Ssl").setNamespace("Core").setElementType("Ssl").setPrintable(true).get(), PluginEntry.builder().setKey("jsonconfigurationfactory").setClassName("org.apache.logging.log4j.core.config.jason.JsonConfigurationFactory").setName("JsonConfigurationFactory").setNamespace("ConfigurationFactory").get(), PluginEntry.builder().setKey("appenderset").setClassName("org.apache.logging.log4j.core.appender.AppenderSet").setName("AppenderSet").setNamespace("Core").setElementType("AppenderSet").setPrintable(true).setDeferChildren(true).get(), PluginEntry.builder().setKey("htmllayout").setClassName("org.apache.logging.log4j.core.layout.HtmlLayout").setName("HtmlLayout").setNamespace("Core").setElementType("layout").setPrintable(true).get(), PluginEntry.builder().setKey("highlight").setClassName("org.apache.logging.log4j.core.pattern.HighlightConverter").setName("highlight").setNamespace("Converter").get(), PluginEntry.builder().setKey("uuidpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.UuidPatternConverter").setName("UuidPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("property").setClassName("org.apache.logging.log4j.core.config.Property").setName("Property").setNamespace("Core").setElementType("Property").setPrintable(true).get(), PluginEntry.builder().setKey("loggerfields").setClassName("org.apache.logging.log4j.core.layout.LoggerFields").setName("LoggerFields").setNamespace("Core").setElementType("LoggerFields").setPrintable(true).get(), PluginEntry.builder().setKey("jvmrunargs").setClassName("org.apache.logging.log4j.core.lookup.JmxRuntimeInputArgumentsLookup").setName("jvmrunargs").setNamespace("Lookup").get(), PluginEntry.builder().setKey("fulllocationpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.FullLocationPatternConverter").setName("FullLocationPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("policies").setClassName("org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy").setName("Policies").setNamespace("Core").setElementType("Policies").setPrintable(true).get(), PluginEntry.builder().setKey("iflastmodified").setClassName("org.apache.logging.log4j.core.appender.rolling.action.IfLastModified").setName("IfLastModified").setNamespace("Core").setElementType("IfLastModified").setPrintable(true).get(), PluginEntry.builder().setKey("levelpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.LevelPatternConverter").setName("LevelPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("ndcpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.NdcPatternConverter").setName("NdcPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("route").setClassName("org.apache.logging.log4j.core.appender.routing.Route").setName("Route").setNamespace("Core").setElementType("Route").setPrintable(true).setDeferChildren(true).get(), PluginEntry.builder().setKey("sequencenumberpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.SequenceNumberPatternConverter").setName("SequenceNumberPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("select").setClassName("org.apache.logging.log4j.core.config.arbiters.SelectArbiter").setName("Select").setNamespace("Core").setElementType("Arbiter").setPrintable(true).setDeferChildren(true).get(), PluginEntry.builder().setKey("ifaccumulatedfilecount").setClassName("org.apache.logging.log4j.core.appender.rolling.action.IfAccumulatedFileCount").setName("IfAccumulatedFileCount").setNamespace("Core").setElementType("IfAccumulatedFileCount").setPrintable(true).get(), PluginEntry.builder().setKey("ifall").setClassName("org.apache.logging.log4j.core.appender.rolling.action.IfAll").setName("IfAll").setNamespace("Core").setElementType("IfAll").setPrintable(true).get(), PluginEntry.builder().setKey("env").setClassName("org.apache.logging.log4j.core.lookup.EnvironmentLookup").setName("env").setNamespace("Lookup").get(), PluginEntry.builder().setKey("style").setClassName("org.apache.logging.log4j.core.pattern.StyleConverter").setName("style").setNamespace("Converter").get(), PluginEntry.builder().setKey("socketaddress").setClassName("org.apache.logging.log4j.core.net.SocketAddress").setName("SocketAddress").setNamespace("Core").setElementType("SocketAddress").setPrintable(true).get(), PluginEntry.builder().setKey("logger").setClassName("org.apache.logging.log4j.core.config.LoggerConfig").setName("logger").setNamespace("Core").setElementType("logger").setPrintable(true).get(), PluginEntry.builder().setKey("root").setClassName("org.apache.logging.log4j.core.config.LoggerConfig$RootLogger").setName("root").setNamespace("Core").setElementType("root").setPrintable(true).get(), PluginEntry.builder().setKey("markerpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.MarkerPatternConverter").setName("MarkerPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("methodlocationpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.MethodLocationPatternConverter").setName("MethodLocationPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("upper").setClassName("org.apache.logging.log4j.core.lookup.UpperLookup").setName("upper").setNamespace("Lookup").get(), PluginEntry.builder().setKey("xmlconfigurationfactory").setClassName("org.apache.logging.log4j.core.config.xml.XmlConfigurationFactory").setName("XmlConfigurationFactory").setNamespace("ConfigurationFactory").get(), PluginEntry.builder().setKey("randomaccessfile").setClassName("org.apache.logging.log4j.core.appender.RandomAccessFileAppender").setName("RandomAccessFile").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("crontriggeringpolicy").setClassName("org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy").setName("CronTriggeringPolicy").setNamespace("Core").setElementType("CronTriggeringPolicy").setPrintable(true).get(), PluginEntry.builder().setKey("file").setClassName("org.apache.logging.log4j.core.appender.FileAppender").setName("File").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("maxlength").setClassName("org.apache.logging.log4j.core.pattern.MaxLengthConverter").setName("maxLength").setNamespace("Converter").get(), PluginEntry.builder().setKey("customlevel").setClassName("org.apache.logging.log4j.core.config.CustomLevelConfig").setName("CustomLevel").setNamespace("Core").setElementType("CustomLevel").setPrintable(true).get(), PluginEntry.builder().setKey("nomarkerfilter").setClassName("org.apache.logging.log4j.core.filter.NoMarkerFilter").setName("NoMarkerFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("java").setClassName("org.apache.logging.log4j.core.lookup.JavaLookup").setName("java").setNamespace("Lookup").get(), PluginEntry.builder().setKey("multicastdns").setClassName("org.apache.logging.log4j.core.net.MulticastDnsAdvertiser").setName("MulticastDns").setNamespace("Core").setElementType("advertiser").get(), PluginEntry.builder().setKey("burstfilter").setClassName("org.apache.logging.log4j.core.filter.BurstFilter").setName("BurstFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("timefilter").setClassName("org.apache.logging.log4j.core.filter.TimeFilter").setName("TimeFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("countingnoop").setClassName("org.apache.logging.log4j.core.appender.CountingNoOpAppender").setName("CountingNoOp").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("keyvaluepair").setClassName("org.apache.logging.log4j.core.util.KeyValuePair").setName("KeyValuePair").setNamespace("Core").setElementType("KeyValuePair").setPrintable(true).get(), PluginEntry.builder().setKey("routes").setClassName("org.apache.logging.log4j.core.appender.routing.Routes").setName("Routes").setNamespace("Core").setElementType("Routes").setPrintable(true).get(), PluginEntry.builder().setKey("posixviewattribute").setClassName("org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction").setName("PosixViewAttribute").setNamespace("Core").setElementType("PosixViewAttribute").setPrintable(true).get(), PluginEntry.builder().setKey("asyncwaitstrategyfactory").setClassName("org.apache.logging.log4j.core.async.AsyncWaitStrategyFactoryConfig").setName("AsyncWaitStrategyFactory").setNamespace("Core").setElementType("AsyncWaitStrategyFactory").setPrintable(true).get(), PluginEntry.builder().setKey("appenders").setClassName("org.apache.logging.log4j.core.config.AppendersPlugin").setName("appenders").setNamespace("Core").setElementType("appenders").get(), PluginEntry.builder().setKey("levelrangefilter").setClassName("org.apache.logging.log4j.core.filter.LevelRangeFilter").setName("LevelRangeFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("nosql").setClassName("org.apache.logging.log4j.core.appender.nosql.NoSqlAppender").setName("NoSql").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("levelmatchfilter").setClassName("org.apache.logging.log4j.core.filter.LevelMatchFilter").setName("LevelMatchFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("yamlconfigurationfactory").setClassName("org.apache.logging.log4j.core.config.yaml.YamlConfigurationFactory").setName("YamlConfigurationFactory").setNamespace("ConfigurationFactory").get(), PluginEntry.builder().setKey("markerpatternselector").setClassName("org.apache.logging.log4j.core.layout.MarkerPatternSelector").setName("MarkerPatternSelector").setNamespace("Core").setElementType("patternSelector").setPrintable(true).get(), PluginEntry.builder().setKey("bundle").setClassName("org.apache.logging.log4j.core.lookup.ResourceBundleLookup").setName("bundle").setNamespace("Lookup").get(), PluginEntry.builder().setKey("default").setClassName("org.apache.logging.log4j.core.config.DefaultAdvertiser").setName("default").setNamespace("Core").setElementType("advertiser").get(), PluginEntry.builder().setKey("classarbiter").setClassName("org.apache.logging.log4j.core.config.arbiters.ClassArbiter").setName("ClassArbiter").setNamespace("Core").setElementType("Arbiter").setPrintable(true).setDeferChildren(true).get(), PluginEntry.builder().setKey("mdcpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.MdcPatternConverter").setName("MdcPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("appenderref").setClassName("org.apache.logging.log4j.core.config.AppenderRef").setName("AppenderRef").setNamespace("Core").setElementType("AppenderRef").setPrintable(true).get(), PluginEntry.builder().setKey("appender-ref").setClassName("org.apache.logging.log4j.core.config.AppenderRef").setName("AppenderRef").setNamespace("Core").setElementType("AppenderRef").setPrintable(true).get(), PluginEntry.builder().setKey("idlepurgepolicy").setClassName("org.apache.logging.log4j.core.appender.routing.IdlePurgePolicy").setName("IdlePurgePolicy").setNamespace("Core").setElementType("IdlePurgePolicy").setPrintable(true).get(), PluginEntry.builder().setKey("dynamicthresholdfilter").setClassName("org.apache.logging.log4j.core.filter.DynamicThresholdFilter").setName("DynamicThresholdFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("patternlayout").setClassName("org.apache.logging.log4j.core.layout.PatternLayout").setName("PatternLayout").setNamespace("Core").setElementType("layout").setPrintable(true).get(), PluginEntry.builder().setKey("date").setClassName("org.apache.logging.log4j.core.lookup.DateLookup").setName("date").setNamespace("Lookup").get(), PluginEntry.builder().setKey("ctx").setClassName("org.apache.logging.log4j.core.lookup.ContextMapLookup").setName("ctx").setNamespace("Lookup").get(), PluginEntry.builder().setKey("truststore").setClassName("org.apache.logging.log4j.core.net.ssl.TrustStoreConfiguration").setName("TrustStore").setNamespace("Core").setElementType("TrustStore").setPrintable(true).get(), PluginEntry.builder().setKey("failovers").setClassName("org.apache.logging.log4j.core.appender.FailoversPlugin").setName("failovers").setNamespace("Core").setElementType("failovers").get(), PluginEntry.builder().setKey("lower").setClassName("org.apache.logging.log4j.core.lookup.LowerLookup").setName("lower").setNamespace("Lookup").get(), PluginEntry.builder().setKey("linelocationpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.LineLocationPatternConverter").setName("LineLocationPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("structureddatafilter").setClassName("org.apache.logging.log4j.core.filter.StructuredDataFilter").setName("StructuredDataFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("thresholdfilter").setClassName("org.apache.logging.log4j.core.filter.ThresholdFilter").setName("ThresholdFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("processidpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.ProcessIdPatternConverter").setName("ProcessIdPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("failover").setClassName("org.apache.logging.log4j.core.appender.FailoverAppender").setName("Failover").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("threadcontextmapfilter").setClassName("org.apache.logging.log4j.core.filter.ThreadContextMapFilter").setName("ThreadContextMapFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("contextmapfilter").setClassName("org.apache.logging.log4j.core.filter.ThreadContextMapFilter").setName("ThreadContextMapFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("ifnot").setClassName("org.apache.logging.log4j.core.appender.rolling.action.IfNot").setName("IfNot").setNamespace("Core").setElementType("IfNot").setPrintable(true).get(), PluginEntry.builder().setKey("equals").setClassName("org.apache.logging.log4j.core.pattern.EqualsReplacementConverter").setName("equals").setNamespace("Converter").get(), PluginEntry.builder().setKey("async").setClassName("org.apache.logging.log4j.core.appender.AsyncAppender").setName("Async").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("properties").setClassName("org.apache.logging.log4j.core.config.PropertiesPlugin").setName("properties").setNamespace("Core").setElementType("properties").setPrintable(true).get(), PluginEntry.builder().setKey("arrayblockingqueue").setClassName("org.apache.logging.log4j.core.async.ArrayBlockingQueueFactory").setName("ArrayBlockingQueue").setNamespace("Core").setElementType("BlockingQueueFactory").get(), PluginEntry.builder().setKey("defaultrolloverstrategy").setClassName("org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy").setName("DefaultRolloverStrategy").setNamespace("Core").setElementType("DefaultRolloverStrategy").setPrintable(true).get(), PluginEntry.builder().setKey("nanotimepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.NanoTimePatternConverter").setName("NanoTimePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("endofbatchpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.EndOfBatchPatternConverter").setName("EndOfBatchPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("disruptorblockingqueue").setClassName("org.apache.logging.log4j.core.async.DisruptorBlockingQueueFactory").setName("DisruptorBlockingQueue").setNamespace("Core").setElementType("BlockingQueueFactory").setPrintable(true).get(), PluginEntry.builder().setKey("gelflayout").setClassName("org.apache.logging.log4j.core.layout.GelfLayout").setName("GelfLayout").setNamespace("Core").setElementType("layout").setPrintable(true).get(), PluginEntry.builder().setKey("mapfilter").setClassName("org.apache.logging.log4j.core.filter.MapFilter").setName("MapFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("extendedthrowablepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter").setName("ExtendedThrowablePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("socketperformancepreferences").setClassName("org.apache.logging.log4j.core.net.SocketPerformancePreferences").setName("SocketPerformancePreferences").setNamespace("Core").setElementType("SocketPerformancePreferences").setPrintable(true).get(), PluginEntry.builder().setKey("encode").setClassName("org.apache.logging.log4j.core.pattern.EncodingPatternConverter").setName("encode").setNamespace("Converter").get(), PluginEntry.builder().setKey("sortbymodificationtime").setClassName("org.apache.logging.log4j.core.appender.rolling.action.PathSortByModificationTime").setName("SortByModificationTime").setNamespace("Core").setElementType("SortByModificationTime").setPrintable(true).get(), PluginEntry.builder().setKey("loggers").setClassName("org.apache.logging.log4j.core.config.LoggersPlugin").setName("loggers").setNamespace("Core").setElementType("loggers").get(), PluginEntry.builder().setKey("nooptriggeringpolicy").setClassName("org.apache.logging.log4j.core.appender.rolling.NoOpTriggeringPolicy").setName("NoOpTriggeringPolicy").setNamespace("Core").setElementType("NoOpTriggeringPolicy").setPrintable(true).get(), PluginEntry.builder().setKey("linkedtransferqueue").setClassName("org.apache.logging.log4j.core.async.LinkedTransferQueueFactory").setName("LinkedTransferQueue").setNamespace("Core").setElementType("BlockingQueueFactory").setPrintable(true).get(), PluginEntry.builder().setKey("systempropertyarbiter").setClassName("org.apache.logging.log4j.core.config.arbiters.SystemPropertyArbiter").setName("SystemPropertyArbiter").setNamespace("Core").setElementType("Arbiter").setPrintable(true).setDeferChildren(true).get(), PluginEntry.builder().setKey("rootthrowablepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.RootThrowablePatternConverter").setName("RootThrowablePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("sd").setClassName("org.apache.logging.log4j.core.lookup.StructuredDataLookup").setName("sd").setNamespace("Lookup").get(), PluginEntry.builder().setKey("mutablethreadcontextmapfilter").setClassName("org.apache.logging.log4j.core.filter.MutableThreadContextMapFilter").setName("MutableThreadContextMapFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("mutablecontextmapfilter").setClassName("org.apache.logging.log4j.core.filter.MutableThreadContextMapFilter").setName("MutableThreadContextMapFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("propertiesconfigurationfactory").setClassName("org.apache.logging.log4j.core.config.properties.PropertiesConfigurationFactory").setName("PropertiesConfigurationFactory").setNamespace("ConfigurationFactory").get(), PluginEntry.builder().setKey("black").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Black").setName("black").setNamespace("Converter").get(), PluginEntry.builder().setKey("blue").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Blue").setName("blue").setNamespace("Converter").get(), PluginEntry.builder().setKey("cyan").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Cyan").setName("cyan").setNamespace("Converter").get(), PluginEntry.builder().setKey("green").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Green").setName("green").setNamespace("Converter").get(), PluginEntry.builder().setKey("magenta").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Magenta").setName("magenta").setNamespace("Converter").get(), PluginEntry.builder().setKey("red").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Red").setName("red").setNamespace("Converter").get(), PluginEntry.builder().setKey("white").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$White").setName("white").setNamespace("Converter").get(), PluginEntry.builder().setKey("yellow").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Yellow").setName("yellow").setNamespace("Converter").get(), PluginEntry.builder().setKey("rollingrandomaccessfile").setClassName("org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender").setName("RollingRandomAccessFile").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("iffilename").setClassName("org.apache.logging.log4j.core.appender.rolling.action.IfFileName").setName("IfFileName").setNamespace("Core").setElementType("IfFileName").setPrintable(true).get(), PluginEntry.builder().setKey("writer").setClassName("org.apache.logging.log4j.core.appender.WriterAppender").setName("Writer").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("loggerfqcnpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.LoggerFqcnPatternConverter").setName("LoggerFqcnPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("rfc5424layout").setClassName("org.apache.logging.log4j.core.layout.Rfc5424Layout").setName("Rfc5424Layout").setNamespace("Core").setElementType("layout").setPrintable(true).get(), PluginEntry.builder().setKey("http").setClassName("org.apache.logging.log4j.core.appender.HttpAppender").setName("Http").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("markernamepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.MarkerSimpleNamePatternConverter").setName("MarkerNamePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("notempty").setClassName("org.apache.logging.log4j.core.pattern.VariablesNotEmptyReplacementConverter").setName("notEmpty").setNamespace("Converter").get(), PluginEntry.builder().setKey("socket").setClassName("org.apache.logging.log4j.core.appender.SocketAppender").setName("Socket").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("throwablepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.ThrowablePatternConverter").setName("ThrowablePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("http").setClassName("org.apache.logging.log4j.core.config.HttpWatcher").setName("http").setNamespace("Watcher").get(), PluginEntry.builder().setKey("https").setClassName("org.apache.logging.log4j.core.config.HttpWatcher").setName("http").setNamespace("Watcher").get(), PluginEntry.builder().setKey("filedatepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.FileDatePatternConverter").setName("FileDatePatternConverter").setNamespace("FileConverter").get(), PluginEntry.builder().setKey("sysloglayout").setClassName("org.apache.logging.log4j.core.layout.SyslogLayout").setName("SyslogLayout").setNamespace("Core").setElementType("layout").setPrintable(true).get(), PluginEntry.builder().setKey("sizebasedtriggeringpolicy").setClassName("org.apache.logging.log4j.core.appender.rolling.SizeBasedTriggeringPolicy").setName("SizeBasedTriggeringPolicy").setNamespace("Core").setElementType("SizeBasedTriggeringPolicy").setPrintable(true).get(), PluginEntry.builder().setKey("markerfilter").setClassName("org.apache.logging.log4j.core.filter.MarkerFilter").setName("MarkerFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("datepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.DatePatternConverter").setName("DatePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("mappatternconverter").setClassName("org.apache.logging.log4j.core.pattern.MapPatternConverter").setName("MapPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("maprewritepolicy").setClassName("org.apache.logging.log4j.core.appender.rewrite.MapRewritePolicy").setName("MapRewritePolicy").setNamespace("Core").setElementType("rewritePolicy").setPrintable(true).get(), PluginEntry.builder().setKey("messagepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.MessagePatternConverter").setName("MessagePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("keystore").setClassName("org.apache.logging.log4j.core.net.ssl.KeyStoreConfiguration").setName("KeyStore").setNamespace("Core").setElementType("KeyStore").setPrintable(true).get(), PluginEntry.builder().setKey("filelocationpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.FileLocationPatternConverter").setName("FileLocationPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("event").setClassName("org.apache.logging.log4j.core.lookup.EventLookup").setName("event").setNamespace("Lookup").get(), PluginEntry.builder().setKey("denyallfilter").setClassName("org.apache.logging.log4j.core.filter.DenyAllFilter").setName("DenyAllFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("rollingfile").setClassName("org.apache.logging.log4j.core.appender.RollingFileAppender").setName("RollingFile").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("delete").setClassName("org.apache.logging.log4j.core.appender.rolling.action.DeleteAction").setName("Delete").setNamespace("Core").setElementType("Delete").setPrintable(true).get(), PluginEntry.builder().setKey("socketoptions").setClassName("org.apache.logging.log4j.core.net.SocketOptions").setName("SocketOptions").setNamespace("Core").setElementType("SocketOptions").setPrintable(true).get(), PluginEntry.builder().setKey("onstartuptriggeringpolicy").setClassName("org.apache.logging.log4j.core.appender.rolling.OnStartupTriggeringPolicy").setName("OnStartupTriggeringPolicy").setNamespace("Core").setElementType("OnStartupTriggeringPolicy").setPrintable(true).get(), PluginEntry.builder().setKey("sys").setClassName("org.apache.logging.log4j.core.lookup.SystemPropertiesLookup").setName("sys").setNamespace("Lookup").get(), PluginEntry.builder().setKey("classnamepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.ClassNamePatternConverter").setName("ClassNamePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("lineseparatorpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.LineSeparatorPatternConverter").setName("LineSeparatorPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("ifaccumulatedfilesize").setClassName("org.apache.logging.log4j.core.appender.rolling.action.IfAccumulatedFileSize").setName("IfAccumulatedFileSize").setNamespace("Core").setElementType("IfAccumulatedFileSize").setPrintable(true).get(), PluginEntry.builder().setKey("memorymappedfile").setClassName("org.apache.logging.log4j.core.appender.MemoryMappedFileAppender").setName("MemoryMappedFile").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("defaultarbiter").setClassName("org.apache.logging.log4j.core.config.arbiters.DefaultArbiter").setName("DefaultArbiter").setNamespace("Core").setElementType("Arbiter").setPrintable(true).setDeferChildren(true).get(), PluginEntry.builder().setKey("threadpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.ThreadNamePatternConverter").setName("ThreadPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("threadidpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.ThreadIdPatternConverter").setName("ThreadIdPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("outputstream").setClassName("org.apache.logging.log4j.core.appender.OutputStreamAppender").setName("OutputStream").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("columnmapping").setClassName("org.apache.logging.log4j.core.appender.db.ColumnMapping").setName("ColumnMapping").setNamespace("Core").setElementType("ColumnMapping").setPrintable(true).get(), PluginEntry.builder().setKey("ifany").setClassName("org.apache.logging.log4j.core.appender.rolling.action.IfAny").setName("IfAny").setNamespace("Core").setElementType("IfAny").setPrintable(true).get(), PluginEntry.builder().setKey("rewrite").setClassName("org.apache.logging.log4j.core.appender.rewrite.RewriteAppender").setName("Rewrite").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("patternmatch").setClassName("org.apache.logging.log4j.core.layout.PatternMatch").setName("PatternMatch").setNamespace("Core").setElementType("PatternMatch").setPrintable(true).get(), PluginEntry.builder().setKey("log4j").setClassName("org.apache.logging.log4j.core.lookup.Log4jLookup").setName("log4j").setNamespace("Lookup").get(), PluginEntry.builder().setKey("main").setClassName("org.apache.logging.log4j.core.lookup.MainMapLookup").setName("main").setNamespace("Lookup").get(), PluginEntry.builder().setKey("levelpatternselector").setClassName("org.apache.logging.log4j.core.layout.LevelPatternSelector").setName("LevelPatternSelector").setNamespace("Core").setElementType("patternSelector").setPrintable(true).get(), PluginEntry.builder().setKey("map").setClassName("org.apache.logging.log4j.core.lookup.MapLookup").setName("map").setNamespace("Lookup").get(), PluginEntry.builder().setKey("filters").setClassName("org.apache.logging.log4j.core.filter.CompositeFilter").setName("filters").setNamespace("Core").setElementType("filters").setPrintable(true).get(), PluginEntry.builder().setKey("replace").setClassName("org.apache.logging.log4j.core.pattern.RegexReplacementConverter").setName("replace").setNamespace("Converter").get(), PluginEntry.builder().setKey("bigdecimalconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$BigDecimalConverter").setName("BigDecimalConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("bigintegerconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$BigIntegerConverter").setName("BigIntegerConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("bytearrayconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$ByteArrayConverter").setName("ByteArrayConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("chararrayconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$CharArrayConverter").setName("CharArrayConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("charsetconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$CharsetConverter").setName("CharsetConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("classconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$ClassConverter").setName("ClassConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("cronexpressionconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$CronExpressionConverter").setName("CronExpressionConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("durationconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$DurationConverter").setName("DurationConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("fileconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$FileConverter").setName("FileConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("inetaddressconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$InetAddressConverter").setName("InetAddressConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("levelconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$LevelConverter").setName("LevelConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("pathconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$PathConverter").setName("PathConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("patternconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$PatternConverter").setName("PatternConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("securityproviderconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$SecurityProviderConverter").setName("SecurityProviderConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("uriconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$UriConverter").setName("UriConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("urlconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$UrlConverter").setName("UrlConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("uuidconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$UuidConverter").setName("UuidConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("zoneidconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$ZoneIdConverter").setName("ZoneIdConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("routing").setClassName("org.apache.logging.log4j.core.appender.routing.RoutingAppender").setName("Routing").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("loggerpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.LoggerPatternConverter").setName("LoggerPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("replace").setClassName("org.apache.logging.log4j.core.pattern.RegexReplacement").setName("replace").setNamespace("Core").setElementType("replace").setPrintable(true).get(), PluginEntry.builder().setKey("syslog").setClassName("org.apache.logging.log4j.core.appender.SyslogAppender").setName("Syslog").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("customlevels").setClassName("org.apache.logging.log4j.core.config.CustomLevels").setName("CustomLevels").setNamespace("Core").setElementType("CustomLevels").setPrintable(true).get(), PluginEntry.builder().setKey("repeat").setClassName("org.apache.logging.log4j.core.pattern.RepeatPatternConverter").setName("repeat").setNamespace("Converter").get(), PluginEntry.builder().setKey("asynclogger").setClassName("org.apache.logging.log4j.core.async.AsyncLoggerConfig").setName("asyncLogger").setNamespace("Core").setElementType("asyncLogger").setPrintable(true).get(), PluginEntry.builder().setKey("asyncroot").setClassName("org.apache.logging.log4j.core.async.AsyncLoggerConfig$RootLogger").setName("asyncRoot").setNamespace("Core").setElementType("asyncRoot").setPrintable(true).get(), PluginEntry.builder().setKey("console").setClassName("org.apache.logging.log4j.core.appender.ConsoleAppender").setName("Console").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("threadprioritypatternconverter").setClassName("org.apache.logging.log4j.core.pattern.ThreadPriorityPatternConverter").setName("ThreadPriorityPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("propertiesrewritepolicy").setClassName("org.apache.logging.log4j.core.appender.rewrite.PropertiesRewritePolicy").setName("PropertiesRewritePolicy").setNamespace("Core").setElementType("rewritePolicy").setPrintable(true).get(), PluginEntry.builder().setKey("regexfilter").setClassName("org.apache.logging.log4j.core.filter.RegexFilter").setName("RegexFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get() };
│ │ +        ENTRIES = new PluginEntry[] { PluginEntry.builder().setKey("levelmatchfilter").setClassName("org.apache.logging.log4j.core.filter.LevelMatchFilter").setName("LevelMatchFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("sd").setClassName("org.apache.logging.log4j.core.lookup.StructuredDataLookup").setName("sd").setNamespace("Lookup").get(), PluginEntry.builder().setKey("socket").setClassName("org.apache.logging.log4j.core.appender.SocketAppender").setName("Socket").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("columnmapping").setClassName("org.apache.logging.log4j.core.appender.db.ColumnMapping").setName("ColumnMapping").setNamespace("Core").setElementType("ColumnMapping").setPrintable(true).get(), PluginEntry.builder().setKey("select").setClassName("org.apache.logging.log4j.core.config.arbiters.SelectArbiter").setName("Select").setNamespace("Core").setElementType("Arbiter").setPrintable(true).setDeferChildren(true).get(), PluginEntry.builder().setKey("filters").setClassName("org.apache.logging.log4j.core.filter.CompositeFilter").setName("filters").setNamespace("Core").setElementType("filters").setPrintable(true).get(), PluginEntry.builder().setKey("randomaccessfile").setClassName("org.apache.logging.log4j.core.appender.RandomAccessFileAppender").setName("RandomAccessFile").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("dynamicthresholdfilter").setClassName("org.apache.logging.log4j.core.filter.DynamicThresholdFilter").setName("DynamicThresholdFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("lineseparatorpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.LineSeparatorPatternConverter").setName("LineSeparatorPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("uuidpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.UuidPatternConverter").setName("UuidPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("failovers").setClassName("org.apache.logging.log4j.core.appender.FailoversPlugin").setName("failovers").setNamespace("Core").setElementType("failovers").get(), PluginEntry.builder().setKey("ifaccumulatedfilesize").setClassName("org.apache.logging.log4j.core.appender.rolling.action.IfAccumulatedFileSize").setName("IfAccumulatedFileSize").setNamespace("Core").setElementType("IfAccumulatedFileSize").setPrintable(true).get(), PluginEntry.builder().setKey("jctoolsblockingqueue").setClassName("org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory").setName("JCToolsBlockingQueue").setNamespace("Core").setElementType("BlockingQueueFactory").setPrintable(true).get(), PluginEntry.builder().setKey("async").setClassName("org.apache.logging.log4j.core.appender.AsyncAppender").setName("Async").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("propertiesconfigurationfactory").setClassName("org.apache.logging.log4j.core.config.properties.PropertiesConfigurationFactory").setName("PropertiesConfigurationFactory").setNamespace("ConfigurationFactory").get(), PluginEntry.builder().setKey("multicastdns").setClassName("org.apache.logging.log4j.core.net.MulticastDnsAdvertiser").setName("MulticastDns").setNamespace("Core").setElementType("advertiser").get(), PluginEntry.builder().setKey("main").setClassName("org.apache.logging.log4j.core.lookup.MainMapLookup").setName("main").setNamespace("Lookup").get(), PluginEntry.builder().setKey("maxlength").setClassName("org.apache.logging.log4j.core.pattern.MaxLengthConverter").setName("maxLength").setNamespace("Converter").get(), PluginEntry.builder().setKey("marker").setClassName("org.apache.logging.log4j.core.lookup.MarkerLookup").setName("marker").setNamespace("Lookup").get(), PluginEntry.builder().setKey("event").setClassName("org.apache.logging.log4j.core.lookup.EventLookup").setName("event").setNamespace("Lookup").get(), PluginEntry.builder().setKey("ifnot").setClassName("org.apache.logging.log4j.core.appender.rolling.action.IfNot").setName("IfNot").setNamespace("Core").setElementType("IfNot").setPrintable(true).get(), PluginEntry.builder().setKey("sortbymodificationtime").setClassName("org.apache.logging.log4j.core.appender.rolling.action.PathSortByModificationTime").setName("SortByModificationTime").setNamespace("Core").setElementType("SortByModificationTime").setPrintable(true).get(), PluginEntry.builder().setKey("crontriggeringpolicy").setClassName("org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy").setName("CronTriggeringPolicy").setNamespace("Core").setElementType("CronTriggeringPolicy").setPrintable(true).get(), PluginEntry.builder().setKey("appenders").setClassName("org.apache.logging.log4j.core.config.AppendersPlugin").setName("appenders").setNamespace("Core").setElementType("appenders").get(), PluginEntry.builder().setKey("outputstream").setClassName("org.apache.logging.log4j.core.appender.OutputStreamAppender").setName("OutputStream").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("classarbiter").setClassName("org.apache.logging.log4j.core.config.arbiters.ClassArbiter").setName("ClassArbiter").setNamespace("Core").setElementType("Arbiter").setPrintable(true).setDeferChildren(true).get(), PluginEntry.builder().setKey("idlepurgepolicy").setClassName("org.apache.logging.log4j.core.appender.routing.IdlePurgePolicy").setName("IdlePurgePolicy").setNamespace("Core").setElementType("IdlePurgePolicy").setPrintable(true).get(), PluginEntry.builder().setKey("lower").setClassName("org.apache.logging.log4j.core.lookup.LowerLookup").setName("lower").setNamespace("Lookup").get(), PluginEntry.builder().setKey("fulllocationpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.FullLocationPatternConverter").setName("FullLocationPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("appenderset").setClassName("org.apache.logging.log4j.core.appender.AppenderSet").setName("AppenderSet").setNamespace("Core").setElementType("AppenderSet").setPrintable(true).setDeferChildren(true).get(), PluginEntry.builder().setKey("memorymappedfile").setClassName("org.apache.logging.log4j.core.appender.MemoryMappedFileAppender").setName("MemoryMappedFile").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("appenderref").setClassName("org.apache.logging.log4j.core.config.AppenderRef").setName("AppenderRef").setNamespace("Core").setElementType("AppenderRef").setPrintable(true).get(), PluginEntry.builder().setKey("appender-ref").setClassName("org.apache.logging.log4j.core.config.AppenderRef").setName("AppenderRef").setNamespace("Core").setElementType("AppenderRef").setPrintable(true).get(), PluginEntry.builder().setKey("iffilename").setClassName("org.apache.logging.log4j.core.appender.rolling.action.IfFileName").setName("IfFileName").setNamespace("Core").setElementType("IfFileName").setPrintable(true).get(), PluginEntry.builder().setKey("sizebasedtriggeringpolicy").setClassName("org.apache.logging.log4j.core.appender.rolling.SizeBasedTriggeringPolicy").setName("SizeBasedTriggeringPolicy").setNamespace("Core").setElementType("SizeBasedTriggeringPolicy").setPrintable(true).get(), PluginEntry.builder().setKey("logger").setClassName("org.apache.logging.log4j.core.config.LoggerConfig").setName("logger").setNamespace("Core").setElementType("logger").setPrintable(true).get(), PluginEntry.builder().setKey("root").setClassName("org.apache.logging.log4j.core.config.LoggerConfig$RootLogger").setName("root").setNamespace("Core").setElementType("root").setPrintable(true).get(), PluginEntry.builder().setKey("linkedtransferqueue").setClassName("org.apache.logging.log4j.core.async.LinkedTransferQueueFactory").setName("LinkedTransferQueue").setNamespace("Core").setElementType("BlockingQueueFactory").setPrintable(true).get(), PluginEntry.builder().setKey("failover").setClassName("org.apache.logging.log4j.core.appender.FailoverAppender").setName("Failover").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("asyncwaitstrategyfactory").setClassName("org.apache.logging.log4j.core.async.AsyncWaitStrategyFactoryConfig").setName("AsyncWaitStrategyFactory").setNamespace("Core").setElementType("AsyncWaitStrategyFactory").setPrintable(true).get(), PluginEntry.builder().setKey("highlight").setClassName("org.apache.logging.log4j.core.pattern.HighlightConverter").setName("highlight").setNamespace("Converter").get(), PluginEntry.builder().setKey("regexfilter").setClassName("org.apache.logging.log4j.core.filter.RegexFilter").setName("RegexFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("writer").setClassName("org.apache.logging.log4j.core.appender.WriterAppender").setName("Writer").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("loggerpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.LoggerPatternConverter").setName("LoggerPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("propertiesrewritepolicy").setClassName("org.apache.logging.log4j.core.appender.rewrite.PropertiesRewritePolicy").setName("PropertiesRewritePolicy").setNamespace("Core").setElementType("rewritePolicy").setPrintable(true).get(), PluginEntry.builder().setKey("loggerfields").setClassName("org.apache.logging.log4j.core.layout.LoggerFields").setName("LoggerFields").setNamespace("Core").setElementType("LoggerFields").setPrintable(true).get(), PluginEntry.builder().setKey("notempty").setClassName("org.apache.logging.log4j.core.pattern.VariablesNotEmptyReplacementConverter").setName("notEmpty").setNamespace("Converter").get(), PluginEntry.builder().setKey("null").setClassName("org.apache.logging.log4j.core.appender.NullAppender").setName("Null").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("truststore").setClassName("org.apache.logging.log4j.core.net.ssl.TrustStoreConfiguration").setName("TrustStore").setNamespace("Core").setElementType("TrustStore").setPrintable(true).get(), PluginEntry.builder().setKey("directwriterolloverstrategy").setClassName("org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy").setName("DirectWriteRolloverStrategy").setNamespace("Core").setElementType("DirectWriteRolloverStrategy").setPrintable(true).get(), PluginEntry.builder().setKey("nomarkerfilter").setClassName("org.apache.logging.log4j.core.filter.NoMarkerFilter").setName("NoMarkerFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("yamlconfigurationfactory").setClassName("org.apache.logging.log4j.core.config.yaml.YamlConfigurationFactory").setName("YamlConfigurationFactory").setNamespace("ConfigurationFactory").get(), PluginEntry.builder().setKey("default").setClassName("org.apache.logging.log4j.core.config.DefaultAdvertiser").setName("default").setNamespace("Core").setElementType("advertiser").get(), PluginEntry.builder().setKey("htmllayout").setClassName("org.apache.logging.log4j.core.layout.HtmlLayout").setName("HtmlLayout").setNamespace("Core").setElementType("layout").setPrintable(true).get(), PluginEntry.builder().setKey("maprewritepolicy").setClassName("org.apache.logging.log4j.core.appender.rewrite.MapRewritePolicy").setName("MapRewritePolicy").setNamespace("Core").setElementType("rewritePolicy").setPrintable(true).get(), PluginEntry.builder().setKey("replace").setClassName("org.apache.logging.log4j.core.pattern.RegexReplacementConverter").setName("replace").setNamespace("Converter").get(), PluginEntry.builder().setKey("customlevel").setClassName("org.apache.logging.log4j.core.config.CustomLevelConfig").setName("CustomLevel").setNamespace("Core").setElementType("CustomLevel").setPrintable(true).get(), PluginEntry.builder().setKey("rollingfile").setClassName("org.apache.logging.log4j.core.appender.RollingFileAppender").setName("RollingFile").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("customlevels").setClassName("org.apache.logging.log4j.core.config.CustomLevels").setName("CustomLevels").setNamespace("Core").setElementType("CustomLevels").setPrintable(true).get(), PluginEntry.builder().setKey("rootthrowablepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.RootThrowablePatternConverter").setName("RootThrowablePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("rfc5424layout").setClassName("org.apache.logging.log4j.core.layout.Rfc5424Layout").setName("Rfc5424Layout").setNamespace("Core").setElementType("layout").setPrintable(true).get(), PluginEntry.builder().setKey("classnamepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.ClassNamePatternConverter").setName("ClassNamePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("env").setClassName("org.apache.logging.log4j.core.lookup.EnvironmentLookup").setName("env").setNamespace("Lookup").get(), PluginEntry.builder().setKey("sys").setClassName("org.apache.logging.log4j.core.lookup.SystemPropertiesLookup").setName("sys").setNamespace("Lookup").get(), PluginEntry.builder().setKey("loggerfqcnpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.LoggerFqcnPatternConverter").setName("LoggerFqcnPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("syslog").setClassName("org.apache.logging.log4j.core.appender.SyslogAppender").setName("Syslog").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("denyallfilter").setClassName("org.apache.logging.log4j.core.filter.DenyAllFilter").setName("DenyAllFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("filelocationpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.FileLocationPatternConverter").setName("FileLocationPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("socketaddress").setClassName("org.apache.logging.log4j.core.net.SocketAddress").setName("SocketAddress").setNamespace("Core").setElementType("SocketAddress").setPrintable(true).get(), PluginEntry.builder().setKey("arrayblockingqueue").setClassName("org.apache.logging.log4j.core.async.ArrayBlockingQueueFactory").setName("ArrayBlockingQueue").setNamespace("Core").setElementType("BlockingQueueFactory").get(), PluginEntry.builder().setKey("ifaccumulatedfilecount").setClassName("org.apache.logging.log4j.core.appender.rolling.action.IfAccumulatedFileCount").setName("IfAccumulatedFileCount").setNamespace("Core").setElementType("IfAccumulatedFileCount").setPrintable(true).get(), PluginEntry.builder().setKey("routing").setClassName("org.apache.logging.log4j.core.appender.routing.RoutingAppender").setName("Routing").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("ifany").setClassName("org.apache.logging.log4j.core.appender.rolling.action.IfAny").setName("IfAny").setNamespace("Core").setElementType("IfAny").setPrintable(true).get(), PluginEntry.builder().setKey("burstfilter").setClassName("org.apache.logging.log4j.core.filter.BurstFilter").setName("BurstFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("extendedthrowablepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter").setName("ExtendedThrowablePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("java").setClassName("org.apache.logging.log4j.core.lookup.JavaLookup").setName("java").setNamespace("Lookup").get(), PluginEntry.builder().setKey("patternmatch").setClassName("org.apache.logging.log4j.core.layout.PatternMatch").setName("PatternMatch").setNamespace("Core").setElementType("PatternMatch").setPrintable(true).get(), PluginEntry.builder().setKey("loggers").setClassName("org.apache.logging.log4j.core.config.LoggersPlugin").setName("loggers").setNamespace("Core").setElementType("loggers").get(), PluginEntry.builder().setKey("disruptorblockingqueue").setClassName("org.apache.logging.log4j.core.async.DisruptorBlockingQueueFactory").setName("DisruptorBlockingQueue").setNamespace("Core").setElementType("BlockingQueueFactory").setPrintable(true).get(), PluginEntry.builder().setKey("relativetimepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.RelativeTimePatternConverter").setName("RelativeTimePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("levelpatternselector").setClassName("org.apache.logging.log4j.core.layout.LevelPatternSelector").setName("LevelPatternSelector").setNamespace("Core").setElementType("patternSelector").setPrintable(true).get(), PluginEntry.builder().setKey("markerpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.MarkerPatternConverter").setName("MarkerPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("route").setClassName("org.apache.logging.log4j.core.appender.routing.Route").setName("Route").setNamespace("Core").setElementType("Route").setPrintable(true).setDeferChildren(true).get(), PluginEntry.builder().setKey("asynclogger").setClassName("org.apache.logging.log4j.core.async.AsyncLoggerConfig").setName("asyncLogger").setNamespace("Core").setElementType("asyncLogger").setPrintable(true).get(), PluginEntry.builder().setKey("asyncroot").setClassName("org.apache.logging.log4j.core.async.AsyncLoggerConfig$RootLogger").setName("asyncRoot").setNamespace("Core").setElementType("asyncRoot").setPrintable(true).get(), PluginEntry.builder().setKey("style").setClassName("org.apache.logging.log4j.core.pattern.StyleConverter").setName("style").setNamespace("Converter").get(), PluginEntry.builder().setKey("threadpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.ThreadNamePatternConverter").setName("ThreadPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("iflastmodified").setClassName("org.apache.logging.log4j.core.appender.rolling.action.IfLastModified").setName("IfLastModified").setNamespace("Core").setElementType("IfLastModified").setPrintable(true).get(), PluginEntry.builder().setKey("replace").setClassName("org.apache.logging.log4j.core.pattern.RegexReplacement").setName("replace").setNamespace("Core").setElementType("replace").setPrintable(true).get(), PluginEntry.builder().setKey("mapfilter").setClassName("org.apache.logging.log4j.core.filter.MapFilter").setName("MapFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("levelrangefilter").setClassName("org.apache.logging.log4j.core.filter.LevelRangeFilter").setName("LevelRangeFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("routes").setClassName("org.apache.logging.log4j.core.appender.routing.Routes").setName("Routes").setNamespace("Core").setElementType("Routes").setPrintable(true).get(), PluginEntry.builder().setKey("mutablethreadcontextmapfilter").setClassName("org.apache.logging.log4j.core.filter.MutableThreadContextMapFilter").setName("MutableThreadContextMapFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("mutablecontextmapfilter").setClassName("org.apache.logging.log4j.core.filter.MutableThreadContextMapFilter").setName("MutableThreadContextMapFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("xmlconfigurationfactory").setClassName("org.apache.logging.log4j.core.config.xml.XmlConfigurationFactory").setName("XmlConfigurationFactory").setNamespace("ConfigurationFactory").get(), PluginEntry.builder().setKey("sequencenumberpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.SequenceNumberPatternConverter").setName("SequenceNumberPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("keyvaluepair").setClassName("org.apache.logging.log4j.core.util.KeyValuePair").setName("KeyValuePair").setNamespace("Core").setElementType("KeyValuePair").setPrintable(true).get(), PluginEntry.builder().setKey("timefilter").setClassName("org.apache.logging.log4j.core.filter.TimeFilter").setName("TimeFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("http").setClassName("org.apache.logging.log4j.core.appender.HttpAppender").setName("Http").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("nanotimepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.NanoTimePatternConverter").setName("NanoTimePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("map").setClassName("org.apache.logging.log4j.core.lookup.MapLookup").setName("map").setNamespace("Lookup").get(), PluginEntry.builder().setKey("datepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.DatePatternConverter").setName("DatePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("endofbatchpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.EndOfBatchPatternConverter").setName("EndOfBatchPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("stringmatchfilter").setClassName("org.apache.logging.log4j.core.filter.StringMatchFilter").setName("StringMatchFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("policies").setClassName("org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy").setName("Policies").setNamespace("Core").setElementType("Policies").setPrintable(true).get(), PluginEntry.builder().setKey("threadidpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.ThreadIdPatternConverter").setName("ThreadIdPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("keystore").setClassName("org.apache.logging.log4j.core.net.ssl.KeyStoreConfiguration").setName("KeyStore").setNamespace("Core").setElementType("KeyStore").setPrintable(true).get(), PluginEntry.builder().setKey("countingnoop").setClassName("org.apache.logging.log4j.core.appender.CountingNoOpAppender").setName("CountingNoOp").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("markerfilter").setClassName("org.apache.logging.log4j.core.filter.MarkerFilter").setName("MarkerFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("sysloglayout").setClassName("org.apache.logging.log4j.core.layout.SyslogLayout").setName("SyslogLayout").setNamespace("Core").setElementType("layout").setPrintable(true).get(), PluginEntry.builder().setKey("timebasedtriggeringpolicy").setClassName("org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy").setName("TimeBasedTriggeringPolicy").setNamespace("Core").setElementType("TimeBasedTriggeringPolicy").setPrintable(true).get(), PluginEntry.builder().setKey("defaultrolloverstrategy").setClassName("org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy").setName("DefaultRolloverStrategy").setNamespace("Core").setElementType("DefaultRolloverStrategy").setPrintable(true).get(), PluginEntry.builder().setKey("log4j").setClassName("org.apache.logging.log4j.core.lookup.Log4jLookup").setName("log4j").setNamespace("Lookup").get(), PluginEntry.builder().setKey("ndcpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.NdcPatternConverter").setName("NdcPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("linelocationpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.LineLocationPatternConverter").setName("LineLocationPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("repeat").setClassName("org.apache.logging.log4j.core.pattern.RepeatPatternConverter").setName("repeat").setNamespace("Converter").get(), PluginEntry.builder().setKey("mappatternconverter").setClassName("org.apache.logging.log4j.core.pattern.MapPatternConverter").setName("MapPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("socketoptions").setClassName("org.apache.logging.log4j.core.net.SocketOptions").setName("SocketOptions").setNamespace("Core").setElementType("SocketOptions").setPrintable(true).get(), PluginEntry.builder().setKey("threadcontextmapfilter").setClassName("org.apache.logging.log4j.core.filter.ThreadContextMapFilter").setName("ThreadContextMapFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("contextmapfilter").setClassName("org.apache.logging.log4j.core.filter.ThreadContextMapFilter").setName("ThreadContextMapFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("throwablepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.ThrowablePatternConverter").setName("ThrowablePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("markerpatternselector").setClassName("org.apache.logging.log4j.core.layout.MarkerPatternSelector").setName("MarkerPatternSelector").setNamespace("Core").setElementType("patternSelector").setPrintable(true).get(), PluginEntry.builder().setKey("integerpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.IntegerPatternConverter").setName("IntegerPatternConverter").setNamespace("FileConverter").get(), PluginEntry.builder().setKey("gelflayout").setClassName("org.apache.logging.log4j.core.layout.GelfLayout").setName("GelfLayout").setNamespace("Core").setElementType("layout").setPrintable(true).get(), PluginEntry.builder().setKey("rewrite").setClassName("org.apache.logging.log4j.core.appender.rewrite.RewriteAppender").setName("Rewrite").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("patternlayout").setClassName("org.apache.logging.log4j.core.layout.PatternLayout").setName("PatternLayout").setNamespace("Core").setElementType("layout").setPrintable(true).get(), PluginEntry.builder().setKey("loggernamelevelrewritepolicy").setClassName("org.apache.logging.log4j.core.appender.rewrite.LoggerNameLevelRewritePolicy").setName("LoggerNameLevelRewritePolicy").setNamespace("Core").setElementType("rewritePolicy").setPrintable(true).get(), PluginEntry.builder().setKey("onstartuptriggeringpolicy").setClassName("org.apache.logging.log4j.core.appender.rolling.OnStartupTriggeringPolicy").setName("OnStartupTriggeringPolicy").setNamespace("Core").setElementType("OnStartupTriggeringPolicy").setPrintable(true).get(), PluginEntry.builder().setKey("threadprioritypatternconverter").setClassName("org.apache.logging.log4j.core.pattern.ThreadPriorityPatternConverter").setName("ThreadPriorityPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("equalsignorecase").setClassName("org.apache.logging.log4j.core.pattern.EqualsIgnoreCaseReplacementConverter").setName("equalsIgnoreCase").setNamespace("Converter").get(), PluginEntry.builder().setKey("black").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Black").setName("black").setNamespace("Converter").get(), PluginEntry.builder().setKey("blue").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Blue").setName("blue").setNamespace("Converter").get(), PluginEntry.builder().setKey("cyan").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Cyan").setName("cyan").setNamespace("Converter").get(), PluginEntry.builder().setKey("green").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Green").setName("green").setNamespace("Converter").get(), PluginEntry.builder().setKey("magenta").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Magenta").setName("magenta").setNamespace("Converter").get(), PluginEntry.builder().setKey("red").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Red").setName("red").setNamespace("Converter").get(), PluginEntry.builder().setKey("white").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$White").setName("white").setNamespace("Converter").get(), PluginEntry.builder().setKey("yellow").setClassName("org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter$Yellow").setName("yellow").setNamespace("Converter").get(), PluginEntry.builder().setKey("ifall").setClassName("org.apache.logging.log4j.core.appender.rolling.action.IfAll").setName("IfAll").setNamespace("Core").setElementType("IfAll").setPrintable(true).get(), PluginEntry.builder().setKey("markernamepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.MarkerSimpleNamePatternConverter").setName("MarkerNamePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("property").setClassName("org.apache.logging.log4j.core.config.Property").setName("Property").setNamespace("Core").setElementType("Property").setPrintable(true).get(), PluginEntry.builder().setKey("rollingrandomaccessfile").setClassName("org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender").setName("RollingRandomAccessFile").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("nooptriggeringpolicy").setClassName("org.apache.logging.log4j.core.appender.rolling.NoOpTriggeringPolicy").setName("NoOpTriggeringPolicy").setNamespace("Core").setElementType("NoOpTriggeringPolicy").setPrintable(true).get(), PluginEntry.builder().setKey("nosql").setClassName("org.apache.logging.log4j.core.appender.nosql.NoSqlAppender").setName("NoSql").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("processidpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.ProcessIdPatternConverter").setName("ProcessIdPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("thresholdfilter").setClassName("org.apache.logging.log4j.core.filter.ThresholdFilter").setName("ThresholdFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("jsonconfigurationfactory").setClassName("org.apache.logging.log4j.core.config.jason.JsonConfigurationFactory").setName("JsonConfigurationFactory").setNamespace("ConfigurationFactory").get(), PluginEntry.builder().setKey("systempropertyarbiter").setClassName("org.apache.logging.log4j.core.config.arbiters.SystemPropertyArbiter").setName("SystemPropertyArbiter").setNamespace("Core").setElementType("Arbiter").setPrintable(true).setDeferChildren(true).get(), PluginEntry.builder().setKey("mdcpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.MdcPatternConverter").setName("MdcPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("bigdecimalconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$BigDecimalConverter").setName("BigDecimalConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("bigintegerconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$BigIntegerConverter").setName("BigIntegerConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("bytearrayconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$ByteArrayConverter").setName("ByteArrayConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("chararrayconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$CharArrayConverter").setName("CharArrayConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("charsetconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$CharsetConverter").setName("CharsetConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("classconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$ClassConverter").setName("ClassConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("cronexpressionconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$CronExpressionConverter").setName("CronExpressionConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("durationconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$DurationConverter").setName("DurationConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("fileconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$FileConverter").setName("FileConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("inetaddressconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$InetAddressConverter").setName("InetAddressConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("levelconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$LevelConverter").setName("LevelConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("pathconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$PathConverter").setName("PathConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("patternconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$PatternConverter").setName("PatternConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("securityproviderconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$SecurityProviderConverter").setName("SecurityProviderConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("uriconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$UriConverter").setName("UriConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("urlconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$UrlConverter").setName("UrlConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("uuidconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$UuidConverter").setName("UuidConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("zoneidconverter").setClassName("org.apache.logging.log4j.core.config.plugins.convert.CoreTypeConverters$ZoneIdConverter").setName("ZoneIdConverter").setNamespace("TypeConverter").get(), PluginEntry.builder().setKey("socketperformancepreferences").setClassName("org.apache.logging.log4j.core.net.SocketPerformancePreferences").setName("SocketPerformancePreferences").setNamespace("Core").setElementType("SocketPerformancePreferences").setPrintable(true).get(), PluginEntry.builder().setKey("date").setClassName("org.apache.logging.log4j.core.lookup.DateLookup").setName("date").setNamespace("Lookup").get(), PluginEntry.builder().setKey("filedatepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.FileDatePatternConverter").setName("FileDatePatternConverter").setNamespace("FileConverter").get(), PluginEntry.builder().setKey("bundle").setClassName("org.apache.logging.log4j.core.lookup.ResourceBundleLookup").setName("bundle").setNamespace("Lookup").get(), PluginEntry.builder().setKey("encode").setClassName("org.apache.logging.log4j.core.pattern.EncodingPatternConverter").setName("encode").setNamespace("Converter").get(), PluginEntry.builder().setKey("defaultarbiter").setClassName("org.apache.logging.log4j.core.config.arbiters.DefaultArbiter").setName("DefaultArbiter").setNamespace("Core").setElementType("Arbiter").setPrintable(true).setDeferChildren(true).get(), PluginEntry.builder().setKey("equals").setClassName("org.apache.logging.log4j.core.pattern.EqualsReplacementConverter").setName("equals").setNamespace("Converter").get(), PluginEntry.builder().setKey("ctx").setClassName("org.apache.logging.log4j.core.lookup.ContextMapLookup").setName("ctx").setNamespace("Lookup").get(), PluginEntry.builder().setKey("delete").setClassName("org.apache.logging.log4j.core.appender.rolling.action.DeleteAction").setName("Delete").setNamespace("Core").setElementType("Delete").setPrintable(true).get(), PluginEntry.builder().setKey("properties").setClassName("org.apache.logging.log4j.core.config.PropertiesPlugin").setName("properties").setNamespace("Core").setElementType("properties").setPrintable(true).get(), PluginEntry.builder().setKey("structureddatafilter").setClassName("org.apache.logging.log4j.core.filter.StructuredDataFilter").setName("StructuredDataFilter").setNamespace("Core").setElementType("filter").setPrintable(true).get(), PluginEntry.builder().setKey("posixviewattribute").setClassName("org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction").setName("PosixViewAttribute").setNamespace("Core").setElementType("PosixViewAttribute").setPrintable(true).get(), PluginEntry.builder().setKey("jvmrunargs").setClassName("org.apache.logging.log4j.core.lookup.JmxRuntimeInputArgumentsLookup").setName("jvmrunargs").setNamespace("Lookup").get(), PluginEntry.builder().setKey("messagepatternconverter").setClassName("org.apache.logging.log4j.core.pattern.MessagePatternConverter").setName("MessagePatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("methodlocationpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.MethodLocationPatternConverter").setName("MethodLocationPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("levelpatternconverter").setClassName("org.apache.logging.log4j.core.pattern.LevelPatternConverter").setName("LevelPatternConverter").setNamespace("Converter").get(), PluginEntry.builder().setKey("file").setClassName("org.apache.logging.log4j.core.appender.FileAppender").setName("File").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("ssl").setClassName("org.apache.logging.log4j.core.net.ssl.SslConfiguration").setName("Ssl").setNamespace("Core").setElementType("Ssl").setPrintable(true).get(), PluginEntry.builder().setKey("console").setClassName("org.apache.logging.log4j.core.appender.ConsoleAppender").setName("Console").setNamespace("Core").setElementType("appender").setPrintable(true).get(), PluginEntry.builder().setKey("upper").setClassName("org.apache.logging.log4j.core.lookup.UpperLookup").setName("upper").setNamespace("Lookup").get(), PluginEntry.builder().setKey("http").setClassName("org.apache.logging.log4j.core.config.HttpWatcher").setName("http").setNamespace("Watcher").get(), PluginEntry.builder().setKey("https").setClassName("org.apache.logging.log4j.core.config.HttpWatcher").setName("http").setNamespace("Watcher").get() };
│ │      }
│ │  }

2 / 33 target/reference/org.apache.logging.log4j/log4j-core-3.0.0-alpha1-sources.jar log4j-core/target/log4j-core-3.0.0-alpha1-sources.jar
--- target/reference/org.apache.logging.log4j/log4j-core-3.0.0-alpha1-sources.jar
+++ log4j-core/target/log4j-core-3.0.0-alpha1-sources.jar
├── zipinfo {}
│ @@ -1,8 +1,8 @@
│ -Zip file size: 1132033 bytes, number of entries: 677
│ +Zip file size: 1132028 bytes, number of entries: 677
│  -rw-r--r--  2.0 unx       64 b- defN 23-Jun-18 00:20 META-INF/MANIFEST.MF
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 META-INF/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/apache/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/apache/logging/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/apache/logging/log4j/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/apache/logging/log4j/core/
│ @@ -672,8 +672,8 @@
│  -rw-r--r--  2.0 unx       60 b- defN 23-Jun-18 00:20 META-INF/services/org.apache.logging.log4j.core.util.ContextDataProvider
│  -rw-r--r--  2.0 unx       64 b- defN 23-Jun-18 00:20 META-INF/services/org.apache.logging.log4j.message.ThreadDumpMessage$ThreadInfoFactory
│  -rw-r--r--  2.0 unx      835 b- defN 23-Jun-18 00:20 META-INF/services/org.apache.logging.log4j.plugins.di.InjectorCallback
│  -rw-r--r--  2.0 unx       48 b- defN 23-Jun-18 00:20 META-INF/services/org.apache.logging.log4j.spi.Provider
│  -rw-r--r--  2.0 unx     6782 b- defN 23-Jun-18 00:20 log4j2.propertyMapping.json
│  -rw-r--r--  2.0 unx     8426 b- defN 23-Jun-18 00:20 META-INF/maven/org.apache.logging.log4j/log4j-core/pom.xml
│  -rw-r--r--  2.0 unx       76 b- defN 23-Jun-18 00:20 META-INF/maven/org.apache.logging.log4j/log4j-core/pom.properties
│ -677 files, 3775251 bytes uncompressed, 998971 bytes compressed:  73.5%
│ +677 files, 3775251 bytes uncompressed, 998966 bytes compressed:  73.5%
├── org/apache/logging/log4j/core/plugins/Log4jPlugins.java
│┄ Ordering differences only
│ @@ -3,749 +3,692 @@
│  import org.apache.logging.log4j.plugins.model.PluginEntry;
│  import org.apache.logging.log4j.plugins.model.PluginService;
│  
│  public class Log4jPlugins extends PluginService {
│  
│    private static final PluginEntry[] ENTRIES = new PluginEntry[] {
│      PluginEntry.builder()
│ -      .setKey("loggernamelevelrewritepolicy")
│ -      .setClassName("org.apache.logging.log4j.core.appender.rewrite.LoggerNameLevelRewritePolicy")
│ -      .setName("LoggerNameLevelRewritePolicy")
│ -      .setNamespace("Core")
│ -      .setElementType("rewritePolicy")
│ -      .setPrintable(true)
│ -      .get(),
│ -    PluginEntry.builder()
│ -      .setKey("integerpatternconverter")
│ -      .setClassName("org.apache.logging.log4j.core.pattern.IntegerPatternConverter")
│ -      .setName("IntegerPatternConverter")
│ -      .setNamespace("FileConverter")
│ -      .get(),
│ -    PluginEntry.builder()
│ -      .setKey("relativetimepatternconverter")
│ -      .setClassName("org.apache.logging.log4j.core.pattern.RelativeTimePatternConverter")
│ -      .setName("RelativeTimePatternConverter")
│ -      .setNamespace("Converter")
│ -      .get(),
│ -    PluginEntry.builder()
│ -      .setKey("marker")
│ -      .setClassName("org.apache.logging.log4j.core.lookup.MarkerLookup")
│ -      .setName("marker")
│ -      .setNamespace("Lookup")
│ -      .get(),
│ -    PluginEntry.builder()
│ -      .setKey("jctoolsblockingqueue")
│ -      .setClassName("org.apache.logging.log4j.core.async.JCToolsBlockingQueueFactory")
│ -      .setName("JCToolsBlockingQueue")
│ -      .setNamespace("Core")
│ -      .setElementType("BlockingQueueFactory")
│ -      .setPrintable(true)
│ -      .get(),
│ -    PluginEntry.builder()
│ -      .setKey("stringmatchfilter")
│ -      .setClassName("org.apache.logging.log4j.core.filter.StringMatchFilter")
│ -      .setName("StringMatchFilter")
│ +      .setKey("levelmatchfilter")
│ +      .setClassName("org.apache.logging.log4j.core.filter.LevelMatchFilter")
│ +      .setName("LevelMatchFilter")
│        .setNamespace("Core")
│        .setElementType("filter")
│        .setPrintable(true)
│        .get(),
│      PluginEntry.builder()
│ -      .setKey("equalsignorecase")
│ -      .setClassName("org.apache.logging.log4j.core.pattern.EqualsIgnoreCaseReplacementConverter")
│ -      .setName("equalsIgnoreCase")
│ -      .setNamespace("Converter")
│ +      .setKey("sd")
│ +      .setClassName("org.apache.logging.log4j.core.lookup.StructuredDataLookup")
│ +      .setName("sd")
│ +      .setNamespace("Lookup")
│        .get(),
│      PluginEntry.builder()
│ -      .setKey("null")
│ -      .setClassName("org.apache.logging.log4j.core.appender.NullAppender")
│ -      .setName("Null")
│ +      .setKey("socket")
│ +      .setClassName("org.apache.logging.log4j.core.appender.SocketAppender")
│ +      .setName("Socket")
│        .setNamespace("Core")
│        .setElementType("appender")
│        .setPrintable(true)
│        .get(),
│      PluginEntry.builder()
│ -      .setKey("directwriterolloverstrategy")
│ -      .setClassName("org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy")
│ -      .setName("DirectWriteRolloverStrategy")
│ +      .setKey("columnmapping")
│ +      .setClassName("org.apache.logging.log4j.core.appender.db.ColumnMapping")
│ +      .setName("ColumnMapping")
│        .setNamespace("Core")
│ -      .setElementType("DirectWriteRolloverStrategy")
│ +      .setElementType("ColumnMapping")
│        .setPrintable(true)
│        .get(),
│      PluginEntry.builder()
│ -      .setKey("timebasedtriggeringpolicy")
│ -      .setClassName("org.apache.logging.log4j.core.appender.rolling.TimeBasedTriggeringPolicy")
│ -      .setName("TimeBasedTriggeringPolicy")
│ +      .setKey("select")
│ +      .setClassName("org.apache.logging.log4j.core.config.arbiters.SelectArbiter")
│ +      .setName("Select")
│        .setNamespace("Core")
│ -      .setElementType("TimeBasedTriggeringPolicy")
│ +      .setElementType("Arbiter")
│        .setPrintable(true)
│ +      .setDeferChildren(true)
│        .get(),
...

...

13 / 33 target/reference/org.apache.logging.log4j/log4j-docker-3.0.0-alpha1.jar log4j-docker/target/log4j-docker-3.0.0-alpha1.jar
--- target/reference/org.apache.logging.log4j/log4j-docker-3.0.0-alpha1.jar
+++ log4j-docker/target/log4j-docker-3.0.0-alpha1.jar
├── zipinfo {}
│ @@ -1,8 +1,8 @@
│ -Zip file size: 21294 bytes, number of entries: 29
│ +Zip file size: 21293 bytes, number of entries: 29
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 META-INF/
│  -rw-r--r--  2.0 unx     1950 b- defN 23-Jun-18 00:20 META-INF/MANIFEST.MF
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 META-INF/services/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/apache/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/apache/logging/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/apache/logging/log4j/
│ @@ -24,8 +24,8 @@
│  -rw-r--r--  2.0 unx     2381 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/docker/model/Mount.class
│  -rw-r--r--  2.0 unx     3954 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/docker/model/Network.class
│  -rw-r--r--  2.0 unx     5402 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/docker/model/NetworkSettings.class
│  -rw-r--r--  2.0 unx     1499 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/docker/model/PortDefinition.class
│  -rw-r--r--  2.0 unx     1271 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/docker/plugins/Log4jPlugins.class
│  -rw-r--r--  2.0 unx     3022 b- defN 23-Jun-18 00:20 META-INF/maven/org.apache.logging.log4j/log4j-docker/pom.xml
│  -rw-r--r--  2.0 unx       78 b- defN 23-Jun-18 00:20 META-INF/maven/org.apache.logging.log4j/log4j-docker/pom.properties
│ -29 files, 46822 bytes uncompressed, 16846 bytes compressed:  64.0%
│ +29 files, 46822 bytes uncompressed, 16845 bytes compressed:  64.0%
├── META-INF/MANIFEST.MF
│ @@ -14,18 +14,18 @@
│  Bundle-DocURL: https://www.apache.org/

│  Bundle-License: https://www.apache.org/licenses/LICENSE-2.0.txt

│  Bundle-ManifestVersion: 2

│  Bundle-Name: Apache Log4j Docker Library

│  Bundle-SymbolicName: org.apache.logging.log4j.docker

│  Bundle-Vendor: The Apache Software Foundation

│  Bundle-Version: 3.0.0.alpha1

│ -Export-Package: org.apache.logging.log4j.docker.plugins;uses:="org.apach

│ - e.logging.log4j.plugins.model";version="3.0.0",org.apache.logging.log4j

│ - .docker;uses:="org.apache.logging.log4j.core,org.apache.logging.log4j.c

│ - ore.lookup,org.apache.logging.log4j.plugins";version="3.0.0",org.apache

│ +Export-Package: org.apache.logging.log4j.docker;uses:="org.apache.loggin

│ + g.log4j.core,org.apache.logging.log4j.core.lookup,org.apache.logging.lo

│ + g4j.plugins";version="3.0.0",org.apache.logging.log4j.docker.plugins;us

│ + es:="org.apache.logging.log4j.plugins.model";version="3.0.0",org.apache

│   .logging.log4j.docker.model;version="3.0.0"

│  Import-Package: com.fasterxml.jackson.annotation;version="[2.14,3)",com.

│   fasterxml.jackson.core.type;version="[2.14,3)",com.fasterxml.jackson.da

│   tabind;version="[2.14,3)",java.io,java.lang,java.lang.invoke,java.net,j

│   ava.util,org.apache.logging.log4j;version="[3.0,4)",org.apache.logging.

│   log4j.core;version="[3.0,4)",org.apache.logging.log4j.core.lookup;versi

│   on="[3.0,4)",org.apache.logging.log4j.core.util;version="[3.0,4)",org.a

...

25 / 33 target/reference/org.apache.logging.log4j/log4j-osgi-3.0.0-alpha1-test-sources.jar log4j-osgi/target/log4j-osgi-3.0.0-alpha1-test-sources.jar
--- target/reference/org.apache.logging.log4j/log4j-osgi-3.0.0-alpha1-test-sources.jar
+++ log4j-osgi/target/log4j-osgi-3.0.0-alpha1-test-sources.jar
├── zipinfo {}
│ @@ -25,66 +25,66 @@
│  -rw-r--r--  2.0 unx     2754 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/osgi/tests/JULProviderTest.java
│  -rw-r--r--  2.0 unx     2714 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/osgi/tests/SLF4JProviderTest.java
│  -rw-r--r--  2.0 unx     1282 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/osgi/tests/equinox/EquinoxLoadApiBundleTest.java
│  -rw-r--r--  2.0 unx     1257 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/osgi/tests/felix/FelixLoadApiBundleTest.java
│  -rw-r--r--  2.0 unx     2712 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/osgi/tests/junit/OsgiTestRule.java
│  -rw-r--r--  2.0 unx      632 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/osgi/tests/plugins/Log4jPlugins.java
│  -rw-r--r--  2.0 unx       50 b- defN 23-Jun-18 00:20 log4j2.custom
│ --rw-r--r--  2.0 unx       77 b- defN 23-Jun-18 00:20 biz.aQute.bndlib.link
│ --rw-r--r--  2.0 unx       98 b- defN 23-Jun-18 00:20 ch.qos.logback.classic.link
...
│ --rw-r--r--  2.0 unx       81 b- defN 23-Jun-18 00:20 slf4j.api.link
│ --rw-r--r--  2.0 unx       91 b- defN 23-Jun-18 00:20 stax2-api.link
│ +-rw-r--r--  2.0 unx       75 b- defN 23-Jun-18 00:20 biz.aQute.bndlib.link
│ +-rw-r--r--  2.0 unx       96 b- defN 23-Jun-18 00:20 ch.qos.logback.classic.link
...
│ +-rw-r--r--  2.0 unx       79 b- defN 23-Jun-18 00:20 slf4j.api.link
│ +-rw-r--r--  2.0 unx       89 b- defN 23-Jun-18 00:20 stax2-api.link
│  -rw-r--r--  2.0 unx     6486 b- defN 23-Jun-18 00:20 META-INF/maven/org.apache.logging.log4j/log4j-osgi/pom.xml
│  -rw-r--r--  2.0 unx       76 b- defN 23-Jun-18 00:20 META-INF/maven/org.apache.logging.log4j/log4j-osgi/pom.properties
│ -88 files, 57800 bytes uncompressed, 21502 bytes compressed:  62.8%
│ +88 files, 57892 bytes uncompressed, 21502 bytes compressed:  62.9%
├── biz.aQute.bndlib.link
│ @@ -1 +1 @@
│ -file:/Users/rgoers/.m2/repository/biz/aQute/bnd/bndlib/2.4.0/bndlib-2.4.0.jar
│ +file:/home/herve/.m2/repository/biz/aQute/bnd/bndlib/2.4.0/bndlib-2.4.0.jar
├── ch.qos.logback.classic.link
│ @@ -1 +1 @@
│ -file:/Users/rgoers/.m2/repository/ch/qos/logback/logback-classic/1.2.11/logback-classic-1.2.11.jar
│ +file:/home/herve/.m2/repository/ch/qos/logback/logback-classic/1.2.11/logback-classic-1.2.11.jar
...

...

29 / 33 target/reference/org.apache.logging.log4j/log4j-spring-cloud-config-client-3.0.0-alpha1.jar log4j-spring-cloud-config/log4j-spring-cloud-config-client/target/log4j-spring-cloud-config-client-3.0.0-alpha1.jar
--- target/reference/org.apache.logging.log4j/log4j-spring-cloud-config-client-3.0.0-alpha1.jar
+++ log4j-spring-cloud-config/log4j-spring-cloud-config-client/target/log4j-spring-cloud-config-client-3.0.0-alpha1.jar
├── zipinfo {}
│ @@ -1,25 +1,25 @@
│ -Zip file size: 13718 bytes, number of entries: 23
│ +Zip file size: 13717 bytes, number of entries: 23
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 META-INF/
│  -rw-r--r--  2.0 unx     1424 b- defN 23-Jun-18 00:20 META-INF/MANIFEST.MF
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 META-INF/services/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/apache/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/apache/logging/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/apache/logging/log4j/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/apache/logging/log4j/spring/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/apache/logging/log4j/spring/cloud/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/apache/logging/log4j/spring/cloud/config/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 org/apache/logging/log4j/spring/cloud/config/client/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 META-INF/maven/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 META-INF/maven/org.apache.logging.log4j/
│  drwxr-xr-x  2.0 unx        0 b- stor 23-Jun-18 00:20 META-INF/maven/org.apache.logging.log4j/log4j-spring-cloud-config-client/
│ --rw-r--r--  2.0 unx    12150 b- defN 23-Jun-18 00:20 META-INF/DEPENDENCIES
│ +-rw-r--r--  2.0 unx    12157 b- defN 23-Jun-18 00:20 META-INF/DEPENDENCIES
│  -rw-r--r--  2.0 unx    11358 b- defN 23-Jun-18 00:20 META-INF/LICENSE
│  -rw-r--r--  2.0 unx      204 b- defN 23-Jun-18 00:20 META-INF/NOTICE
│  -rw-r--r--  2.0 unx       69 b- defN 23-Jun-18 00:20 META-INF/services/org.apache.logging.log4j.core.util.WatchEventService
│  -rw-r--r--  2.0 unx      903 b- defN 23-Jun-18 00:20 META-INF/spring.factories
│  -rw-r--r--  2.0 unx     1802 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/spring/cloud/config/client/Log4j2EventListener.class
│  -rw-r--r--  2.0 unx     1756 b- defN 23-Jun-18 00:20 org/apache/logging/log4j/spring/cloud/config/client/WatchEventManager.class
│  -rw-r--r--  2.0 unx     4803 b- defN 23-Jun-18 00:20 META-INF/maven/org.apache.logging.log4j/log4j-spring-cloud-config-client/pom.xml
│  -rw-r--r--  2.0 unx       98 b- defN 23-Jun-18 00:20 META-INF/maven/org.apache.logging.log4j/log4j-spring-cloud-config-client/pom.properties
│ -23 files, 34567 bytes uncompressed, 10214 bytes compressed:  70.5%
│ +23 files, 34574 bytes uncompressed, 10213 bytes compressed:  70.5%
├── META-INF/DEPENDENCIES
│ @@ -105,15 +105,15 @@
│      License: Apache License, Version 2.0  (https://www.apache.org/licenses/LICENSE-2.0.txt)
│  
│  From: 'SpringSource' (http://www.springsource.com)
│    - spring-security-rsa (http://github.com/spring-projects/spring-security-oauth) org.springframework.security:spring-security-rsa:jar:1.0.11.RELEASE
│      License: Apache 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)
│  
│  From: 'SpringSource' (https://www.springsource.com)
│ -  - Spring Retry (https://www.springsource.org) org.springframework.retry:spring-retry:jar:1.3.4
│ +  - Spring Retry (https://www.springsource.org) org.springframework.retry:spring-retry:jar:3.0.0-alpha1
│      License: Apache 2.0  (https://www.apache.org/licenses/LICENSE-2.0.txt)
│  
│  From: 'The Apache Software Foundation' (http://www.apache.org/)
│    - Apache Commons Logging (http://commons.apache.org/proper/commons-logging/) commons-logging:commons-logging:jar:1.2
│      License: The Apache Software License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)
│    - Apache HttpClient (http://hc.apache.org/httpcomponents-client-ga) org.apache.httpcomponents:httpclient:jar:4.5.14
│      License: Apache License, Version 2.0  (http://www.apache.org/licenses/LICENSE-2.0.txt)

...
