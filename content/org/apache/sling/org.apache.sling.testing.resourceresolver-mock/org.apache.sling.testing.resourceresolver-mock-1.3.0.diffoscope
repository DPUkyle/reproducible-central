1 / 4 target/reference/org.apache.sling.testing.resourceresolver-mock-1.3.0.pom pom.xml
--- target/reference/org.apache.sling.testing.resourceresolver-mock-1.3.0.pom
+++ pom.xml
@@ -1,453 +1,466 @@
 00000000: 3c3f 786d 6c20 7665 7273 696f 6e3d 2231  <?xml version="1
 00000010: 2e30 2220 656e 636f 6469 6e67 3d22 4953  .0" encoding="IS
-00000020: 4f2d 3838 3539 2d31 223f 3e0a 3c21 2d2d  O-8859-1"?>.<!--
-00000030: 0a20 204c 6963 656e 7365 6420 746f 2074  .  Licensed to t
-00000040: 6865 2041 7061 6368 6520 536f 6674 7761  he Apache Softwa
-00000050: 7265 2046 6f75 6e64 6174 696f 6e20 2841  re Foundation (A
-00000060: 5346 2920 756e 6465 7220 6f6e 650a 2020  SF) under one.  
-00000070: 6f72 206d 6f72 6520 636f 6e74 7269 6275  or more contribu
-00000080: 746f 7220 6c69 6365 6e73 6520 6167 7265  tor license agre
-00000090: 656d 656e 7473 2e20 2053 6565 2074 6865  ements.  See the
-000000a0: 204e 4f54 4943 4520 6669 6c65 0a20 2064   NOTICE file.  d
-000000b0: 6973 7472 6962 7574 6564 2077 6974 6820  istributed with 
-000000c0: 7468 6973 2077 6f72 6b20 666f 7220 6164  this work for ad
-000000d0: 6469 7469 6f6e 616c 2069 6e66 6f72 6d61  ditional informa
-000000e0: 7469 6f6e 0a20 2072 6567 6172 6469 6e67  tion.  regarding
-000000f0: 2063 6f70 7972 6967 6874 206f 776e 6572   copyright owner
-00000100: 7368 6970 2e20 2054 6865 2041 5346 206c  ship.  The ASF l
-00000110: 6963 656e 7365 7320 7468 6973 2066 696c  icenses this fil
-00000120: 650a 2020 746f 2079 6f75 2075 6e64 6572  e.  to you under
-00000130: 2074 6865 2041 7061 6368 6520 4c69 6365   the Apache Lice
-00000140: 6e73 652c 2056 6572 7369 6f6e 2032 2e30  nse, Version 2.0
-00000150: 2028 7468 650a 2020 224c 6963 656e 7365   (the.  "License
-00000160: 2229 3b20 796f 7520 6d61 7920 6e6f 7420  "); you may not 
-00000170: 7573 6520 7468 6973 2066 696c 6520 6578  use this file ex
-00000180: 6365 7074 2069 6e20 636f 6d70 6c69 616e  cept in complian
-00000190: 6365 0a20 2077 6974 6820 7468 6520 4c69  ce.  with the Li
-000001a0: 6365 6e73 652e 2020 596f 7520 6d61 7920  cense.  You may 
-000001b0: 6f62 7461 696e 2061 2063 6f70 7920 6f66  obtain a copy of
-000001c0: 2074 6865 204c 6963 656e 7365 2061 740a   the License at.
-000001d0: 0a20 2020 6874 7470 3a2f 2f77 7777 2e61  .   http://www.a
-000001e0: 7061 6368 652e 6f72 672f 6c69 6365 6e73  pache.org/licens
-000001f0: 6573 2f4c 4943 454e 5345 2d32 2e30 0a0a  es/LICENSE-2.0..
-00000200: 2020 556e 6c65 7373 2072 6571 7569 7265    Unless require
-00000210: 6420 6279 2061 7070 6c69 6361 626c 6520  d by applicable 
-00000220: 6c61 7720 6f72 2061 6772 6565 6420 746f  law or agreed to
-00000230: 2069 6e20 7772 6974 696e 672c 0a20 2073   in writing,.  s
-00000240: 6f66 7477 6172 6520 6469 7374 7269 6275  oftware distribu
-00000250: 7465 6420 756e 6465 7220 7468 6520 4c69  ted under the Li
-00000260: 6365 6e73 6520 6973 2064 6973 7472 6962  cense is distrib
-00000270: 7574 6564 206f 6e20 616e 0a20 2022 4153  uted on an.  "AS
-00000280: 2049 5322 2042 4153 4953 2c20 5749 5448   IS" BASIS, WITH
-00000290: 4f55 5420 5741 5252 414e 5449 4553 204f  OUT WARRANTIES O
-000002a0: 5220 434f 4e44 4954 494f 4e53 204f 4620  R CONDITIONS OF 
-000002b0: 414e 590a 2020 4b49 4e44 2c20 6569 7468  ANY.  KIND, eith
-000002c0: 6572 2065 7870 7265 7373 206f 7220 696d  er express or im
-000002d0: 706c 6965 642e 2020 5365 6520 7468 6520  plied.  See the 
-000002e0: 4c69 6365 6e73 6520 666f 7220 7468 650a  License for the.
-000002f0: 2020 7370 6563 6966 6963 206c 616e 6775    specific langu
-00000300: 6167 6520 676f 7665 726e 696e 6720 7065  age governing pe
-00000310: 726d 6973 7369 6f6e 7320 616e 6420 6c69  rmissions and li
-00000320: 6d69 7461 7469 6f6e 730a 2020 756e 6465  mitations.  unde
-00000330: 7220 7468 6520 4c69 6365 6e73 652e 0a2d  r the License..-
-00000340: 2d3e 0a3c 7072 6f6a 6563 7420 786d 6c6e  ->.<project xmln
-00000350: 733d 2268 7474 703a 2f2f 6d61 7665 6e2e  s="http://maven.
-00000360: 6170 6163 6865 2e6f 7267 2f50 4f4d 2f34  apache.org/POM/4
-00000370: 2e30 2e30 2220 786d 6c6e 733a 7873 693d  .0.0" xmlns:xsi=
-00000380: 2268 7474 703a 2f2f 7777 772e 7733 2e6f  "http://www.w3.o
-00000390: 7267 2f32 3030 312f 584d 4c53 6368 656d  rg/2001/XMLSchem
-000003a0: 612d 696e 7374 616e 6365 2220 7873 693a  a-instance" xsi:
-000003b0: 7363 6865 6d61 4c6f 6361 7469 6f6e 3d22  schemaLocation="
-000003c0: 6874 7470 3a2f 2f6d 6176 656e 2e61 7061  http://maven.apa
-000003d0: 6368 652e 6f72 672f 504f 4d2f 342e 302e  che.org/POM/4.0.
-000003e0: 3020 6874 7470 3a2f 2f6d 6176 656e 2e61  0 http://maven.a
-000003f0: 7061 6368 652e 6f72 672f 6d61 7665 6e2d  pache.org/maven-
-00000400: 7634 5f30 5f30 2e78 7364 223e 0a0a 2020  v4_0_0.xsd">..  
-00000410: 2020 3c6d 6f64 656c 5665 7273 696f 6e3e    <modelVersion>
-00000420: 342e 302e 303c 2f6d 6f64 656c 5665 7273  4.0.0</modelVers
-00000430: 696f 6e3e 0a20 2020 203c 7061 7265 6e74  ion>.    <parent
-00000440: 3e0a 2020 2020 2020 2020 3c67 726f 7570  >.        <group
-00000450: 4964 3e6f 7267 2e61 7061 6368 652e 736c  Id>org.apache.sl
-00000460: 696e 673c 2f67 726f 7570 4964 3e0a 2020  ing</groupId>.  
-00000470: 2020 2020 2020 3c61 7274 6966 6163 7449        <artifactI
-00000480: 643e 736c 696e 672d 6275 6e64 6c65 2d70  d>sling-bundle-p
-00000490: 6172 656e 743c 2f61 7274 6966 6163 7449  arent</artifactI
-000004a0: 643e 0a20 2020 2020 2020 203c 7665 7273  d>.        <vers
-000004b0: 696f 6e3e 3437 3c2f 7665 7273 696f 6e3e  ion>47</version>
-000004c0: 0a20 2020 2020 2020 203c 7265 6c61 7469  .        <relati
-000004d0: 7665 5061 7468 202f 3e0a 2020 2020 3c2f  vePath />.    </
-000004e0: 7061 7265 6e74 3e0a 0a20 2020 203c 6172  parent>..    <ar
-000004f0: 7469 6661 6374 4964 3e6f 7267 2e61 7061  tifactId>org.apa
-00000500: 6368 652e 736c 696e 672e 7465 7374 696e  che.sling.testin
-00000510: 672e 7265 736f 7572 6365 7265 736f 6c76  g.resourceresolv
-00000520: 6572 2d6d 6f63 6b3c 2f61 7274 6966 6163  er-mock</artifac
-00000530: 7449 643e 0a20 2020 203c 7665 7273 696f  tId>.    <versio
-00000540: 6e3e 312e 332e 303c 2f76 6572 7369 6f6e  n>1.3.0</version
-00000550: 3e0a 0a20 2020 203c 6e61 6d65 3e41 7061  >..    <name>Apa
-00000560: 6368 6520 536c 696e 6720 5465 7374 696e  che Sling Testin
-00000570: 6720 5265 736f 7572 6365 2052 6573 6f6c  g Resource Resol
-00000580: 7665 7220 4d6f 636b 3c2f 6e61 6d65 3e0a  ver Mock</name>.
-00000590: 2020 2020 3c64 6573 6372 6970 7469 6f6e      <description
-000005a0: 3e0a 2020 2020 2020 2020 4d6f 636b 2066  >.        Mock f
-000005b0: 6f72 2074 6865 2072 6573 6f75 7263 6520  or the resource 
-000005c0: 7265 736f 6c76 6572 202f 2066 6163 746f  resolver / facto
-000005d0: 7279 2066 6f72 2065 6173 6965 7220 7465  ry for easier te
-000005e0: 7374 696e 672e 0a20 2020 203c 2f64 6573  sting..    </des
-000005f0: 6372 6970 7469 6f6e 3e0a 0a20 2020 203c  cription>..    <
-00000600: 7363 6d3e 0a20 2020 2020 2020 203c 636f  scm>.        <co
-00000610: 6e6e 6563 7469 6f6e 3e73 636d 3a67 6974  nnection>scm:git
-00000620: 3a68 7474 7073 3a2f 2f67 6974 626f 782e  :https://gitbox.
-00000630: 6170 6163 6865 2e6f 7267 2f72 6570 6f73  apache.org/repos
-00000640: 2f61 7366 2f73 6c69 6e67 2d6f 7267 2d61  /asf/sling-org-a
-00000650: 7061 6368 652d 736c 696e 672d 7465 7374  pache-sling-test
-00000660: 696e 672d 7265 736f 7572 6365 7265 736f  ing-resourcereso
-00000670: 6c76 6572 2d6d 6f63 6b2e 6769 743c 2f63  lver-mock.git</c
-00000680: 6f6e 6e65 6374 696f 6e3e 0a20 2020 2020  onnection>.     
-00000690: 2020 203c 6465 7665 6c6f 7065 7243 6f6e     <developerCon
-000006a0: 6e65 6374 696f 6e3e 7363 6d3a 6769 743a  nection>scm:git:
-000006b0: 6874 7470 733a 2f2f 6769 7462 6f78 2e61  https://gitbox.a
-000006c0: 7061 6368 652e 6f72 672f 7265 706f 732f  pache.org/repos/
-000006d0: 6173 662f 736c 696e 672d 6f72 672d 6170  asf/sling-org-ap
-000006e0: 6163 6865 2d73 6c69 6e67 2d74 6573 7469  ache-sling-testi
-000006f0: 6e67 2d72 6573 6f75 7263 6572 6573 6f6c  ng-resourceresol
-00000700: 7665 722d 6d6f 636b 2e67 6974 3c2f 6465  ver-mock.git</de
-00000710: 7665 6c6f 7065 7243 6f6e 6e65 6374 696f  veloperConnectio
-00000720: 6e3e 0a20 2020 2020 2020 203c 7572 6c3e  n>.        <url>
-00000730: 6874 7470 733a 2f2f 6769 7462 6f78 2e61  https://gitbox.a
-00000740: 7061 6368 652e 6f72 672f 7265 706f 732f  pache.org/repos/
-00000750: 6173 663f 703d 736c 696e 672d 6f72 672d  asf?p=sling-org-
-00000760: 6170 6163 6865 2d73 6c69 6e67 2d74 6573  apache-sling-tes
-00000770: 7469 6e67 2d72 6573 6f75 7263 6572 6573  ting-resourceres
-00000780: 6f6c 7665 722d 6d6f 636b 2e67 6974 3c2f  olver-mock.git</
-00000790: 7572 6c3e 0a20 2020 2020 2020 203c 7461  url>.        <ta
-000007a0: 673e 6f72 672e 6170 6163 6865 2e73 6c69  g>org.apache.sli
-000007b0: 6e67 2e74 6573 7469 6e67 2e72 6573 6f75  ng.testing.resou
-000007c0: 7263 6572 6573 6f6c 7665 722d 6d6f 636b  rceresolver-mock
-000007d0: 2d31 2e33 2e30 3c2f 7461 673e 0a20 2020  -1.3.0</tag>.   
-000007e0: 203c 2f73 636d 3e0a 0a20 2020 203c 7072   </scm>..    <pr
-000007f0: 6f70 6572 7469 6573 3e0a 2020 2020 2020  operties>.      
-00000800: 2020 3c70 726f 6a65 6374 2e62 7569 6c64    <project.build
-00000810: 2e6f 7574 7075 7454 696d 6573 7461 6d70  .outputTimestamp
-00000820: 3e32 3032 322d 3035 2d30 3554 3136 3a32  >2022-05-05T16:2
-00000830: 313a 3235 5a3c 2f70 726f 6a65 6374 2e62  1:25Z</project.b
-00000840: 7569 6c64 2e6f 7574 7075 7454 696d 6573  uild.outputTimes
-00000850: 7461 6d70 3e0a 2020 2020 3c2f 7072 6f70  tamp>.    </prop
-00000860: 6572 7469 6573 3e0a 0a20 2020 203c 7265  erties>..    <re
-00000870: 706f 7274 696e 673e 0a20 2020 2020 2020  porting>.       
-00000880: 203c 706c 7567 696e 733e 0a20 2020 2020   <plugins>.     
-00000890: 2020 2020 2020 203c 706c 7567 696e 3e0a         <plugin>.
-000008a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
-000008b0: 3c67 726f 7570 4964 3e6f 7267 2e61 7061  <groupId>org.apa
-000008c0: 6368 652e 6d61 7665 6e2e 706c 7567 696e  che.maven.plugin
-000008d0: 733c 2f67 726f 7570 4964 3e0a 2020 2020  s</groupId>.    
-000008e0: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
-000008f0: 6966 6163 7449 643e 6d61 7665 6e2d 6a61  ifactId>maven-ja
-00000900: 7661 646f 632d 706c 7567 696e 3c2f 6172  vadoc-plugin</ar
-00000910: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
-00000920: 2020 2020 2020 2020 2020 3c63 6f6e 6669            <confi
-00000930: 6775 7261 7469 6f6e 3e0a 2020 2020 2020  guration>.      
-00000940: 2020 2020 2020 2020 2020 2020 2020 3c65                <e
-00000950: 7863 6c75 6465 5061 636b 6167 654e 616d  xcludePackageNam
-00000960: 6573 3e0a 2020 2020 2020 2020 2020 2020  es>.            
-00000970: 2020 2020 2020 2020 2020 2020 6f72 672e              org.
-00000980: 6170 6163 6865 2e73 6c69 6e67 2e74 6573  apache.sling.tes
-00000990: 7469 6e67 2e72 6573 6f75 7263 6572 6573  ting.resourceres
-000009a0: 6f6c 7665 720a 2020 2020 2020 2020 2020  olver.          
-000009b0: 2020 2020 2020 2020 2020 3c2f 6578 636c            </excl
-000009c0: 7564 6550 6163 6b61 6765 4e61 6d65 733e  udePackageNames>
-000009d0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
-000009e0: 203c 2f63 6f6e 6669 6775 7261 7469 6f6e   </configuration
-000009f0: 3e0a 2020 2020 2020 2020 2020 2020 3c2f  >.            </
-00000a00: 706c 7567 696e 3e0a 2020 2020 2020 2020  plugin>.        
-00000a10: 3c2f 706c 7567 696e 733e 0a20 2020 203c  </plugins>.    <
-00000a20: 2f72 6570 6f72 7469 6e67 3e0a 2020 2020  /reporting>.    
-00000a30: 3c64 6570 656e 6465 6e63 6965 733e 0a20  <dependencies>. 
-00000a40: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
-00000a50: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
-00000a60: 3c67 726f 7570 4964 3e6f 7267 2e6f 7367  <groupId>org.osg
-00000a70: 693c 2f67 726f 7570 4964 3e0a 2020 2020  i</groupId>.    
-00000a80: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
-00000a90: 7449 643e 6f72 672e 6f73 6769 2e61 6e6e  tId>org.osgi.ann
-00000aa0: 6f74 6174 696f 6e2e 7665 7273 696f 6e69  otation.versioni
-00000ab0: 6e67 3c2f 6172 7469 6661 6374 4964 3e0a  ng</artifactId>.
-00000ac0: 2020 2020 2020 2020 2020 2020 3c73 636f              <sco
-00000ad0: 7065 3e70 726f 7669 6465 643c 2f73 636f  pe>provided</sco
-00000ae0: 7065 3e0a 2020 2020 2020 2020 3c2f 6465  pe>.        </de
-00000af0: 7065 6e64 656e 6379 3e0a 2020 2020 2020  pendency>.      
-00000b00: 2020 3c64 6570 656e 6465 6e63 793e 0a20    <dependency>. 
-00000b10: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
-00000b20: 7049 643e 6f72 672e 6a65 7462 7261 696e  pId>org.jetbrain
-00000b30: 733c 2f67 726f 7570 4964 3e0a 2020 2020  s</groupId>.    
-00000b40: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
-00000b50: 7449 643e 616e 6e6f 7461 7469 6f6e 733c  tId>annotations<
-00000b60: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
-00000b70: 2020 2020 2020 2020 203c 7363 6f70 653e           <scope>
-00000b80: 7072 6f76 6964 6564 3c2f 7363 6f70 653e  provided</scope>
-00000b90: 0a20 2020 2020 2020 203c 2f64 6570 656e  .        </depen
-00000ba0: 6465 6e63 793e 0a20 2020 2020 2020 203c  dency>.        <
-00000bb0: 6465 7065 6e64 656e 6379 3e0a 2020 2020  dependency>.    
-00000bc0: 2020 2020 2020 2020 3c67 726f 7570 4964          <groupId
-00000bd0: 3e6a 6176 6178 2e73 6572 766c 6574 3c2f  >javax.servlet</
-00000be0: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
-00000bf0: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
-00000c00: 3e6a 6176 6178 2e73 6572 766c 6574 2d61  >javax.servlet-a
-00000c10: 7069 3c2f 6172 7469 6661 6374 4964 3e0a  pi</artifactId>.
-00000c20: 2020 2020 2020 2020 2020 2020 3c73 636f              <sco
-00000c30: 7065 3e70 726f 7669 6465 643c 2f73 636f  pe>provided</sco
-00000c40: 7065 3e0a 2020 2020 2020 2020 3c2f 6465  pe>.        </de
-00000c50: 7065 6e64 656e 6379 3e0a 0a20 2020 2020  pendency>..     
-00000c60: 2020 203c 6465 7065 6e64 656e 6379 3e0a     <dependency>.
-00000c70: 2020 2020 2020 2020 2020 2020 3c67 726f              <gro
-00000c80: 7570 4964 3e6f 7267 2e61 7061 6368 652e  upId>org.apache.
-00000c90: 736c 696e 673c 2f67 726f 7570 4964 3e0a  sling</groupId>.
-00000ca0: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
-00000cb0: 6966 6163 7449 643e 6f72 672e 6170 6163  ifactId>org.apac
-00000cc0: 6865 2e73 6c69 6e67 2e61 7069 3c2f 6172  he.sling.api</ar
-00000cd0: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
-00000ce0: 2020 2020 2020 3c73 636f 7065 3e70 726f        <scope>pro
-00000cf0: 7669 6465 643c 2f73 636f 7065 3e0a 2020  vided</scope>.  
-00000d00: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
-00000d10: 6379 3e0a 2020 2020 2020 2020 3c64 6570  cy>.        <dep
-00000d20: 656e 6465 6e63 793e 0a20 2020 2020 2020  endency>.       
-00000d30: 2020 2020 203c 6772 6f75 7049 643e 6f72       <groupId>or
-00000d40: 672e 6f73 6769 3c2f 6772 6f75 7049 643e  g.osgi</groupId>
-00000d50: 0a20 2020 2020 2020 2020 2020 203c 6172  .            <ar
-00000d60: 7469 6661 6374 4964 3e6f 7267 2e6f 7367  tifactId>org.osg
-00000d70: 692e 7365 7276 6963 652e 6576 656e 743c  i.service.event<
-00000d80: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
-00000d90: 2020 2020 2020 2020 203c 7363 6f70 653e           <scope>
-00000da0: 7072 6f76 6964 6564 3c2f 7363 6f70 653e  provided</scope>
-00000db0: 0a20 2020 2020 2020 203c 2f64 6570 656e  .        </depen
-00000dc0: 6465 6e63 793e 0a20 2020 2020 2020 203c  dency>.        <
-00000dd0: 6465 7065 6e64 656e 6379 3e0a 2020 2020  dependency>.    
-00000de0: 2020 2020 2020 2020 3c67 726f 7570 4964          <groupId
-00000df0: 3e6f 7267 2e6f 7367 693c 2f67 726f 7570  >org.osgi</group
-00000e00: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
-00000e10: 3c61 7274 6966 6163 7449 643e 6f72 672e  <artifactId>org.
-00000e20: 6f73 6769 2e75 7469 6c2e 636f 6e76 6572  osgi.util.conver
-00000e30: 7465 723c 2f61 7274 6966 6163 7449 643e  ter</artifactId>
-00000e40: 0a20 2020 2020 2020 2020 2020 203c 7363  .            <sc
-00000e50: 6f70 653e 7072 6f76 6964 6564 3c2f 7363  ope>provided</sc
-00000e60: 6f70 653e 0a20 2020 2020 2020 203c 2f64  ope>.        </d
-00000e70: 6570 656e 6465 6e63 793e 0a20 2020 2020  ependency>.     
-00000e80: 2020 203c 6465 7065 6e64 656e 6379 3e0a     <dependency>.
-00000e90: 2020 2020 2020 2020 2020 2020 3c67 726f              <gro
-00000ea0: 7570 4964 3e6f 7267 2e6f 7367 693c 2f67  upId>org.osgi</g
-00000eb0: 726f 7570 4964 3e0a 2020 2020 2020 2020  roupId>.        
-00000ec0: 2020 2020 3c61 7274 6966 6163 7449 643e      <artifactId>
-00000ed0: 6f72 672e 6f73 6769 2e75 7469 6c2e 6675  org.osgi.util.fu
-00000ee0: 6e63 7469 6f6e 3c2f 6172 7469 6661 6374  nction</artifact
-00000ef0: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
-00000f00: 3c73 636f 7065 3e70 726f 7669 6465 643c  <scope>provided<
-00000f10: 2f73 636f 7065 3e0a 2020 2020 2020 2020  /scope>.        
-00000f20: 3c2f 6465 7065 6e64 656e 6379 3e0a 2020  </dependency>.  
-00000f30: 2020 2020 2020 3c64 6570 656e 6465 6e63        <dependenc
-00000f40: 793e 0a20 2020 2020 2020 2020 2020 203c  y>.            <
-00000f50: 6772 6f75 7049 643e 636f 6d6d 6f6e 732d  groupId>commons-
-00000f60: 696f 3c2f 6772 6f75 7049 643e 0a20 2020  io</groupId>.   
-00000f70: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
-00000f80: 6374 4964 3e63 6f6d 6d6f 6e73 2d69 6f3c  ctId>commons-io<
-00000f90: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
-00000fa0: 2020 2020 2020 2020 203c 7363 6f70 653e           <scope>
-00000fb0: 636f 6d70 696c 653c 2f73 636f 7065 3e0a  compile</scope>.
-00000fc0: 2020 2020 2020 2020 3c2f 6465 7065 6e64          </depend
-00000fd0: 656e 6379 3e0a 2020 2020 2020 2020 3c64  ency>.        <d
-00000fe0: 6570 656e 6465 6e63 793e 0a20 2020 2020  ependency>.     
-00000ff0: 2020 2020 2020 203c 6772 6f75 7049 643e         <groupId>
-00001000: 6f72 672e 6170 6163 6865 2e6a 6163 6b72  org.apache.jackr
-00001010: 6162 6269 743c 2f67 726f 7570 4964 3e0a  abbit</groupId>.
-00001020: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
-00001030: 6966 6163 7449 643e 6a61 636b 7261 6262  ifactId>jackrabb
-00001040: 6974 2d6a 6372 2d63 6f6d 6d6f 6e73 3c2f  it-jcr-commons</
-00001050: 6172 7469 6661 6374 4964 3e0a 2020 2020  artifactId>.    
-00001060: 2020 2020 2020 2020 3c73 636f 7065 3e63          <scope>c
-00001070: 6f6d 7069 6c65 3c2f 7363 6f70 653e 0a20  ompile</scope>. 
-00001080: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
-00001090: 6e63 793e 0a0a 2020 2020 2020 2020 3c21  ncy>..        <!
-000010a0: 2d2d 2074 6573 7469 6e67 202d 2d3e 0a20  -- testing -->. 
-000010b0: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
-000010c0: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
-000010d0: 3c67 726f 7570 4964 3e6a 756e 6974 3c2f  <groupId>junit</
-000010e0: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
-000010f0: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
-00001100: 3e6a 756e 6974 3c2f 6172 7469 6661 6374  >junit</artifact
-00001110: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
-00001120: 3c73 636f 7065 3e74 6573 743c 2f73 636f  <scope>test</sco
-00001130: 7065 3e0a 2020 2020 2020 2020 3c2f 6465  pe>.        </de
-00001140: 7065 6e64 656e 6379 3e0a 2020 2020 2020  pendency>.      
-00001150: 2020 3c64 6570 656e 6465 6e63 793e 0a20    <dependency>. 
-00001160: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
-00001170: 7049 643e 636f 6d2e 676f 6f67 6c65 2e67  pId>com.google.g
-00001180: 7561 7661 3c2f 6772 6f75 7049 643e 0a20  uava</groupId>. 
-00001190: 2020 2020 2020 2020 2020 203c 6172 7469             <arti
-000011a0: 6661 6374 4964 3e67 7561 7661 3c2f 6172  factId>guava</ar
-000011b0: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
-000011c0: 2020 2020 2020 3c76 6572 7369 6f6e 3e31        <version>1
-000011d0: 352e 303c 2f76 6572 7369 6f6e 3e0a 2020  5.0</version>.  
-000011e0: 2020 2020 2020 2020 2020 3c73 636f 7065            <scope
-000011f0: 3e74 6573 743c 2f73 636f 7065 3e0a 2020  >test</scope>.  
-00001200: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
-00001210: 6379 3e0a 2020 2020 2020 2020 3c64 6570  cy>.        <dep
-00001220: 656e 6465 6e63 793e 0a20 2020 2020 2020  endency>.       
-00001230: 2020 2020 203c 6772 6f75 7049 643e 6f72       <groupId>or
-00001240: 672e 6d6f 636b 6974 6f3c 2f67 726f 7570  g.mockito</group
-00001250: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
-00001260: 3c61 7274 6966 6163 7449 643e 6d6f 636b  <artifactId>mock
-00001270: 6974 6f2d 636f 7265 3c2f 6172 7469 6661  ito-core</artifa
-00001280: 6374 4964 3e0a 2020 2020 2020 2020 2020  ctId>.          
-00001290: 2020 3c76 6572 7369 6f6e 3e34 2e35 2e31    <version>4.5.1
-000012a0: 3c2f 7665 7273 696f 6e3e 0a20 2020 2020  </version>.     
-000012b0: 2020 2020 2020 203c 7363 6f70 653e 7465         <scope>te
-000012c0: 7374 3c2f 7363 6f70 653e 0a20 2020 2020  st</scope>.     
-000012d0: 2020 203c 2f64 6570 656e 6465 6e63 793e     </dependency>
-000012e0: 0a20 2020 2020 2020 203c 6465 7065 6e64  .        <depend
-000012f0: 656e 6379 3e0a 2020 2020 2020 2020 2020  ency>.          
-00001300: 2020 3c67 726f 7570 4964 3e6f 7267 2e61    <groupId>org.a
-00001310: 7061 6368 652e 636f 6d6d 6f6e 733c 2f67  pache.commons</g
-00001320: 726f 7570 4964 3e0a 2020 2020 2020 2020  roupId>.        
-00001330: 2020 2020 3c61 7274 6966 6163 7449 643e      <artifactId>
-00001340: 636f 6d6d 6f6e 732d 6c61 6e67 333c 2f61  commons-lang3</a
-00001350: 7274 6966 6163 7449 643e 0a20 2020 2020  rtifactId>.     
-00001360: 2020 2020 2020 203c 7665 7273 696f 6e3e         <version>
-00001370: 332e 393c 2f76 6572 7369 6f6e 3e0a 2020  3.9</version>.  
-00001380: 2020 2020 2020 2020 2020 3c73 636f 7065            <scope
-00001390: 3e74 6573 743c 2f73 636f 7065 3e0a 2020  >test</scope>.  
-000013a0: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
-000013b0: 6379 3e0a 2020 2020 3c2f 6465 7065 6e64  cy>.    </depend
-000013c0: 656e 6369 6573 3e0a 0a20 2020 203c 6465  encies>..    <de
-000013d0: 7065 6e64 656e 6379 4d61 6e61 6765 6d65  pendencyManageme
-000013e0: 6e74 3e0a 2020 2020 2020 2020 3c64 6570  nt>.        <dep
-000013f0: 656e 6465 6e63 6965 733e 0a20 2020 2020  endencies>.     
-00001400: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
-00001410: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
-00001420: 2020 2020 3c67 726f 7570 4964 3e6f 7267      <groupId>org
-00001430: 2e61 7061 6368 652e 736c 696e 673c 2f67  .apache.sling</g
-00001440: 726f 7570 4964 3e0a 2020 2020 2020 2020  roupId>.        
-00001450: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
-00001460: 7449 643e 6f72 672e 6170 6163 6865 2e73  tId>org.apache.s
-00001470: 6c69 6e67 2e61 7069 3c2f 6172 7469 6661  ling.api</artifa
-00001480: 6374 4964 3e0a 2020 2020 2020 2020 2020  ctId>.          
-00001490: 2020 2020 2020 3c76 6572 7369 6f6e 3e32        <version>2
-000014a0: 2e32 322e 303c 2f76 6572 7369 6f6e 3e0a  .22.0</version>.
-000014b0: 2020 2020 2020 2020 2020 2020 3c2f 6465              </de
-000014c0: 7065 6e64 656e 6379 3e0a 2020 2020 2020  pendency>.      
-000014d0: 2020 2020 2020 3c64 6570 656e 6465 6e63        <dependenc
-000014e0: 793e 0a20 2020 2020 2020 2020 2020 2020  y>.             
-000014f0: 2020 203c 6772 6f75 7049 643e 6f72 672e     <groupId>org.
-00001500: 6f73 6769 3c2f 6772 6f75 7049 643e 0a20  osgi</groupId>. 
-00001510: 2020 2020 2020 2020 2020 2020 2020 203c                 <
-00001520: 6172 7469 6661 6374 4964 3e6f 7267 2e6f  artifactId>org.o
-00001530: 7367 692e 7365 7276 6963 652e 6576 656e  sgi.service.even
-00001540: 743c 2f61 7274 6966 6163 7449 643e 0a20  t</artifactId>. 
-00001550: 2020 2020 2020 2020 2020 2020 2020 203c                 <
-00001560: 7665 7273 696f 6e3e 312e 342e 303c 2f76  version>1.4.0</v
-00001570: 6572 7369 6f6e 3e0a 2020 2020 2020 2020  ersion>.        
-00001580: 2020 2020 3c2f 6465 7065 6e64 656e 6379      </dependency
-00001590: 3e0a 2020 2020 2020 2020 2020 2020 3c64  >.            <d
-000015a0: 6570 656e 6465 6e63 793e 0a20 2020 2020  ependency>.     
-000015b0: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
-000015c0: 7049 643e 636f 6d6d 6f6e 732d 696f 3c2f  pId>commons-io</
-000015d0: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
-000015e0: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
-000015f0: 6374 4964 3e63 6f6d 6d6f 6e73 2d69 6f3c  ctId>commons-io<
-00001600: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
-00001610: 2020 2020 2020 2020 2020 2020 203c 7665               <ve
-00001620: 7273 696f 6e3e 322e 363c 2f76 6572 7369  rsion>2.6</versi
-00001630: 6f6e 3e0a 2020 2020 2020 2020 2020 2020  on>.            
-00001640: 3c2f 6465 7065 6e64 656e 6379 3e0a 2020  </dependency>.  
-00001650: 2020 2020 2020 2020 2020 3c64 6570 656e            <depen
-00001660: 6465 6e63 793e 0a20 2020 2020 2020 2020  dency>.         
-00001670: 2020 2020 2020 203c 6772 6f75 7049 643e         <groupId>
-00001680: 6f72 672e 6170 6163 6865 2e6a 6163 6b72  org.apache.jackr
-00001690: 6162 6269 743c 2f67 726f 7570 4964 3e0a  abbit</groupId>.
-000016a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
-000016b0: 3c61 7274 6966 6163 7449 643e 6a61 636b  <artifactId>jack
-000016c0: 7261 6262 6974 2d6a 6372 2d63 6f6d 6d6f  rabbit-jcr-commo
-000016d0: 6e73 3c2f 6172 7469 6661 6374 4964 3e0a  ns</artifactId>.
-000016e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
-000016f0: 3c76 6572 7369 6f6e 3e32 2e32 302e 313c  <version>2.20.1<
-00001700: 2f76 6572 7369 6f6e 3e0a 2020 2020 2020  /version>.      
-00001710: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
-00001720: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
-00001730: 3c64 6570 656e 6465 6e63 793e 0a20 2020  <dependency>.   
-00001740: 2020 2020 2020 2020 2020 2020 203c 6772               <gr
-00001750: 6f75 7049 643e 6f72 672e 6f73 6769 3c2f  oupId>org.osgi</
-00001760: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
-00001770: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
-00001780: 6374 4964 3e6f 7267 2e6f 7367 692e 7574  ctId>org.osgi.ut
-00001790: 696c 2e63 6f6e 7665 7274 6572 3c2f 6172  il.converter</ar
-000017a0: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
-000017b0: 2020 2020 2020 2020 2020 3c76 6572 7369            <versi
-000017c0: 6f6e 3e31 2e30 2e30 3c2f 7665 7273 696f  on>1.0.0</versio
-000017d0: 6e3e 0a20 2020 2020 2020 2020 2020 203c  n>.            <
-000017e0: 2f64 6570 656e 6465 6e63 793e 0a20 2020  /dependency>.   
-000017f0: 2020 2020 2020 2020 203c 6465 7065 6e64           <depend
-00001800: 656e 6379 3e0a 2020 2020 2020 2020 2020  ency>.          
-00001810: 2020 2020 2020 3c67 726f 7570 4964 3e6f        <groupId>o
-00001820: 7267 2e6f 7367 693c 2f67 726f 7570 4964  rg.osgi</groupId
-00001830: 3e0a 2020 2020 2020 2020 2020 2020 2020  >.              
-00001840: 2020 3c61 7274 6966 6163 7449 643e 6f72    <artifactId>or
-00001850: 672e 6f73 6769 2e75 7469 6c2e 6675 6e63  g.osgi.util.func
-00001860: 7469 6f6e 3c2f 6172 7469 6661 6374 4964  tion</artifactId
-00001870: 3e0a 2020 2020 2020 2020 2020 2020 2020  >.              
-00001880: 2020 3c76 6572 7369 6f6e 3e31 2e31 2e30    <version>1.1.0
-00001890: 3c2f 7665 7273 696f 6e3e 0a20 2020 2020  </version>.     
-000018a0: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
-000018b0: 6e63 793e 0a20 2020 2020 2020 203c 2f64  ncy>.        </d
-000018c0: 6570 656e 6465 6e63 6965 733e 0a20 2020  ependencies>.   
-000018d0: 203c 2f64 6570 656e 6465 6e63 794d 616e   </dependencyMan
-000018e0: 6167 656d 656e 743e 0a0a 2020 203c 7072  agement>..   <pr
-000018f0: 6f66 696c 6573 3e0a 2020 2020 2020 2020  ofiles>.        
-00001900: 3c70 726f 6669 6c65 3e0a 2020 2020 2020  <profile>.      
-00001910: 2020 2020 2020 3c69 643e 6c61 7465 7374        <id>latest
-00001920: 2d64 6570 656e 6465 6e63 792d 7665 7273  -dependency-vers
-00001930: 696f 6e73 3c2f 6964 3e0a 2020 2020 2020  ions</id>.      
-00001940: 2020 2020 2020 3c61 6374 6976 6174 696f        <activatio
-00001950: 6e3e 0a20 2020 2020 2020 2020 2020 2020  n>.             
-00001960: 2020 203c 6163 7469 7665 4279 4465 6661     <activeByDefa
-00001970: 756c 743e 6661 6c73 653c 2f61 6374 6976  ult>false</activ
-00001980: 6542 7944 6566 6175 6c74 3e0a 2020 2020  eByDefault>.    
-00001990: 2020 2020 2020 2020 3c2f 6163 7469 7661          </activa
-000019a0: 7469 6f6e 3e0a 2020 2020 2020 2020 2020  tion>.          
-000019b0: 2020 3c64 6570 656e 6465 6e63 794d 616e    <dependencyMan
-000019c0: 6167 656d 656e 743e 0a20 2020 2020 2020  agement>.       
-000019d0: 2020 2020 2020 2020 203c 6465 7065 6e64           <depend
-000019e0: 656e 6369 6573 3e0a 2020 2020 2020 2020  encies>.        
-000019f0: 2020 2020 2020 2020 2020 2020 3c64 6570              <dep
-00001a00: 656e 6465 6e63 793e 0a20 2020 2020 2020  endency>.       
-00001a10: 2020 2020 2020 2020 2020 2020 2020 2020                  
-00001a20: 203c 6772 6f75 7049 643e 6f72 672e 6170   <groupId>org.ap
-00001a30: 6163 6865 2e73 6c69 6e67 3c2f 6772 6f75  ache.sling</grou
-00001a40: 7049 643e 0a20 2020 2020 2020 2020 2020  pId>.           
-00001a50: 2020 2020 2020 2020 2020 2020 203c 6172               <ar
-00001a60: 7469 6661 6374 4964 3e6f 7267 2e61 7061  tifactId>org.apa
-00001a70: 6368 652e 736c 696e 672e 6170 693c 2f61  che.sling.api</a
-00001a80: 7274 6966 6163 7449 643e 0a20 2020 2020  rtifactId>.     
-00001a90: 2020 2020 2020 2020 2020 2020 2020 2020                  
-00001aa0: 2020 203c 7665 7273 696f 6e3e 322e 3235     <version>2.25
-00001ab0: 2e30 3c2f 7665 7273 696f 6e3e 0a20 2020  .0</version>.   
+00000020: 4f2d 3838 3539 2d31 223f 3e0d 0a3c 212d  O-8859-1"?>..<!-
+00000030: 2d0d 0a20 204c 6963 656e 7365 6420 746f  -..  Licensed to
+00000040: 2074 6865 2041 7061 6368 6520 536f 6674   the Apache Soft
+00000050: 7761 7265 2046 6f75 6e64 6174 696f 6e20  ware Foundation 
+00000060: 2841 5346 2920 756e 6465 7220 6f6e 650d  (ASF) under one.
+00000070: 0a20 206f 7220 6d6f 7265 2063 6f6e 7472  .  or more contr
+00000080: 6962 7574 6f72 206c 6963 656e 7365 2061  ibutor license a
+00000090: 6772 6565 6d65 6e74 732e 2020 5365 6520  greements.  See 
+000000a0: 7468 6520 4e4f 5449 4345 2066 696c 650d  the NOTICE file.
+000000b0: 0a20 2064 6973 7472 6962 7574 6564 2077  .  distributed w
+000000c0: 6974 6820 7468 6973 2077 6f72 6b20 666f  ith this work fo
+000000d0: 7220 6164 6469 7469 6f6e 616c 2069 6e66  r additional inf
+000000e0: 6f72 6d61 7469 6f6e 0d0a 2020 7265 6761  ormation..  rega
+000000f0: 7264 696e 6720 636f 7079 7269 6768 7420  rding copyright 
+00000100: 6f77 6e65 7273 6869 702e 2020 5468 6520  ownership.  The 
+00000110: 4153 4620 6c69 6365 6e73 6573 2074 6869  ASF licenses thi
+00000120: 7320 6669 6c65 0d0a 2020 746f 2079 6f75  s file..  to you
+00000130: 2075 6e64 6572 2074 6865 2041 7061 6368   under the Apach
+00000140: 6520 4c69 6365 6e73 652c 2056 6572 7369  e License, Versi
+00000150: 6f6e 2032 2e30 2028 7468 650d 0a20 2022  on 2.0 (the..  "
+00000160: 4c69 6365 6e73 6522 293b 2079 6f75 206d  License"); you m
+00000170: 6179 206e 6f74 2075 7365 2074 6869 7320  ay not use this 
+00000180: 6669 6c65 2065 7863 6570 7420 696e 2063  file except in c
+00000190: 6f6d 706c 6961 6e63 650d 0a20 2077 6974  ompliance..  wit
+000001a0: 6820 7468 6520 4c69 6365 6e73 652e 2020  h the License.  
+000001b0: 596f 7520 6d61 7920 6f62 7461 696e 2061  You may obtain a
+000001c0: 2063 6f70 7920 6f66 2074 6865 204c 6963   copy of the Lic
+000001d0: 656e 7365 2061 740d 0a0d 0a20 2020 6874  ense at....   ht
+000001e0: 7470 3a2f 2f77 7777 2e61 7061 6368 652e  tp://www.apache.
+000001f0: 6f72 672f 6c69 6365 6e73 6573 2f4c 4943  org/licenses/LIC
+00000200: 454e 5345 2d32 2e30 0d0a 0d0a 2020 556e  ENSE-2.0....  Un
+00000210: 6c65 7373 2072 6571 7569 7265 6420 6279  less required by
+00000220: 2061 7070 6c69 6361 626c 6520 6c61 7720   applicable law 
+00000230: 6f72 2061 6772 6565 6420 746f 2069 6e20  or agreed to in 
+00000240: 7772 6974 696e 672c 0d0a 2020 736f 6674  writing,..  soft
+00000250: 7761 7265 2064 6973 7472 6962 7574 6564  ware distributed
+00000260: 2075 6e64 6572 2074 6865 204c 6963 656e   under the Licen
+00000270: 7365 2069 7320 6469 7374 7269 6275 7465  se is distribute
+00000280: 6420 6f6e 2061 6e0d 0a20 2022 4153 2049  d on an..  "AS I
+00000290: 5322 2042 4153 4953 2c20 5749 5448 4f55  S" BASIS, WITHOU
+000002a0: 5420 5741 5252 414e 5449 4553 204f 5220  T WARRANTIES OR 
+000002b0: 434f 4e44 4954 494f 4e53 204f 4620 414e  CONDITIONS OF AN
+000002c0: 590d 0a20 204b 494e 442c 2065 6974 6865  Y..  KIND, eithe
+000002d0: 7220 6578 7072 6573 7320 6f72 2069 6d70  r express or imp
+000002e0: 6c69 6564 2e20 2053 6565 2074 6865 204c  lied.  See the L
+000002f0: 6963 656e 7365 2066 6f72 2074 6865 0d0a  icense for the..
+00000300: 2020 7370 6563 6966 6963 206c 616e 6775    specific langu
+00000310: 6167 6520 676f 7665 726e 696e 6720 7065  age governing pe
+00000320: 726d 6973 7369 6f6e 7320 616e 6420 6c69  rmissions and li
+00000330: 6d69 7461 7469 6f6e 730d 0a20 2075 6e64  mitations..  und
+00000340: 6572 2074 6865 204c 6963 656e 7365 2e0d  er the License..
+00000350: 0a2d 2d3e 0d0a 3c70 726f 6a65 6374 2078  .-->..<project x
+00000360: 6d6c 6e73 3d22 6874 7470 3a2f 2f6d 6176  mlns="http://mav
+00000370: 656e 2e61 7061 6368 652e 6f72 672f 504f  en.apache.org/PO
+00000380: 4d2f 342e 302e 3022 2078 6d6c 6e73 3a78  M/4.0.0" xmlns:x
+00000390: 7369 3d22 6874 7470 3a2f 2f77 7777 2e77  si="http://www.w
+000003a0: 332e 6f72 672f 3230 3031 2f58 4d4c 5363  3.org/2001/XMLSc
+000003b0: 6865 6d61 2d69 6e73 7461 6e63 6522 2078  hema-instance" x
+000003c0: 7369 3a73 6368 656d 614c 6f63 6174 696f  si:schemaLocatio
+000003d0: 6e3d 2268 7474 703a 2f2f 6d61 7665 6e2e  n="http://maven.
+000003e0: 6170 6163 6865 2e6f 7267 2f50 4f4d 2f34  apache.org/POM/4
+000003f0: 2e30 2e30 2068 7474 703a 2f2f 6d61 7665  .0.0 http://mave
+00000400: 6e2e 6170 6163 6865 2e6f 7267 2f6d 6176  n.apache.org/mav
+00000410: 656e 2d76 345f 305f 302e 7873 6422 3e0d  en-v4_0_0.xsd">.
+00000420: 0a0d 0a20 2020 203c 6d6f 6465 6c56 6572  ...    <modelVer
+00000430: 7369 6f6e 3e34 2e30 2e30 3c2f 6d6f 6465  sion>4.0.0</mode
+00000440: 6c56 6572 7369 6f6e 3e0d 0a20 2020 203c  lVersion>..    <
+00000450: 7061 7265 6e74 3e0d 0a20 2020 2020 2020  parent>..       
+00000460: 203c 6772 6f75 7049 643e 6f72 672e 6170   <groupId>org.ap
+00000470: 6163 6865 2e73 6c69 6e67 3c2f 6772 6f75  ache.sling</grou
+00000480: 7049 643e 0d0a 2020 2020 2020 2020 3c61  pId>..        <a
+00000490: 7274 6966 6163 7449 643e 736c 696e 672d  rtifactId>sling-
+000004a0: 6275 6e64 6c65 2d70 6172 656e 743c 2f61  bundle-parent</a
+000004b0: 7274 6966 6163 7449 643e 0d0a 2020 2020  rtifactId>..    
+000004c0: 2020 2020 3c76 6572 7369 6f6e 3e34 373c      <version>47<
+000004d0: 2f76 6572 7369 6f6e 3e0d 0a20 2020 2020  /version>..     
+000004e0: 2020 203c 7265 6c61 7469 7665 5061 7468     <relativePath
+000004f0: 202f 3e0d 0a20 2020 203c 2f70 6172 656e   />..    </paren
+00000500: 743e 0d0a 0d0a 2020 2020 3c61 7274 6966  t>....    <artif
+00000510: 6163 7449 643e 6f72 672e 6170 6163 6865  actId>org.apache
+00000520: 2e73 6c69 6e67 2e74 6573 7469 6e67 2e72  .sling.testing.r
+00000530: 6573 6f75 7263 6572 6573 6f6c 7665 722d  esourceresolver-
+00000540: 6d6f 636b 3c2f 6172 7469 6661 6374 4964  mock</artifactId
+00000550: 3e0d 0a20 2020 203c 7665 7273 696f 6e3e  >..    <version>
+00000560: 312e 332e 303c 2f76 6572 7369 6f6e 3e0d  1.3.0</version>.
+00000570: 0a0d 0a20 2020 203c 6e61 6d65 3e41 7061  ...    <name>Apa
+00000580: 6368 6520 536c 696e 6720 5465 7374 696e  che Sling Testin
+00000590: 6720 5265 736f 7572 6365 2052 6573 6f6c  g Resource Resol
+000005a0: 7665 7220 4d6f 636b 3c2f 6e61 6d65 3e0d  ver Mock</name>.
+000005b0: 0a20 2020 203c 6465 7363 7269 7074 696f  .    <descriptio
+000005c0: 6e3e 0d0a 2020 2020 2020 2020 4d6f 636b  n>..        Mock
+000005d0: 2066 6f72 2074 6865 2072 6573 6f75 7263   for the resourc
+000005e0: 6520 7265 736f 6c76 6572 202f 2066 6163  e resolver / fac
+000005f0: 746f 7279 2066 6f72 2065 6173 6965 7220  tory for easier 
+00000600: 7465 7374 696e 672e 0d0a 2020 2020 3c2f  testing...    </
+00000610: 6465 7363 7269 7074 696f 6e3e 0d0a 0d0a  description>....
+00000620: 2020 2020 3c73 636d 3e0d 0a20 2020 2020      <scm>..     
+00000630: 2020 203c 636f 6e6e 6563 7469 6f6e 3e73     <connection>s
+00000640: 636d 3a67 6974 3a68 7474 7073 3a2f 2f67  cm:git:https://g
+00000650: 6974 626f 782e 6170 6163 6865 2e6f 7267  itbox.apache.org
+00000660: 2f72 6570 6f73 2f61 7366 2f73 6c69 6e67  /repos/asf/sling
+00000670: 2d6f 7267 2d61 7061 6368 652d 736c 696e  -org-apache-slin
+00000680: 672d 7465 7374 696e 672d 7265 736f 7572  g-testing-resour
+00000690: 6365 7265 736f 6c76 6572 2d6d 6f63 6b2e  ceresolver-mock.
+000006a0: 6769 743c 2f63 6f6e 6e65 6374 696f 6e3e  git</connection>
+000006b0: 0d0a 2020 2020 2020 2020 3c64 6576 656c  ..        <devel
+000006c0: 6f70 6572 436f 6e6e 6563 7469 6f6e 3e73  operConnection>s
+000006d0: 636d 3a67 6974 3a68 7474 7073 3a2f 2f67  cm:git:https://g
+000006e0: 6974 626f 782e 6170 6163 6865 2e6f 7267  itbox.apache.org
+000006f0: 2f72 6570 6f73 2f61 7366 2f73 6c69 6e67  /repos/asf/sling
+00000700: 2d6f 7267 2d61 7061 6368 652d 736c 696e  -org-apache-slin
+00000710: 672d 7465 7374 696e 672d 7265 736f 7572  g-testing-resour
+00000720: 6365 7265 736f 6c76 6572 2d6d 6f63 6b2e  ceresolver-mock.
+00000730: 6769 743c 2f64 6576 656c 6f70 6572 436f  git</developerCo
+00000740: 6e6e 6563 7469 6f6e 3e0d 0a20 2020 2020  nnection>..     
+00000750: 2020 203c 7572 6c3e 6874 7470 733a 2f2f     <url>https://
+00000760: 6769 7462 6f78 2e61 7061 6368 652e 6f72  gitbox.apache.or
+00000770: 672f 7265 706f 732f 6173 663f 703d 736c  g/repos/asf?p=sl
+00000780: 696e 672d 6f72 672d 6170 6163 6865 2d73  ing-org-apache-s
+00000790: 6c69 6e67 2d74 6573 7469 6e67 2d72 6573  ling-testing-res
+000007a0: 6f75 7263 6572 6573 6f6c 7665 722d 6d6f  ourceresolver-mo
+000007b0: 636b 2e67 6974 3c2f 7572 6c3e 0d0a 2020  ck.git</url>..  
+000007c0: 2020 2020 2020 3c74 6167 3e6f 7267 2e61        <tag>org.a
+000007d0: 7061 6368 652e 736c 696e 672e 7465 7374  pache.sling.test
+000007e0: 696e 672e 7265 736f 7572 6365 7265 736f  ing.resourcereso
+000007f0: 6c76 6572 2d6d 6f63 6b2d 312e 332e 303c  lver-mock-1.3.0<
+00000800: 2f74 6167 3e0d 0a20 2020 203c 2f73 636d  /tag>..    </scm
+00000810: 3e0d 0a0d 0a20 2020 203c 7072 6f70 6572  >....    <proper
+00000820: 7469 6573 3e0d 0a20 2020 2020 2020 203c  ties>..        <
+00000830: 7072 6f6a 6563 742e 6275 696c 642e 6f75  project.build.ou
+00000840: 7470 7574 5469 6d65 7374 616d 703e 3230  tputTimestamp>20
+00000850: 3232 2d30 352d 3035 5431 363a 3231 3a32  22-05-05T16:21:2
+00000860: 355a 3c2f 7072 6f6a 6563 742e 6275 696c  5Z</project.buil
+00000870: 642e 6f75 7470 7574 5469 6d65 7374 616d  d.outputTimestam
+00000880: 703e 0d0a 2020 2020 3c2f 7072 6f70 6572  p>..    </proper
+00000890: 7469 6573 3e0d 0a0d 0a20 2020 203c 7265  ties>....    <re
+000008a0: 706f 7274 696e 673e 0d0a 2020 2020 2020  porting>..      
+000008b0: 2020 3c70 6c75 6769 6e73 3e0d 0a20 2020    <plugins>..   
+000008c0: 2020 2020 2020 2020 203c 706c 7567 696e           <plugin
+000008d0: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
+000008e0: 2020 203c 6772 6f75 7049 643e 6f72 672e     <groupId>org.
+000008f0: 6170 6163 6865 2e6d 6176 656e 2e70 6c75  apache.maven.plu
+00000900: 6769 6e73 3c2f 6772 6f75 7049 643e 0d0a  gins</groupId>..
+00000910: 2020 2020 2020 2020 2020 2020 2020 2020                  
+00000920: 3c61 7274 6966 6163 7449 643e 6d61 7665  <artifactId>mave
+00000930: 6e2d 6a61 7661 646f 632d 706c 7567 696e  n-javadoc-plugin
+00000940: 3c2f 6172 7469 6661 6374 4964 3e0d 0a20  </artifactId>.. 
+00000950: 2020 2020 2020 2020 2020 2020 2020 203c                 <
+00000960: 636f 6e66 6967 7572 6174 696f 6e3e 0d0a  configuration>..
+00000970: 2020 2020 2020 2020 2020 2020 2020 2020                  
+00000980: 2020 2020 3c65 7863 6c75 6465 5061 636b      <excludePack
+00000990: 6167 654e 616d 6573 3e0d 0a20 2020 2020  ageNames>..     
+000009a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
+000009b0: 2020 206f 7267 2e61 7061 6368 652e 736c     org.apache.sl
+000009c0: 696e 672e 7465 7374 696e 672e 7265 736f  ing.testing.reso
+000009d0: 7572 6365 7265 736f 6c76 6572 0d0a 2020  urceresolver..  
+000009e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
+000009f0: 2020 3c2f 6578 636c 7564 6550 6163 6b61    </excludePacka
+00000a00: 6765 4e61 6d65 733e 0d0a 2020 2020 2020  geNames>..      
+00000a10: 2020 2020 2020 2020 2020 3c2f 636f 6e66            </conf
+00000a20: 6967 7572 6174 696f 6e3e 0d0a 2020 2020  iguration>..    
+00000a30: 2020 2020 2020 2020 3c2f 706c 7567 696e          </plugin
+00000a40: 3e0d 0a20 2020 2020 2020 203c 2f70 6c75  >..        </plu
+00000a50: 6769 6e73 3e0d 0a20 2020 203c 2f72 6570  gins>..    </rep
+00000a60: 6f72 7469 6e67 3e0d 0a20 2020 203c 6465  orting>..    <de
+00000a70: 7065 6e64 656e 6369 6573 3e0d 0a20 2020  pendencies>..   
+00000a80: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
+00000a90: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
+00000aa0: 6772 6f75 7049 643e 6f72 672e 6f73 6769  groupId>org.osgi
+00000ab0: 3c2f 6772 6f75 7049 643e 0d0a 2020 2020  </groupId>..    
+00000ac0: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
+00000ad0: 7449 643e 6f72 672e 6f73 6769 2e61 6e6e  tId>org.osgi.ann
+00000ae0: 6f74 6174 696f 6e2e 7665 7273 696f 6e69  otation.versioni
+00000af0: 6e67 3c2f 6172 7469 6661 6374 4964 3e0d  ng</artifactId>.
+00000b00: 0a20 2020 2020 2020 2020 2020 203c 7363  .            <sc
+00000b10: 6f70 653e 7072 6f76 6964 6564 3c2f 7363  ope>provided</sc
+00000b20: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
+00000b30: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
+00000b40: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
+00000b50: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
+00000b60: 6772 6f75 7049 643e 6f72 672e 6a65 7462  groupId>org.jetb
+00000b70: 7261 696e 733c 2f67 726f 7570 4964 3e0d  rains</groupId>.
+00000b80: 0a20 2020 2020 2020 2020 2020 203c 6172  .            <ar
+00000b90: 7469 6661 6374 4964 3e61 6e6e 6f74 6174  tifactId>annotat
+00000ba0: 696f 6e73 3c2f 6172 7469 6661 6374 4964  ions</artifactId
+00000bb0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
+00000bc0: 7363 6f70 653e 7072 6f76 6964 6564 3c2f  scope>provided</
+00000bd0: 7363 6f70 653e 0d0a 2020 2020 2020 2020  scope>..        
+00000be0: 3c2f 6465 7065 6e64 656e 6379 3e0d 0a20  </dependency>.. 
+00000bf0: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
+00000c00: 6379 3e0d 0a20 2020 2020 2020 2020 2020  cy>..           
+00000c10: 203c 6772 6f75 7049 643e 6a61 7661 782e   <groupId>javax.
+00000c20: 7365 7276 6c65 743c 2f67 726f 7570 4964  servlet</groupId
+00000c30: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
+00000c40: 6172 7469 6661 6374 4964 3e6a 6176 6178  artifactId>javax
+00000c50: 2e73 6572 766c 6574 2d61 7069 3c2f 6172  .servlet-api</ar
+00000c60: 7469 6661 6374 4964 3e0d 0a20 2020 2020  tifactId>..     
+00000c70: 2020 2020 2020 203c 7363 6f70 653e 7072         <scope>pr
+00000c80: 6f76 6964 6564 3c2f 7363 6f70 653e 0d0a  ovided</scope>..
+00000c90: 2020 2020 2020 2020 3c2f 6465 7065 6e64          </depend
+00000ca0: 656e 6379 3e0d 0a0d 0a20 2020 2020 2020  ency>....       
+00000cb0: 203c 6465 7065 6e64 656e 6379 3e0d 0a20   <dependency>.. 
+00000cc0: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
+00000cd0: 7049 643e 6f72 672e 6170 6163 6865 2e73  pId>org.apache.s
+00000ce0: 6c69 6e67 3c2f 6772 6f75 7049 643e 0d0a  ling</groupId>..
+00000cf0: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
+00000d00: 6966 6163 7449 643e 6f72 672e 6170 6163  ifactId>org.apac
+00000d10: 6865 2e73 6c69 6e67 2e61 7069 3c2f 6172  he.sling.api</ar
+00000d20: 7469 6661 6374 4964 3e0d 0a20 2020 2020  tifactId>..     
+00000d30: 2020 2020 2020 203c 7363 6f70 653e 7072         <scope>pr
+00000d40: 6f76 6964 6564 3c2f 7363 6f70 653e 0d0a  ovided</scope>..
+00000d50: 2020 2020 2020 2020 3c2f 6465 7065 6e64          </depend
+00000d60: 656e 6379 3e0d 0a20 2020 2020 2020 203c  ency>..        <
+00000d70: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
+00000d80: 2020 2020 2020 2020 203c 6772 6f75 7049           <groupI
+00000d90: 643e 6f72 672e 6f73 6769 3c2f 6772 6f75  d>org.osgi</grou
+00000da0: 7049 643e 0d0a 2020 2020 2020 2020 2020  pId>..          
+00000db0: 2020 3c61 7274 6966 6163 7449 643e 6f72    <artifactId>or
+00000dc0: 672e 6f73 6769 2e73 6572 7669 6365 2e65  g.osgi.service.e
+00000dd0: 7665 6e74 3c2f 6172 7469 6661 6374 4964  vent</artifactId
+00000de0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
+00000df0: 7363 6f70 653e 7072 6f76 6964 6564 3c2f  scope>provided</
+00000e00: 7363 6f70 653e 0d0a 2020 2020 2020 2020  scope>..        
+00000e10: 3c2f 6465 7065 6e64 656e 6379 3e0d 0a20  </dependency>.. 
+00000e20: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
+00000e30: 6379 3e0d 0a20 2020 2020 2020 2020 2020  cy>..           
+00000e40: 203c 6772 6f75 7049 643e 6f72 672e 6f73   <groupId>org.os
+00000e50: 6769 3c2f 6772 6f75 7049 643e 0d0a 2020  gi</groupId>..  
+00000e60: 2020 2020 2020 2020 2020 3c61 7274 6966            <artif
+00000e70: 6163 7449 643e 6f72 672e 6f73 6769 2e75  actId>org.osgi.u
+00000e80: 7469 6c2e 636f 6e76 6572 7465 723c 2f61  til.converter</a
+00000e90: 7274 6966 6163 7449 643e 0d0a 2020 2020  rtifactId>..    
+00000ea0: 2020 2020 2020 2020 3c73 636f 7065 3e70          <scope>p
+00000eb0: 726f 7669 6465 643c 2f73 636f 7065 3e0d  rovided</scope>.
+00000ec0: 0a20 2020 2020 2020 203c 2f64 6570 656e  .        </depen
+00000ed0: 6465 6e63 793e 0d0a 2020 2020 2020 2020  dency>..        
+00000ee0: 3c64 6570 656e 6465 6e63 793e 0d0a 2020  <dependency>..  
+00000ef0: 2020 2020 2020 2020 2020 3c67 726f 7570            <group
+00000f00: 4964 3e6f 7267 2e6f 7367 693c 2f67 726f  Id>org.osgi</gro
+00000f10: 7570 4964 3e0d 0a20 2020 2020 2020 2020  upId>..         
+00000f20: 2020 203c 6172 7469 6661 6374 4964 3e6f     <artifactId>o
+00000f30: 7267 2e6f 7367 692e 7574 696c 2e66 756e  rg.osgi.util.fun
+00000f40: 6374 696f 6e3c 2f61 7274 6966 6163 7449  ction</artifactI
+00000f50: 643e 0d0a 2020 2020 2020 2020 2020 2020  d>..            
+00000f60: 3c73 636f 7065 3e70 726f 7669 6465 643c  <scope>provided<
+00000f70: 2f73 636f 7065 3e0d 0a20 2020 2020 2020  /scope>..       
+00000f80: 203c 2f64 6570 656e 6465 6e63 793e 0d0a   </dependency>..
+00000f90: 2020 2020 2020 2020 3c64 6570 656e 6465          <depende
+00000fa0: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
+00000fb0: 2020 3c67 726f 7570 4964 3e63 6f6d 6d6f    <groupId>commo
+00000fc0: 6e73 2d69 6f3c 2f67 726f 7570 4964 3e0d  ns-io</groupId>.
+00000fd0: 0a20 2020 2020 2020 2020 2020 203c 6172  .            <ar
+00000fe0: 7469 6661 6374 4964 3e63 6f6d 6d6f 6e73  tifactId>commons
+00000ff0: 2d69 6f3c 2f61 7274 6966 6163 7449 643e  -io</artifactId>
+00001000: 0d0a 2020 2020 2020 2020 2020 2020 3c73  ..            <s
+00001010: 636f 7065 3e63 6f6d 7069 6c65 3c2f 7363  cope>compile</sc
+00001020: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
+00001030: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
+00001040: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
+00001050: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
+00001060: 6772 6f75 7049 643e 6f72 672e 6170 6163  groupId>org.apac
+00001070: 6865 2e6a 6163 6b72 6162 6269 743c 2f67  he.jackrabbit</g
+00001080: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
+00001090: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
+000010a0: 3e6a 6163 6b72 6162 6269 742d 6a63 722d  >jackrabbit-jcr-
+000010b0: 636f 6d6d 6f6e 733c 2f61 7274 6966 6163  commons</artifac
+000010c0: 7449 643e 0d0a 2020 2020 2020 2020 2020  tId>..          
+000010d0: 2020 3c73 636f 7065 3e63 6f6d 7069 6c65    <scope>compile
+000010e0: 3c2f 7363 6f70 653e 0d0a 2020 2020 2020  </scope>..      
+000010f0: 2020 3c2f 6465 7065 6e64 656e 6379 3e0d    </dependency>.
+00001100: 0a0d 0a20 2020 2020 2020 203c 212d 2d20  ...        <!-- 
+00001110: 7465 7374 696e 6720 2d2d 3e0d 0a20 2020  testing -->..   
+00001120: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
+00001130: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
+00001140: 6772 6f75 7049 643e 6a75 6e69 743c 2f67  groupId>junit</g
+00001150: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
+00001160: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
+00001170: 3e6a 756e 6974 3c2f 6172 7469 6661 6374  >junit</artifact
+00001180: 4964 3e0d 0a20 2020 2020 2020 2020 2020  Id>..           
+00001190: 203c 7363 6f70 653e 7465 7374 3c2f 7363   <scope>test</sc
+000011a0: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
+000011b0: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
+000011c0: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
+000011d0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
+000011e0: 6772 6f75 7049 643e 636f 6d2e 676f 6f67  groupId>com.goog
+000011f0: 6c65 2e67 7561 7661 3c2f 6772 6f75 7049  le.guava</groupI
+00001200: 643e 0d0a 2020 2020 2020 2020 2020 2020  d>..            
+00001210: 3c61 7274 6966 6163 7449 643e 6775 6176  <artifactId>guav
+00001220: 613c 2f61 7274 6966 6163 7449 643e 0d0a  a</artifactId>..
+00001230: 2020 2020 2020 2020 2020 2020 3c76 6572              <ver
+00001240: 7369 6f6e 3e31 352e 303c 2f76 6572 7369  sion>15.0</versi
+00001250: 6f6e 3e0d 0a20 2020 2020 2020 2020 2020  on>..           
+00001260: 203c 7363 6f70 653e 7465 7374 3c2f 7363   <scope>test</sc
+00001270: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
+00001280: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
+00001290: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
+000012a0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
+000012b0: 6772 6f75 7049 643e 6f72 672e 6d6f 636b  groupId>org.mock
+000012c0: 6974 6f3c 2f67 726f 7570 4964 3e0d 0a20  ito</groupId>.. 
+000012d0: 2020 2020 2020 2020 2020 203c 6172 7469             <arti
+000012e0: 6661 6374 4964 3e6d 6f63 6b69 746f 2d63  factId>mockito-c
+000012f0: 6f72 653c 2f61 7274 6966 6163 7449 643e  ore</artifactId>
+00001300: 0d0a 2020 2020 2020 2020 2020 2020 3c76  ..            <v
+00001310: 6572 7369 6f6e 3e34 2e35 2e31 3c2f 7665  ersion>4.5.1</ve
+00001320: 7273 696f 6e3e 0d0a 2020 2020 2020 2020  rsion>..        
+00001330: 2020 2020 3c73 636f 7065 3e74 6573 743c      <scope>test<
+00001340: 2f73 636f 7065 3e0d 0a20 2020 2020 2020  /scope>..       
+00001350: 203c 2f64 6570 656e 6465 6e63 793e 0d0a   </dependency>..
+00001360: 2020 2020 2020 2020 3c64 6570 656e 6465          <depende
+00001370: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
+00001380: 2020 3c67 726f 7570 4964 3e6f 7267 2e61    <groupId>org.a
+00001390: 7061 6368 652e 636f 6d6d 6f6e 733c 2f67  pache.commons</g
+000013a0: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
+000013b0: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
+000013c0: 3e63 6f6d 6d6f 6e73 2d6c 616e 6733 3c2f  >commons-lang3</
+000013d0: 6172 7469 6661 6374 4964 3e0d 0a20 2020  artifactId>..   
+000013e0: 2020 2020 2020 2020 203c 7665 7273 696f           <versio
+000013f0: 6e3e 332e 393c 2f76 6572 7369 6f6e 3e0d  n>3.9</version>.
+00001400: 0a20 2020 2020 2020 2020 2020 203c 7363  .            <sc
+00001410: 6f70 653e 7465 7374 3c2f 7363 6f70 653e  ope>test</scope>
+00001420: 0d0a 2020 2020 2020 2020 3c2f 6465 7065  ..        </depe
+00001430: 6e64 656e 6379 3e0d 0a20 2020 203c 2f64  ndency>..    </d
+00001440: 6570 656e 6465 6e63 6965 733e 0d0a 0d0a  ependencies>....
+00001450: 2020 2020 3c64 6570 656e 6465 6e63 794d      <dependencyM
+00001460: 616e 6167 656d 656e 743e 0d0a 2020 2020  anagement>..    
+00001470: 2020 2020 3c64 6570 656e 6465 6e63 6965      <dependencie
+00001480: 733e 0d0a 2020 2020 2020 2020 2020 2020  s>..            
+00001490: 3c64 6570 656e 6465 6e63 793e 0d0a 2020  <dependency>..  
+000014a0: 2020 2020 2020 2020 2020 2020 2020 3c67                <g
+000014b0: 726f 7570 4964 3e6f 7267 2e61 7061 6368  roupId>org.apach
+000014c0: 652e 736c 696e 673c 2f67 726f 7570 4964  e.sling</groupId
+000014d0: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
+000014e0: 2020 203c 6172 7469 6661 6374 4964 3e6f     <artifactId>o
+000014f0: 7267 2e61 7061 6368 652e 736c 696e 672e  rg.apache.sling.
+00001500: 6170 693c 2f61 7274 6966 6163 7449 643e  api</artifactId>
+00001510: 0d0a 2020 2020 2020 2020 2020 2020 2020  ..              
+00001520: 2020 3c76 6572 7369 6f6e 3e32 2e32 322e    <version>2.22.
+00001530: 303c 2f76 6572 7369 6f6e 3e0d 0a20 2020  0</version>..   
+00001540: 2020 2020 2020 2020 203c 2f64 6570 656e           </depen
+00001550: 6465 6e63 793e 0d0a 2020 2020 2020 2020  dency>..        
+00001560: 2020 2020 3c64 6570 656e 6465 6e63 793e      <dependency>
+00001570: 0d0a 2020 2020 2020 2020 2020 2020 2020  ..              
+00001580: 2020 3c67 726f 7570 4964 3e6f 7267 2e6f    <groupId>org.o
+00001590: 7367 693c 2f67 726f 7570 4964 3e0d 0a20  sgi</groupId>.. 
+000015a0: 2020 2020 2020 2020 2020 2020 2020 203c                 <
+000015b0: 6172 7469 6661 6374 4964 3e6f 7267 2e6f  artifactId>org.o
+000015c0: 7367 692e 7365 7276 6963 652e 6576 656e  sgi.service.even
+000015d0: 743c 2f61 7274 6966 6163 7449 643e 0d0a  t</artifactId>..
+000015e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
+000015f0: 3c76 6572 7369 6f6e 3e31 2e34 2e30 3c2f  <version>1.4.0</
+00001600: 7665 7273 696f 6e3e 0d0a 2020 2020 2020  version>..      
+00001610: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
+00001620: 6379 3e0d 0a20 2020 2020 2020 2020 2020  cy>..           
+00001630: 203c 6465 7065 6e64 656e 6379 3e0d 0a20   <dependency>.. 
+00001640: 2020 2020 2020 2020 2020 2020 2020 203c                 <
+00001650: 6772 6f75 7049 643e 636f 6d6d 6f6e 732d  groupId>commons-
+00001660: 696f 3c2f 6772 6f75 7049 643e 0d0a 2020  io</groupId>..  
+00001670: 2020 2020 2020 2020 2020 2020 2020 3c61                <a
+00001680: 7274 6966 6163 7449 643e 636f 6d6d 6f6e  rtifactId>common
+00001690: 732d 696f 3c2f 6172 7469 6661 6374 4964  s-io</artifactId
+000016a0: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
+000016b0: 2020 203c 7665 7273 696f 6e3e 322e 363c     <version>2.6<
+000016c0: 2f76 6572 7369 6f6e 3e0d 0a20 2020 2020  /version>..     
+000016d0: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
+000016e0: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
+000016f0: 2020 3c64 6570 656e 6465 6e63 793e 0d0a    <dependency>..
+00001700: 2020 2020 2020 2020 2020 2020 2020 2020                  
+00001710: 3c67 726f 7570 4964 3e6f 7267 2e61 7061  <groupId>org.apa
+00001720: 6368 652e 6a61 636b 7261 6262 6974 3c2f  che.jackrabbit</
+00001730: 6772 6f75 7049 643e 0d0a 2020 2020 2020  groupId>..      
+00001740: 2020 2020 2020 2020 2020 3c61 7274 6966            <artif
+00001750: 6163 7449 643e 6a61 636b 7261 6262 6974  actId>jackrabbit
+00001760: 2d6a 6372 2d63 6f6d 6d6f 6e73 3c2f 6172  -jcr-commons</ar
+00001770: 7469 6661 6374 4964 3e0d 0a20 2020 2020  tifactId>..     
+00001780: 2020 2020 2020 2020 2020 203c 7665 7273             <vers
+00001790: 696f 6e3e 322e 3230 2e31 3c2f 7665 7273  ion>2.20.1</vers
+000017a0: 696f 6e3e 0d0a 2020 2020 2020 2020 2020  ion>..          
+000017b0: 2020 3c2f 6465 7065 6e64 656e 6379 3e0d    </dependency>.
+000017c0: 0a20 2020 2020 2020 2020 2020 203c 6465  .            <de
+000017d0: 7065 6e64 656e 6379 3e0d 0a20 2020 2020  pendency>..     
+000017e0: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
+000017f0: 7049 643e 6f72 672e 6f73 6769 3c2f 6772  pId>org.osgi</gr
+00001800: 6f75 7049 643e 0d0a 2020 2020 2020 2020  oupId>..        
+00001810: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
+00001820: 7449 643e 6f72 672e 6f73 6769 2e75 7469  tId>org.osgi.uti
+00001830: 6c2e 636f 6e76 6572 7465 723c 2f61 7274  l.converter</art
+00001840: 6966 6163 7449 643e 0d0a 2020 2020 2020  ifactId>..      
+00001850: 2020 2020 2020 2020 2020 3c76 6572 7369            <versi
+00001860: 6f6e 3e31 2e30 2e30 3c2f 7665 7273 696f  on>1.0.0</versio
+00001870: 6e3e 0d0a 2020 2020 2020 2020 2020 2020  n>..            
+00001880: 3c2f 6465 7065 6e64 656e 6379 3e0d 0a20  </dependency>.. 
+00001890: 2020 2020 2020 2020 2020 203c 6465 7065             <depe
+000018a0: 6e64 656e 6379 3e0d 0a20 2020 2020 2020  ndency>..       
+000018b0: 2020 2020 2020 2020 203c 6772 6f75 7049           <groupI
+000018c0: 643e 6f72 672e 6f73 6769 3c2f 6772 6f75  d>org.osgi</grou
+000018d0: 7049 643e 0d0a 2020 2020 2020 2020 2020  pId>..          
+000018e0: 2020 2020 2020 3c61 7274 6966 6163 7449        <artifactI
+000018f0: 643e 6f72 672e 6f73 6769 2e75 7469 6c2e  d>org.osgi.util.
+00001900: 6675 6e63 7469 6f6e 3c2f 6172 7469 6661  function</artifa
+00001910: 6374 4964 3e0d 0a20 2020 2020 2020 2020  ctId>..         
+00001920: 2020 2020 2020 203c 7665 7273 696f 6e3e         <version>
+00001930: 312e 312e 303c 2f76 6572 7369 6f6e 3e0d  1.1.0</version>.
+00001940: 0a20 2020 2020 2020 2020 2020 203c 2f64  .            </d
+00001950: 6570 656e 6465 6e63 793e 0d0a 2020 2020  ependency>..    
+00001960: 2020 2020 3c2f 6465 7065 6e64 656e 6369      </dependenci
+00001970: 6573 3e0d 0a20 2020 203c 2f64 6570 656e  es>..    </depen
+00001980: 6465 6e63 794d 616e 6167 656d 656e 743e  dencyManagement>
+00001990: 0d0a 0d0a 2020 203c 7072 6f66 696c 6573  ....   <profiles
+000019a0: 3e0d 0a20 2020 2020 2020 203c 7072 6f66  >..        <prof
+000019b0: 696c 653e 0d0a 2020 2020 2020 2020 2020  ile>..          
+000019c0: 2020 3c69 643e 6c61 7465 7374 2d64 6570    <id>latest-dep
+000019d0: 656e 6465 6e63 792d 7665 7273 696f 6e73  endency-versions
+000019e0: 3c2f 6964 3e0d 0a20 2020 2020 2020 2020  </id>..         
+000019f0: 2020 203c 6163 7469 7661 7469 6f6e 3e0d     <activation>.
+00001a00: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
+00001a10: 203c 6163 7469 7665 4279 4465 6661 756c   <activeByDefaul
+00001a20: 743e 6661 6c73 653c 2f61 6374 6976 6542  t>false</activeB
+00001a30: 7944 6566 6175 6c74 3e0d 0a20 2020 2020  yDefault>..     
+00001a40: 2020 2020 2020 203c 2f61 6374 6976 6174         </activat
+00001a50: 696f 6e3e 0d0a 2020 2020 2020 2020 2020  ion>..          
+00001a60: 2020 3c64 6570 656e 6465 6e63 794d 616e    <dependencyMan
+00001a70: 6167 656d 656e 743e 0d0a 2020 2020 2020  agement>..      
+00001a80: 2020 2020 2020 2020 2020 3c64 6570 656e            <depen
+00001a90: 6465 6e63 6965 733e 0d0a 2020 2020 2020  dencies>..      
+00001aa0: 2020 2020 2020 2020 2020 2020 2020 3c64                <d
+00001ab0: 6570 656e 6465 6e63 793e 0d0a 2020 2020  ependency>..    
 00001ac0: 2020 2020 2020 2020 2020 2020 2020 2020                  
-00001ad0: 203c 2f64 6570 656e 6465 6e63 793e 0a20   </dependency>. 
-00001ae0: 2020 2020 2020 2020 2020 2020 2020 2020                  
-00001af0: 2020 203c 6465 7065 6e64 656e 6379 3e0a     <dependency>.
+00001ad0: 2020 2020 3c67 726f 7570 4964 3e6f 7267      <groupId>org
+00001ae0: 2e61 7061 6368 652e 736c 696e 673c 2f67  .apache.sling</g
+00001af0: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
 00001b00: 2020 2020 2020 2020 2020 2020 2020 2020                  
-00001b10: 2020 2020 2020 2020 3c67 726f 7570 4964          <groupId
-00001b20: 3e6f 7267 2e61 7061 6368 652e 6a61 636b  >org.apache.jack
-00001b30: 7261 6262 6974 3c2f 6772 6f75 7049 643e  rabbit</groupId>
-00001b40: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
-00001b50: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
-00001b60: 6374 4964 3e6a 6163 6b72 6162 6269 742d  ctId>jackrabbit-
-00001b70: 6a63 722d 636f 6d6d 6f6e 733c 2f61 7274  jcr-commons</art
-00001b80: 6966 6163 7449 643e 0a20 2020 2020 2020  ifactId>.       
-00001b90: 2020 2020 2020 2020 2020 2020 2020 2020                  
-00001ba0: 203c 7665 7273 696f 6e3e 322e 3231 2e39   <version>2.21.9
-00001bb0: 3c2f 7665 7273 696f 6e3e 0a20 2020 2020  </version>.     
-00001bc0: 2020 2020 2020 2020 2020 2020 2020 203c                 <
-00001bd0: 2f64 6570 656e 6465 6e63 793e 0a20 2020  /dependency>.   
-00001be0: 2020 2020 2020 2020 2020 2020 203c 2f64               </d
-00001bf0: 6570 656e 6465 6e63 6965 733e 0a20 2020  ependencies>.   
-00001c00: 2020 2020 2020 2020 203c 2f64 6570 656e           </depen
-00001c10: 6465 6e63 794d 616e 6167 656d 656e 743e  dencyManagement>
-00001c20: 0a20 2020 2020 2020 203c 2f70 726f 6669  .        </profi
-00001c30: 6c65 3e0a 2020 2020 3c2f 7072 6f66 696c  le>.    </profil
-00001c40: 6573 3e0a 0a3c 2f70 726f 6a65 6374 3e0a  es>..</project>.
+00001b10: 203c 6172 7469 6661 6374 4964 3e6f 7267   <artifactId>org
+00001b20: 2e61 7061 6368 652e 736c 696e 672e 6170  .apache.sling.ap
+00001b30: 693c 2f61 7274 6966 6163 7449 643e 0d0a  i</artifactId>..
+00001b40: 2020 2020 2020 2020 2020 2020 2020 2020                  
+00001b50: 2020 2020 2020 2020 3c76 6572 7369 6f6e          <version
+00001b60: 3e32 2e32 352e 303c 2f76 6572 7369 6f6e  >2.25.0</version
+00001b70: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
+00001b80: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
+00001b90: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
+00001ba0: 2020 2020 2020 2020 2020 3c64 6570 656e            <depen
+00001bb0: 6465 6e63 793e 0d0a 2020 2020 2020 2020  dency>..        
+00001bc0: 2020 2020 2020 2020 2020 2020 2020 2020                  
+00001bd0: 3c67 726f 7570 4964 3e6f 7267 2e61 7061  <groupId>org.apa
+00001be0: 6368 652e 6a61 636b 7261 6262 6974 3c2f  che.jackrabbit</
+00001bf0: 6772 6f75 7049 643e 0d0a 2020 2020 2020  groupId>..      
+00001c00: 2020 2020 2020 2020 2020 2020 2020 2020                  
+00001c10: 2020 3c61 7274 6966 6163 7449 643e 6a61    <artifactId>ja
+00001c20: 636b 7261 6262 6974 2d6a 6372 2d63 6f6d  ckrabbit-jcr-com
+00001c30: 6d6f 6e73 3c2f 6172 7469 6661 6374 4964  mons</artifactId
+00001c40: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
+00001c50: 2020 2020 2020 2020 2020 203c 7665 7273             <vers
+00001c60: 696f 6e3e 322e 3231 2e39 3c2f 7665 7273  ion>2.21.9</vers
+00001c70: 696f 6e3e 0d0a 2020 2020 2020 2020 2020  ion>..          
+00001c80: 2020 2020 2020 2020 2020 3c2f 6465 7065            </depe
+00001c90: 6e64 656e 6379 3e0d 0a20 2020 2020 2020  ndency>..       
+00001ca0: 2020 2020 2020 2020 203c 2f64 6570 656e           </depen
+00001cb0: 6465 6e63 6965 733e 0d0a 2020 2020 2020  dencies>..      
+00001cc0: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
+00001cd0: 6379 4d61 6e61 6765 6d65 6e74 3e0d 0a20  cyManagement>.. 
+00001ce0: 2020 2020 2020 203c 2f70 726f 6669 6c65         </profile
+00001cf0: 3e0d 0a20 2020 203c 2f70 726f 6669 6c65  >..    </profile
+00001d00: 733e 0d0a 0d0a 3c2f 7072 6f6a 6563 743e  s>....</project>
+00001d10: 0d0a                                     ..

2 / 4 target/reference/org.apache.sling.testing.resourceresolver-mock-1.3.0.jar target/org.apache.sling.testing.resourceresolver-mock-1.3.0.jar
--- target/reference/org.apache.sling.testing.resourceresolver-mock-1.3.0.jar
+++ target/org.apache.sling.testing.resourceresolver-mock-1.3.0.jar
├── zipinfo {}
│ @@ -1,8 +1,8 @@
│ -Zip file size: 36539 bytes, number of entries: 35
│ +Zip file size: 36549 bytes, number of entries: 35
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 META-INF/
│  -rw-r--r--  2.0 unx     2014 b- defN 22-May-05 16:21 META-INF/MANIFEST.MF
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org/apache/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org/apache/sling/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org/apache/sling/testing/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org/apache/sling/testing/resourceresolver/
│ @@ -28,10 +28,10 @@
│  -rw-r--r--  2.0 unx     5000 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockResourceResolverFactory.class
│  -rw-r--r--  2.0 unx     2634 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockResourceResolverFactoryOptions.class
│  -rw-r--r--  2.0 unx     3827 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockValueMap.class
│  -rw-r--r--  2.0 unx     2053 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/NamespaceMangler.class
│  -rw-r--r--  2.0 unx     3763 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/ReadonlyValueMapDecorator.class
│  -rw-r--r--  2.0 unx     1110 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/ResourceTypeUtil.class
│  -rw-r--r--  2.0 unx      253 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/package-info.class
│ --rw-r--r--  2.0 unx     7248 b- defN 22-May-05 16:21 META-INF/maven/org.apache.sling/org.apache.sling.testing.resourceresolver-mock/pom.xml
│ +-rw-r--r--  2.0 unx     7442 b- defN 22-May-05 16:21 META-INF/maven/org.apache.sling/org.apache.sling.testing.resourceresolver-mock/pom.xml
│  -rw-r--r--  2.0 unx      100 b- defN 22-May-05 16:21 META-INF/maven/org.apache.sling/org.apache.sling.testing.resourceresolver-mock/pom.properties
│ -35 files, 82107 bytes uncompressed, 30199 bytes compressed:  63.2%
│ +35 files, 82301 bytes uncompressed, 30209 bytes compressed:  63.3%
├── META-INF/maven/org.apache.sling/org.apache.sling.testing.resourceresolver-mock/pom.xml
│┄ Format-specific differences are supported for XML files but no file-specific differences were detected; falling back to a binary diff. file(1) reports: XML 1.0 document, ASCII text
│ @@ -1,453 +1,466 @@
│  00000000: 3c3f 786d 6c20 7665 7273 696f 6e3d 2231  <?xml version="1
│  00000010: 2e30 2220 656e 636f 6469 6e67 3d22 4953  .0" encoding="IS
│ -00000020: 4f2d 3838 3539 2d31 223f 3e0a 3c21 2d2d  O-8859-1"?>.<!--
│ -00000030: 0a20 204c 6963 656e 7365 6420 746f 2074  .  Licensed to t
│ -00000040: 6865 2041 7061 6368 6520 536f 6674 7761  he Apache Softwa
│ -00000050: 7265 2046 6f75 6e64 6174 696f 6e20 2841  re Foundation (A
│ -00000060: 5346 2920 756e 6465 7220 6f6e 650a 2020  SF) under one.  
│ -00000070: 6f72 206d 6f72 6520 636f 6e74 7269 6275  or more contribu
│ -00000080: 746f 7220 6c69 6365 6e73 6520 6167 7265  tor license agre
│ -00000090: 656d 656e 7473 2e20 2053 6565 2074 6865  ements.  See the
│ -000000a0: 204e 4f54 4943 4520 6669 6c65 0a20 2064   NOTICE file.  d
│ -000000b0: 6973 7472 6962 7574 6564 2077 6974 6820  istributed with 
│ -000000c0: 7468 6973 2077 6f72 6b20 666f 7220 6164  this work for ad
│ -000000d0: 6469 7469 6f6e 616c 2069 6e66 6f72 6d61  ditional informa
│ -000000e0: 7469 6f6e 0a20 2072 6567 6172 6469 6e67  tion.  regarding
│ -000000f0: 2063 6f70 7972 6967 6874 206f 776e 6572   copyright owner
│ -00000100: 7368 6970 2e20 2054 6865 2041 5346 206c  ship.  The ASF l
│ -00000110: 6963 656e 7365 7320 7468 6973 2066 696c  icenses this fil
│ -00000120: 650a 2020 746f 2079 6f75 2075 6e64 6572  e.  to you under
│ -00000130: 2074 6865 2041 7061 6368 6520 4c69 6365   the Apache Lice
│ -00000140: 6e73 652c 2056 6572 7369 6f6e 2032 2e30  nse, Version 2.0
│ -00000150: 2028 7468 650a 2020 224c 6963 656e 7365   (the.  "License
│ -00000160: 2229 3b20 796f 7520 6d61 7920 6e6f 7420  "); you may not 
│ -00000170: 7573 6520 7468 6973 2066 696c 6520 6578  use this file ex
│ -00000180: 6365 7074 2069 6e20 636f 6d70 6c69 616e  cept in complian
│ -00000190: 6365 0a20 2077 6974 6820 7468 6520 4c69  ce.  with the Li
│ -000001a0: 6365 6e73 652e 2020 596f 7520 6d61 7920  cense.  You may 
│ -000001b0: 6f62 7461 696e 2061 2063 6f70 7920 6f66  obtain a copy of
│ -000001c0: 2074 6865 204c 6963 656e 7365 2061 740a   the License at.
│ -000001d0: 0a20 2020 6874 7470 3a2f 2f77 7777 2e61  .   http://www.a
│ -000001e0: 7061 6368 652e 6f72 672f 6c69 6365 6e73  pache.org/licens
│ -000001f0: 6573 2f4c 4943 454e 5345 2d32 2e30 0a0a  es/LICENSE-2.0..
│ -00000200: 2020 556e 6c65 7373 2072 6571 7569 7265    Unless require
│ -00000210: 6420 6279 2061 7070 6c69 6361 626c 6520  d by applicable 
│ -00000220: 6c61 7720 6f72 2061 6772 6565 6420 746f  law or agreed to
│ -00000230: 2069 6e20 7772 6974 696e 672c 0a20 2073   in writing,.  s
│ -00000240: 6f66 7477 6172 6520 6469 7374 7269 6275  oftware distribu
│ -00000250: 7465 6420 756e 6465 7220 7468 6520 4c69  ted under the Li
│ -00000260: 6365 6e73 6520 6973 2064 6973 7472 6962  cense is distrib
│ -00000270: 7574 6564 206f 6e20 616e 0a20 2022 4153  uted on an.  "AS
│ -00000280: 2049 5322 2042 4153 4953 2c20 5749 5448   IS" BASIS, WITH
│ -00000290: 4f55 5420 5741 5252 414e 5449 4553 204f  OUT WARRANTIES O
│ -000002a0: 5220 434f 4e44 4954 494f 4e53 204f 4620  R CONDITIONS OF 
│ -000002b0: 414e 590a 2020 4b49 4e44 2c20 6569 7468  ANY.  KIND, eith
│ -000002c0: 6572 2065 7870 7265 7373 206f 7220 696d  er express or im
│ -000002d0: 706c 6965 642e 2020 5365 6520 7468 6520  plied.  See the 
│ -000002e0: 4c69 6365 6e73 6520 666f 7220 7468 650a  License for the.
│ -000002f0: 2020 7370 6563 6966 6963 206c 616e 6775    specific langu
│ -00000300: 6167 6520 676f 7665 726e 696e 6720 7065  age governing pe
│ -00000310: 726d 6973 7369 6f6e 7320 616e 6420 6c69  rmissions and li
│ -00000320: 6d69 7461 7469 6f6e 730a 2020 756e 6465  mitations.  unde
│ -00000330: 7220 7468 6520 4c69 6365 6e73 652e 0a2d  r the License..-
│ -00000340: 2d3e 0a3c 7072 6f6a 6563 7420 786d 6c6e  ->.<project xmln
│ -00000350: 733d 2268 7474 703a 2f2f 6d61 7665 6e2e  s="http://maven.
│ -00000360: 6170 6163 6865 2e6f 7267 2f50 4f4d 2f34  apache.org/POM/4
│ -00000370: 2e30 2e30 2220 786d 6c6e 733a 7873 693d  .0.0" xmlns:xsi=
│ -00000380: 2268 7474 703a 2f2f 7777 772e 7733 2e6f  "http://www.w3.o
│ -00000390: 7267 2f32 3030 312f 584d 4c53 6368 656d  rg/2001/XMLSchem
│ -000003a0: 612d 696e 7374 616e 6365 2220 7873 693a  a-instance" xsi:
│ -000003b0: 7363 6865 6d61 4c6f 6361 7469 6f6e 3d22  schemaLocation="
│ -000003c0: 6874 7470 3a2f 2f6d 6176 656e 2e61 7061  http://maven.apa
│ -000003d0: 6368 652e 6f72 672f 504f 4d2f 342e 302e  che.org/POM/4.0.
│ -000003e0: 3020 6874 7470 3a2f 2f6d 6176 656e 2e61  0 http://maven.a
│ -000003f0: 7061 6368 652e 6f72 672f 6d61 7665 6e2d  pache.org/maven-
│ -00000400: 7634 5f30 5f30 2e78 7364 223e 0a0a 2020  v4_0_0.xsd">..  
│ -00000410: 2020 3c6d 6f64 656c 5665 7273 696f 6e3e    <modelVersion>
│ -00000420: 342e 302e 303c 2f6d 6f64 656c 5665 7273  4.0.0</modelVers
│ -00000430: 696f 6e3e 0a20 2020 203c 7061 7265 6e74  ion>.    <parent
│ -00000440: 3e0a 2020 2020 2020 2020 3c67 726f 7570  >.        <group
│ -00000450: 4964 3e6f 7267 2e61 7061 6368 652e 736c  Id>org.apache.sl
│ -00000460: 696e 673c 2f67 726f 7570 4964 3e0a 2020  ing</groupId>.  
│ -00000470: 2020 2020 2020 3c61 7274 6966 6163 7449        <artifactI
│ -00000480: 643e 736c 696e 672d 6275 6e64 6c65 2d70  d>sling-bundle-p
│ -00000490: 6172 656e 743c 2f61 7274 6966 6163 7449  arent</artifactI
│ -000004a0: 643e 0a20 2020 2020 2020 203c 7665 7273  d>.        <vers
│ -000004b0: 696f 6e3e 3437 3c2f 7665 7273 696f 6e3e  ion>47</version>
│ -000004c0: 0a20 2020 2020 2020 203c 7265 6c61 7469  .        <relati
│ -000004d0: 7665 5061 7468 202f 3e0a 2020 2020 3c2f  vePath />.    </
│ -000004e0: 7061 7265 6e74 3e0a 0a20 2020 203c 6172  parent>..    <ar
│ -000004f0: 7469 6661 6374 4964 3e6f 7267 2e61 7061  tifactId>org.apa
│ -00000500: 6368 652e 736c 696e 672e 7465 7374 696e  che.sling.testin
│ -00000510: 672e 7265 736f 7572 6365 7265 736f 6c76  g.resourceresolv
│ -00000520: 6572 2d6d 6f63 6b3c 2f61 7274 6966 6163  er-mock</artifac
│ -00000530: 7449 643e 0a20 2020 203c 7665 7273 696f  tId>.    <versio
│ -00000540: 6e3e 312e 332e 303c 2f76 6572 7369 6f6e  n>1.3.0</version
│ -00000550: 3e0a 0a20 2020 203c 6e61 6d65 3e41 7061  >..    <name>Apa
│ -00000560: 6368 6520 536c 696e 6720 5465 7374 696e  che Sling Testin
│ -00000570: 6720 5265 736f 7572 6365 2052 6573 6f6c  g Resource Resol
│ -00000580: 7665 7220 4d6f 636b 3c2f 6e61 6d65 3e0a  ver Mock</name>.
│ -00000590: 2020 2020 3c64 6573 6372 6970 7469 6f6e      <description
│ -000005a0: 3e0a 2020 2020 2020 2020 4d6f 636b 2066  >.        Mock f
│ -000005b0: 6f72 2074 6865 2072 6573 6f75 7263 6520  or the resource 
│ -000005c0: 7265 736f 6c76 6572 202f 2066 6163 746f  resolver / facto
│ -000005d0: 7279 2066 6f72 2065 6173 6965 7220 7465  ry for easier te
│ -000005e0: 7374 696e 672e 0a20 2020 203c 2f64 6573  sting..    </des
│ -000005f0: 6372 6970 7469 6f6e 3e0a 0a20 2020 203c  cription>..    <
│ -00000600: 7363 6d3e 0a20 2020 2020 2020 203c 636f  scm>.        <co
│ -00000610: 6e6e 6563 7469 6f6e 3e73 636d 3a67 6974  nnection>scm:git
│ -00000620: 3a68 7474 7073 3a2f 2f67 6974 626f 782e  :https://gitbox.
│ -00000630: 6170 6163 6865 2e6f 7267 2f72 6570 6f73  apache.org/repos
│ -00000640: 2f61 7366 2f73 6c69 6e67 2d6f 7267 2d61  /asf/sling-org-a
│ -00000650: 7061 6368 652d 736c 696e 672d 7465 7374  pache-sling-test
│ -00000660: 696e 672d 7265 736f 7572 6365 7265 736f  ing-resourcereso
│ -00000670: 6c76 6572 2d6d 6f63 6b2e 6769 743c 2f63  lver-mock.git</c
│ -00000680: 6f6e 6e65 6374 696f 6e3e 0a20 2020 2020  onnection>.     
│ -00000690: 2020 203c 6465 7665 6c6f 7065 7243 6f6e     <developerCon
│ -000006a0: 6e65 6374 696f 6e3e 7363 6d3a 6769 743a  nection>scm:git:
│ -000006b0: 6874 7470 733a 2f2f 6769 7462 6f78 2e61  https://gitbox.a
│ -000006c0: 7061 6368 652e 6f72 672f 7265 706f 732f  pache.org/repos/
│ -000006d0: 6173 662f 736c 696e 672d 6f72 672d 6170  asf/sling-org-ap
│ -000006e0: 6163 6865 2d73 6c69 6e67 2d74 6573 7469  ache-sling-testi
│ -000006f0: 6e67 2d72 6573 6f75 7263 6572 6573 6f6c  ng-resourceresol
│ -00000700: 7665 722d 6d6f 636b 2e67 6974 3c2f 6465  ver-mock.git</de
│ -00000710: 7665 6c6f 7065 7243 6f6e 6e65 6374 696f  veloperConnectio
│ -00000720: 6e3e 0a20 2020 2020 2020 203c 7572 6c3e  n>.        <url>
│ -00000730: 6874 7470 733a 2f2f 6769 7462 6f78 2e61  https://gitbox.a
│ -00000740: 7061 6368 652e 6f72 672f 7265 706f 732f  pache.org/repos/
│ -00000750: 6173 663f 703d 736c 696e 672d 6f72 672d  asf?p=sling-org-
│ -00000760: 6170 6163 6865 2d73 6c69 6e67 2d74 6573  apache-sling-tes
│ -00000770: 7469 6e67 2d72 6573 6f75 7263 6572 6573  ting-resourceres
│ -00000780: 6f6c 7665 722d 6d6f 636b 2e67 6974 3c2f  olver-mock.git</
│ -00000790: 7572 6c3e 0a20 2020 2020 2020 203c 7461  url>.        <ta
│ -000007a0: 673e 6f72 672e 6170 6163 6865 2e73 6c69  g>org.apache.sli
│ -000007b0: 6e67 2e74 6573 7469 6e67 2e72 6573 6f75  ng.testing.resou
│ -000007c0: 7263 6572 6573 6f6c 7665 722d 6d6f 636b  rceresolver-mock
│ -000007d0: 2d31 2e33 2e30 3c2f 7461 673e 0a20 2020  -1.3.0</tag>.   
│ -000007e0: 203c 2f73 636d 3e0a 0a20 2020 203c 7072   </scm>..    <pr
│ -000007f0: 6f70 6572 7469 6573 3e0a 2020 2020 2020  operties>.      
│ -00000800: 2020 3c70 726f 6a65 6374 2e62 7569 6c64    <project.build
│ -00000810: 2e6f 7574 7075 7454 696d 6573 7461 6d70  .outputTimestamp
│ -00000820: 3e32 3032 322d 3035 2d30 3554 3136 3a32  >2022-05-05T16:2
│ -00000830: 313a 3235 5a3c 2f70 726f 6a65 6374 2e62  1:25Z</project.b
│ -00000840: 7569 6c64 2e6f 7574 7075 7454 696d 6573  uild.outputTimes
│ -00000850: 7461 6d70 3e0a 2020 2020 3c2f 7072 6f70  tamp>.    </prop
│ -00000860: 6572 7469 6573 3e0a 0a20 2020 203c 7265  erties>..    <re
│ -00000870: 706f 7274 696e 673e 0a20 2020 2020 2020  porting>.       
│ -00000880: 203c 706c 7567 696e 733e 0a20 2020 2020   <plugins>.     
│ -00000890: 2020 2020 2020 203c 706c 7567 696e 3e0a         <plugin>.
│ -000008a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -000008b0: 3c67 726f 7570 4964 3e6f 7267 2e61 7061  <groupId>org.apa
│ -000008c0: 6368 652e 6d61 7665 6e2e 706c 7567 696e  che.maven.plugin
│ -000008d0: 733c 2f67 726f 7570 4964 3e0a 2020 2020  s</groupId>.    
│ -000008e0: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
│ -000008f0: 6966 6163 7449 643e 6d61 7665 6e2d 6a61  ifactId>maven-ja
│ -00000900: 7661 646f 632d 706c 7567 696e 3c2f 6172  vadoc-plugin</ar
│ -00000910: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
│ -00000920: 2020 2020 2020 2020 2020 3c63 6f6e 6669            <confi
│ -00000930: 6775 7261 7469 6f6e 3e0a 2020 2020 2020  guration>.      
│ -00000940: 2020 2020 2020 2020 2020 2020 2020 3c65                <e
│ -00000950: 7863 6c75 6465 5061 636b 6167 654e 616d  xcludePackageNam
│ -00000960: 6573 3e0a 2020 2020 2020 2020 2020 2020  es>.            
│ -00000970: 2020 2020 2020 2020 2020 2020 6f72 672e              org.
│ -00000980: 6170 6163 6865 2e73 6c69 6e67 2e74 6573  apache.sling.tes
│ -00000990: 7469 6e67 2e72 6573 6f75 7263 6572 6573  ting.resourceres
│ -000009a0: 6f6c 7665 720a 2020 2020 2020 2020 2020  olver.          
│ -000009b0: 2020 2020 2020 2020 2020 3c2f 6578 636c            </excl
│ -000009c0: 7564 6550 6163 6b61 6765 4e61 6d65 733e  udePackageNames>
│ -000009d0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
│ -000009e0: 203c 2f63 6f6e 6669 6775 7261 7469 6f6e   </configuration
│ -000009f0: 3e0a 2020 2020 2020 2020 2020 2020 3c2f  >.            </
│ -00000a00: 706c 7567 696e 3e0a 2020 2020 2020 2020  plugin>.        
│ -00000a10: 3c2f 706c 7567 696e 733e 0a20 2020 203c  </plugins>.    <
│ -00000a20: 2f72 6570 6f72 7469 6e67 3e0a 2020 2020  /reporting>.    
│ -00000a30: 3c64 6570 656e 6465 6e63 6965 733e 0a20  <dependencies>. 
│ -00000a40: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
│ -00000a50: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
│ -00000a60: 3c67 726f 7570 4964 3e6f 7267 2e6f 7367  <groupId>org.osg
│ -00000a70: 693c 2f67 726f 7570 4964 3e0a 2020 2020  i</groupId>.    
│ -00000a80: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
│ -00000a90: 7449 643e 6f72 672e 6f73 6769 2e61 6e6e  tId>org.osgi.ann
│ -00000aa0: 6f74 6174 696f 6e2e 7665 7273 696f 6e69  otation.versioni
│ -00000ab0: 6e67 3c2f 6172 7469 6661 6374 4964 3e0a  ng</artifactId>.
│ -00000ac0: 2020 2020 2020 2020 2020 2020 3c73 636f              <sco
│ -00000ad0: 7065 3e70 726f 7669 6465 643c 2f73 636f  pe>provided</sco
│ -00000ae0: 7065 3e0a 2020 2020 2020 2020 3c2f 6465  pe>.        </de
│ -00000af0: 7065 6e64 656e 6379 3e0a 2020 2020 2020  pendency>.      
│ -00000b00: 2020 3c64 6570 656e 6465 6e63 793e 0a20    <dependency>. 
│ -00000b10: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
│ -00000b20: 7049 643e 6f72 672e 6a65 7462 7261 696e  pId>org.jetbrain
│ -00000b30: 733c 2f67 726f 7570 4964 3e0a 2020 2020  s</groupId>.    
│ -00000b40: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
│ -00000b50: 7449 643e 616e 6e6f 7461 7469 6f6e 733c  tId>annotations<
│ -00000b60: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
│ -00000b70: 2020 2020 2020 2020 203c 7363 6f70 653e           <scope>
│ -00000b80: 7072 6f76 6964 6564 3c2f 7363 6f70 653e  provided</scope>
│ -00000b90: 0a20 2020 2020 2020 203c 2f64 6570 656e  .        </depen
│ -00000ba0: 6465 6e63 793e 0a20 2020 2020 2020 203c  dency>.        <
│ -00000bb0: 6465 7065 6e64 656e 6379 3e0a 2020 2020  dependency>.    
│ -00000bc0: 2020 2020 2020 2020 3c67 726f 7570 4964          <groupId
│ -00000bd0: 3e6a 6176 6178 2e73 6572 766c 6574 3c2f  >javax.servlet</
│ -00000be0: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
│ -00000bf0: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
│ -00000c00: 3e6a 6176 6178 2e73 6572 766c 6574 2d61  >javax.servlet-a
│ -00000c10: 7069 3c2f 6172 7469 6661 6374 4964 3e0a  pi</artifactId>.
│ -00000c20: 2020 2020 2020 2020 2020 2020 3c73 636f              <sco
│ -00000c30: 7065 3e70 726f 7669 6465 643c 2f73 636f  pe>provided</sco
│ -00000c40: 7065 3e0a 2020 2020 2020 2020 3c2f 6465  pe>.        </de
│ -00000c50: 7065 6e64 656e 6379 3e0a 0a20 2020 2020  pendency>..     
│ -00000c60: 2020 203c 6465 7065 6e64 656e 6379 3e0a     <dependency>.
│ -00000c70: 2020 2020 2020 2020 2020 2020 3c67 726f              <gro
│ -00000c80: 7570 4964 3e6f 7267 2e61 7061 6368 652e  upId>org.apache.
│ -00000c90: 736c 696e 673c 2f67 726f 7570 4964 3e0a  sling</groupId>.
│ -00000ca0: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
│ -00000cb0: 6966 6163 7449 643e 6f72 672e 6170 6163  ifactId>org.apac
│ -00000cc0: 6865 2e73 6c69 6e67 2e61 7069 3c2f 6172  he.sling.api</ar
│ -00000cd0: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
│ -00000ce0: 2020 2020 2020 3c73 636f 7065 3e70 726f        <scope>pro
│ -00000cf0: 7669 6465 643c 2f73 636f 7065 3e0a 2020  vided</scope>.  
│ -00000d00: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ -00000d10: 6379 3e0a 2020 2020 2020 2020 3c64 6570  cy>.        <dep
│ -00000d20: 656e 6465 6e63 793e 0a20 2020 2020 2020  endency>.       
│ -00000d30: 2020 2020 203c 6772 6f75 7049 643e 6f72       <groupId>or
│ -00000d40: 672e 6f73 6769 3c2f 6772 6f75 7049 643e  g.osgi</groupId>
│ -00000d50: 0a20 2020 2020 2020 2020 2020 203c 6172  .            <ar
│ -00000d60: 7469 6661 6374 4964 3e6f 7267 2e6f 7367  tifactId>org.osg
│ -00000d70: 692e 7365 7276 6963 652e 6576 656e 743c  i.service.event<
│ -00000d80: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
│ -00000d90: 2020 2020 2020 2020 203c 7363 6f70 653e           <scope>
│ -00000da0: 7072 6f76 6964 6564 3c2f 7363 6f70 653e  provided</scope>
│ -00000db0: 0a20 2020 2020 2020 203c 2f64 6570 656e  .        </depen
│ -00000dc0: 6465 6e63 793e 0a20 2020 2020 2020 203c  dency>.        <
│ -00000dd0: 6465 7065 6e64 656e 6379 3e0a 2020 2020  dependency>.    
│ -00000de0: 2020 2020 2020 2020 3c67 726f 7570 4964          <groupId
│ -00000df0: 3e6f 7267 2e6f 7367 693c 2f67 726f 7570  >org.osgi</group
│ -00000e00: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
│ -00000e10: 3c61 7274 6966 6163 7449 643e 6f72 672e  <artifactId>org.
│ -00000e20: 6f73 6769 2e75 7469 6c2e 636f 6e76 6572  osgi.util.conver
│ -00000e30: 7465 723c 2f61 7274 6966 6163 7449 643e  ter</artifactId>
│ -00000e40: 0a20 2020 2020 2020 2020 2020 203c 7363  .            <sc
│ -00000e50: 6f70 653e 7072 6f76 6964 6564 3c2f 7363  ope>provided</sc
│ -00000e60: 6f70 653e 0a20 2020 2020 2020 203c 2f64  ope>.        </d
│ -00000e70: 6570 656e 6465 6e63 793e 0a20 2020 2020  ependency>.     
│ -00000e80: 2020 203c 6465 7065 6e64 656e 6379 3e0a     <dependency>.
│ -00000e90: 2020 2020 2020 2020 2020 2020 3c67 726f              <gro
│ -00000ea0: 7570 4964 3e6f 7267 2e6f 7367 693c 2f67  upId>org.osgi</g
│ -00000eb0: 726f 7570 4964 3e0a 2020 2020 2020 2020  roupId>.        
│ -00000ec0: 2020 2020 3c61 7274 6966 6163 7449 643e      <artifactId>
│ -00000ed0: 6f72 672e 6f73 6769 2e75 7469 6c2e 6675  org.osgi.util.fu
│ -00000ee0: 6e63 7469 6f6e 3c2f 6172 7469 6661 6374  nction</artifact
│ -00000ef0: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
│ -00000f00: 3c73 636f 7065 3e70 726f 7669 6465 643c  <scope>provided<
│ -00000f10: 2f73 636f 7065 3e0a 2020 2020 2020 2020  /scope>.        
│ -00000f20: 3c2f 6465 7065 6e64 656e 6379 3e0a 2020  </dependency>.  
│ -00000f30: 2020 2020 2020 3c64 6570 656e 6465 6e63        <dependenc
│ -00000f40: 793e 0a20 2020 2020 2020 2020 2020 203c  y>.            <
│ -00000f50: 6772 6f75 7049 643e 636f 6d6d 6f6e 732d  groupId>commons-
│ -00000f60: 696f 3c2f 6772 6f75 7049 643e 0a20 2020  io</groupId>.   
│ -00000f70: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
│ -00000f80: 6374 4964 3e63 6f6d 6d6f 6e73 2d69 6f3c  ctId>commons-io<
│ -00000f90: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
│ -00000fa0: 2020 2020 2020 2020 203c 7363 6f70 653e           <scope>
│ -00000fb0: 636f 6d70 696c 653c 2f73 636f 7065 3e0a  compile</scope>.
│ -00000fc0: 2020 2020 2020 2020 3c2f 6465 7065 6e64          </depend
│ -00000fd0: 656e 6379 3e0a 2020 2020 2020 2020 3c64  ency>.        <d
│ -00000fe0: 6570 656e 6465 6e63 793e 0a20 2020 2020  ependency>.     
│ -00000ff0: 2020 2020 2020 203c 6772 6f75 7049 643e         <groupId>
│ -00001000: 6f72 672e 6170 6163 6865 2e6a 6163 6b72  org.apache.jackr
│ -00001010: 6162 6269 743c 2f67 726f 7570 4964 3e0a  abbit</groupId>.
│ -00001020: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
│ -00001030: 6966 6163 7449 643e 6a61 636b 7261 6262  ifactId>jackrabb
│ -00001040: 6974 2d6a 6372 2d63 6f6d 6d6f 6e73 3c2f  it-jcr-commons</
│ -00001050: 6172 7469 6661 6374 4964 3e0a 2020 2020  artifactId>.    
│ -00001060: 2020 2020 2020 2020 3c73 636f 7065 3e63          <scope>c
│ -00001070: 6f6d 7069 6c65 3c2f 7363 6f70 653e 0a20  ompile</scope>. 
│ -00001080: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
│ -00001090: 6e63 793e 0a0a 2020 2020 2020 2020 3c21  ncy>..        <!
│ -000010a0: 2d2d 2074 6573 7469 6e67 202d 2d3e 0a20  -- testing -->. 
│ -000010b0: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
│ -000010c0: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
│ -000010d0: 3c67 726f 7570 4964 3e6a 756e 6974 3c2f  <groupId>junit</
│ -000010e0: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
│ -000010f0: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
│ -00001100: 3e6a 756e 6974 3c2f 6172 7469 6661 6374  >junit</artifact
│ -00001110: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
│ -00001120: 3c73 636f 7065 3e74 6573 743c 2f73 636f  <scope>test</sco
│ -00001130: 7065 3e0a 2020 2020 2020 2020 3c2f 6465  pe>.        </de
│ -00001140: 7065 6e64 656e 6379 3e0a 2020 2020 2020  pendency>.      
│ -00001150: 2020 3c64 6570 656e 6465 6e63 793e 0a20    <dependency>. 
│ -00001160: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
│ -00001170: 7049 643e 636f 6d2e 676f 6f67 6c65 2e67  pId>com.google.g
│ -00001180: 7561 7661 3c2f 6772 6f75 7049 643e 0a20  uava</groupId>. 
│ -00001190: 2020 2020 2020 2020 2020 203c 6172 7469             <arti
│ -000011a0: 6661 6374 4964 3e67 7561 7661 3c2f 6172  factId>guava</ar
│ -000011b0: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
│ -000011c0: 2020 2020 2020 3c76 6572 7369 6f6e 3e31        <version>1
│ -000011d0: 352e 303c 2f76 6572 7369 6f6e 3e0a 2020  5.0</version>.  
│ -000011e0: 2020 2020 2020 2020 2020 3c73 636f 7065            <scope
│ -000011f0: 3e74 6573 743c 2f73 636f 7065 3e0a 2020  >test</scope>.  
│ -00001200: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ -00001210: 6379 3e0a 2020 2020 2020 2020 3c64 6570  cy>.        <dep
│ -00001220: 656e 6465 6e63 793e 0a20 2020 2020 2020  endency>.       
│ -00001230: 2020 2020 203c 6772 6f75 7049 643e 6f72       <groupId>or
│ -00001240: 672e 6d6f 636b 6974 6f3c 2f67 726f 7570  g.mockito</group
│ -00001250: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
│ -00001260: 3c61 7274 6966 6163 7449 643e 6d6f 636b  <artifactId>mock
│ -00001270: 6974 6f2d 636f 7265 3c2f 6172 7469 6661  ito-core</artifa
│ -00001280: 6374 4964 3e0a 2020 2020 2020 2020 2020  ctId>.          
│ -00001290: 2020 3c76 6572 7369 6f6e 3e34 2e35 2e31    <version>4.5.1
│ -000012a0: 3c2f 7665 7273 696f 6e3e 0a20 2020 2020  </version>.     
│ -000012b0: 2020 2020 2020 203c 7363 6f70 653e 7465         <scope>te
│ -000012c0: 7374 3c2f 7363 6f70 653e 0a20 2020 2020  st</scope>.     
│ -000012d0: 2020 203c 2f64 6570 656e 6465 6e63 793e     </dependency>
│ -000012e0: 0a20 2020 2020 2020 203c 6465 7065 6e64  .        <depend
│ -000012f0: 656e 6379 3e0a 2020 2020 2020 2020 2020  ency>.          
│ -00001300: 2020 3c67 726f 7570 4964 3e6f 7267 2e61    <groupId>org.a
│ -00001310: 7061 6368 652e 636f 6d6d 6f6e 733c 2f67  pache.commons</g
│ -00001320: 726f 7570 4964 3e0a 2020 2020 2020 2020  roupId>.        
│ -00001330: 2020 2020 3c61 7274 6966 6163 7449 643e      <artifactId>
│ -00001340: 636f 6d6d 6f6e 732d 6c61 6e67 333c 2f61  commons-lang3</a
│ -00001350: 7274 6966 6163 7449 643e 0a20 2020 2020  rtifactId>.     
│ -00001360: 2020 2020 2020 203c 7665 7273 696f 6e3e         <version>
│ -00001370: 332e 393c 2f76 6572 7369 6f6e 3e0a 2020  3.9</version>.  
│ -00001380: 2020 2020 2020 2020 2020 3c73 636f 7065            <scope
│ -00001390: 3e74 6573 743c 2f73 636f 7065 3e0a 2020  >test</scope>.  
│ -000013a0: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ -000013b0: 6379 3e0a 2020 2020 3c2f 6465 7065 6e64  cy>.    </depend
│ -000013c0: 656e 6369 6573 3e0a 0a20 2020 203c 6465  encies>..    <de
│ -000013d0: 7065 6e64 656e 6379 4d61 6e61 6765 6d65  pendencyManageme
│ -000013e0: 6e74 3e0a 2020 2020 2020 2020 3c64 6570  nt>.        <dep
│ -000013f0: 656e 6465 6e63 6965 733e 0a20 2020 2020  endencies>.     
│ -00001400: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
│ -00001410: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
│ -00001420: 2020 2020 3c67 726f 7570 4964 3e6f 7267      <groupId>org
│ -00001430: 2e61 7061 6368 652e 736c 696e 673c 2f67  .apache.sling</g
│ -00001440: 726f 7570 4964 3e0a 2020 2020 2020 2020  roupId>.        
│ -00001450: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
│ -00001460: 7449 643e 6f72 672e 6170 6163 6865 2e73  tId>org.apache.s
│ -00001470: 6c69 6e67 2e61 7069 3c2f 6172 7469 6661  ling.api</artifa
│ -00001480: 6374 4964 3e0a 2020 2020 2020 2020 2020  ctId>.          
│ -00001490: 2020 2020 2020 3c76 6572 7369 6f6e 3e32        <version>2
│ -000014a0: 2e32 322e 303c 2f76 6572 7369 6f6e 3e0a  .22.0</version>.
│ -000014b0: 2020 2020 2020 2020 2020 2020 3c2f 6465              </de
│ -000014c0: 7065 6e64 656e 6379 3e0a 2020 2020 2020  pendency>.      
│ -000014d0: 2020 2020 2020 3c64 6570 656e 6465 6e63        <dependenc
│ -000014e0: 793e 0a20 2020 2020 2020 2020 2020 2020  y>.             
│ -000014f0: 2020 203c 6772 6f75 7049 643e 6f72 672e     <groupId>org.
│ -00001500: 6f73 6769 3c2f 6772 6f75 7049 643e 0a20  osgi</groupId>. 
│ -00001510: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ -00001520: 6172 7469 6661 6374 4964 3e6f 7267 2e6f  artifactId>org.o
│ -00001530: 7367 692e 7365 7276 6963 652e 6576 656e  sgi.service.even
│ -00001540: 743c 2f61 7274 6966 6163 7449 643e 0a20  t</artifactId>. 
│ -00001550: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ -00001560: 7665 7273 696f 6e3e 312e 342e 303c 2f76  version>1.4.0</v
│ -00001570: 6572 7369 6f6e 3e0a 2020 2020 2020 2020  ersion>.        
│ -00001580: 2020 2020 3c2f 6465 7065 6e64 656e 6379      </dependency
│ -00001590: 3e0a 2020 2020 2020 2020 2020 2020 3c64  >.            <d
│ -000015a0: 6570 656e 6465 6e63 793e 0a20 2020 2020  ependency>.     
│ -000015b0: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
│ -000015c0: 7049 643e 636f 6d6d 6f6e 732d 696f 3c2f  pId>commons-io</
│ -000015d0: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
│ -000015e0: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
│ -000015f0: 6374 4964 3e63 6f6d 6d6f 6e73 2d69 6f3c  ctId>commons-io<
│ -00001600: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
│ -00001610: 2020 2020 2020 2020 2020 2020 203c 7665               <ve
│ -00001620: 7273 696f 6e3e 322e 363c 2f76 6572 7369  rsion>2.6</versi
│ -00001630: 6f6e 3e0a 2020 2020 2020 2020 2020 2020  on>.            
│ -00001640: 3c2f 6465 7065 6e64 656e 6379 3e0a 2020  </dependency>.  
│ -00001650: 2020 2020 2020 2020 2020 3c64 6570 656e            <depen
│ -00001660: 6465 6e63 793e 0a20 2020 2020 2020 2020  dency>.         
│ -00001670: 2020 2020 2020 203c 6772 6f75 7049 643e         <groupId>
│ -00001680: 6f72 672e 6170 6163 6865 2e6a 6163 6b72  org.apache.jackr
│ -00001690: 6162 6269 743c 2f67 726f 7570 4964 3e0a  abbit</groupId>.
│ -000016a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -000016b0: 3c61 7274 6966 6163 7449 643e 6a61 636b  <artifactId>jack
│ -000016c0: 7261 6262 6974 2d6a 6372 2d63 6f6d 6d6f  rabbit-jcr-commo
│ -000016d0: 6e73 3c2f 6172 7469 6661 6374 4964 3e0a  ns</artifactId>.
│ -000016e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -000016f0: 3c76 6572 7369 6f6e 3e32 2e32 302e 313c  <version>2.20.1<
│ -00001700: 2f76 6572 7369 6f6e 3e0a 2020 2020 2020  /version>.      
│ -00001710: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ -00001720: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
│ -00001730: 3c64 6570 656e 6465 6e63 793e 0a20 2020  <dependency>.   
│ -00001740: 2020 2020 2020 2020 2020 2020 203c 6772               <gr
│ -00001750: 6f75 7049 643e 6f72 672e 6f73 6769 3c2f  oupId>org.osgi</
│ -00001760: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
│ -00001770: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
│ -00001780: 6374 4964 3e6f 7267 2e6f 7367 692e 7574  ctId>org.osgi.ut
│ -00001790: 696c 2e63 6f6e 7665 7274 6572 3c2f 6172  il.converter</ar
│ -000017a0: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
│ -000017b0: 2020 2020 2020 2020 2020 3c76 6572 7369            <versi
│ -000017c0: 6f6e 3e31 2e30 2e30 3c2f 7665 7273 696f  on>1.0.0</versio
│ -000017d0: 6e3e 0a20 2020 2020 2020 2020 2020 203c  n>.            <
│ -000017e0: 2f64 6570 656e 6465 6e63 793e 0a20 2020  /dependency>.   
│ -000017f0: 2020 2020 2020 2020 203c 6465 7065 6e64           <depend
│ -00001800: 656e 6379 3e0a 2020 2020 2020 2020 2020  ency>.          
│ -00001810: 2020 2020 2020 3c67 726f 7570 4964 3e6f        <groupId>o
│ -00001820: 7267 2e6f 7367 693c 2f67 726f 7570 4964  rg.osgi</groupId
│ -00001830: 3e0a 2020 2020 2020 2020 2020 2020 2020  >.              
│ -00001840: 2020 3c61 7274 6966 6163 7449 643e 6f72    <artifactId>or
│ -00001850: 672e 6f73 6769 2e75 7469 6c2e 6675 6e63  g.osgi.util.func
│ -00001860: 7469 6f6e 3c2f 6172 7469 6661 6374 4964  tion</artifactId
│ -00001870: 3e0a 2020 2020 2020 2020 2020 2020 2020  >.              
│ -00001880: 2020 3c76 6572 7369 6f6e 3e31 2e31 2e30    <version>1.1.0
│ -00001890: 3c2f 7665 7273 696f 6e3e 0a20 2020 2020  </version>.     
│ -000018a0: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
│ -000018b0: 6e63 793e 0a20 2020 2020 2020 203c 2f64  ncy>.        </d
│ -000018c0: 6570 656e 6465 6e63 6965 733e 0a20 2020  ependencies>.   
│ -000018d0: 203c 2f64 6570 656e 6465 6e63 794d 616e   </dependencyMan
│ -000018e0: 6167 656d 656e 743e 0a0a 2020 203c 7072  agement>..   <pr
│ -000018f0: 6f66 696c 6573 3e0a 2020 2020 2020 2020  ofiles>.        
│ -00001900: 3c70 726f 6669 6c65 3e0a 2020 2020 2020  <profile>.      
│ -00001910: 2020 2020 2020 3c69 643e 6c61 7465 7374        <id>latest
│ -00001920: 2d64 6570 656e 6465 6e63 792d 7665 7273  -dependency-vers
│ -00001930: 696f 6e73 3c2f 6964 3e0a 2020 2020 2020  ions</id>.      
│ -00001940: 2020 2020 2020 3c61 6374 6976 6174 696f        <activatio
│ -00001950: 6e3e 0a20 2020 2020 2020 2020 2020 2020  n>.             
│ -00001960: 2020 203c 6163 7469 7665 4279 4465 6661     <activeByDefa
│ -00001970: 756c 743e 6661 6c73 653c 2f61 6374 6976  ult>false</activ
│ -00001980: 6542 7944 6566 6175 6c74 3e0a 2020 2020  eByDefault>.    
│ -00001990: 2020 2020 2020 2020 3c2f 6163 7469 7661          </activa
│ -000019a0: 7469 6f6e 3e0a 2020 2020 2020 2020 2020  tion>.          
│ -000019b0: 2020 3c64 6570 656e 6465 6e63 794d 616e    <dependencyMan
│ -000019c0: 6167 656d 656e 743e 0a20 2020 2020 2020  agement>.       
│ -000019d0: 2020 2020 2020 2020 203c 6465 7065 6e64           <depend
│ -000019e0: 656e 6369 6573 3e0a 2020 2020 2020 2020  encies>.        
│ -000019f0: 2020 2020 2020 2020 2020 2020 3c64 6570              <dep
│ -00001a00: 656e 6465 6e63 793e 0a20 2020 2020 2020  endency>.       
│ -00001a10: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001a20: 203c 6772 6f75 7049 643e 6f72 672e 6170   <groupId>org.ap
│ -00001a30: 6163 6865 2e73 6c69 6e67 3c2f 6772 6f75  ache.sling</grou
│ -00001a40: 7049 643e 0a20 2020 2020 2020 2020 2020  pId>.           
│ -00001a50: 2020 2020 2020 2020 2020 2020 203c 6172               <ar
│ -00001a60: 7469 6661 6374 4964 3e6f 7267 2e61 7061  tifactId>org.apa
│ -00001a70: 6368 652e 736c 696e 672e 6170 693c 2f61  che.sling.api</a
│ -00001a80: 7274 6966 6163 7449 643e 0a20 2020 2020  rtifactId>.     
│ -00001a90: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001aa0: 2020 203c 7665 7273 696f 6e3e 322e 3235     <version>2.25
│ -00001ab0: 2e30 3c2f 7665 7273 696f 6e3e 0a20 2020  .0</version>.   
│ +00000020: 4f2d 3838 3539 2d31 223f 3e0d 0a3c 212d  O-8859-1"?>..<!-
│ +00000030: 2d0d 0a20 204c 6963 656e 7365 6420 746f  -..  Licensed to
│ +00000040: 2074 6865 2041 7061 6368 6520 536f 6674   the Apache Soft
│ +00000050: 7761 7265 2046 6f75 6e64 6174 696f 6e20  ware Foundation 
│ +00000060: 2841 5346 2920 756e 6465 7220 6f6e 650d  (ASF) under one.
│ +00000070: 0a20 206f 7220 6d6f 7265 2063 6f6e 7472  .  or more contr
│ +00000080: 6962 7574 6f72 206c 6963 656e 7365 2061  ibutor license a
│ +00000090: 6772 6565 6d65 6e74 732e 2020 5365 6520  greements.  See 
│ +000000a0: 7468 6520 4e4f 5449 4345 2066 696c 650d  the NOTICE file.
│ +000000b0: 0a20 2064 6973 7472 6962 7574 6564 2077  .  distributed w
│ +000000c0: 6974 6820 7468 6973 2077 6f72 6b20 666f  ith this work fo
│ +000000d0: 7220 6164 6469 7469 6f6e 616c 2069 6e66  r additional inf
│ +000000e0: 6f72 6d61 7469 6f6e 0d0a 2020 7265 6761  ormation..  rega
│ +000000f0: 7264 696e 6720 636f 7079 7269 6768 7420  rding copyright 
│ +00000100: 6f77 6e65 7273 6869 702e 2020 5468 6520  ownership.  The 
│ +00000110: 4153 4620 6c69 6365 6e73 6573 2074 6869  ASF licenses thi
│ +00000120: 7320 6669 6c65 0d0a 2020 746f 2079 6f75  s file..  to you
│ +00000130: 2075 6e64 6572 2074 6865 2041 7061 6368   under the Apach
│ +00000140: 6520 4c69 6365 6e73 652c 2056 6572 7369  e License, Versi
│ +00000150: 6f6e 2032 2e30 2028 7468 650d 0a20 2022  on 2.0 (the..  "
│ +00000160: 4c69 6365 6e73 6522 293b 2079 6f75 206d  License"); you m
│ +00000170: 6179 206e 6f74 2075 7365 2074 6869 7320  ay not use this 
│ +00000180: 6669 6c65 2065 7863 6570 7420 696e 2063  file except in c
│ +00000190: 6f6d 706c 6961 6e63 650d 0a20 2077 6974  ompliance..  wit
│ +000001a0: 6820 7468 6520 4c69 6365 6e73 652e 2020  h the License.  
│ +000001b0: 596f 7520 6d61 7920 6f62 7461 696e 2061  You may obtain a
│ +000001c0: 2063 6f70 7920 6f66 2074 6865 204c 6963   copy of the Lic
│ +000001d0: 656e 7365 2061 740d 0a0d 0a20 2020 6874  ense at....   ht
│ +000001e0: 7470 3a2f 2f77 7777 2e61 7061 6368 652e  tp://www.apache.
│ +000001f0: 6f72 672f 6c69 6365 6e73 6573 2f4c 4943  org/licenses/LIC
│ +00000200: 454e 5345 2d32 2e30 0d0a 0d0a 2020 556e  ENSE-2.0....  Un
│ +00000210: 6c65 7373 2072 6571 7569 7265 6420 6279  less required by
│ +00000220: 2061 7070 6c69 6361 626c 6520 6c61 7720   applicable law 
│ +00000230: 6f72 2061 6772 6565 6420 746f 2069 6e20  or agreed to in 
│ +00000240: 7772 6974 696e 672c 0d0a 2020 736f 6674  writing,..  soft
│ +00000250: 7761 7265 2064 6973 7472 6962 7574 6564  ware distributed
│ +00000260: 2075 6e64 6572 2074 6865 204c 6963 656e   under the Licen
│ +00000270: 7365 2069 7320 6469 7374 7269 6275 7465  se is distribute
│ +00000280: 6420 6f6e 2061 6e0d 0a20 2022 4153 2049  d on an..  "AS I
│ +00000290: 5322 2042 4153 4953 2c20 5749 5448 4f55  S" BASIS, WITHOU
│ +000002a0: 5420 5741 5252 414e 5449 4553 204f 5220  T WARRANTIES OR 
│ +000002b0: 434f 4e44 4954 494f 4e53 204f 4620 414e  CONDITIONS OF AN
│ +000002c0: 590d 0a20 204b 494e 442c 2065 6974 6865  Y..  KIND, eithe
│ +000002d0: 7220 6578 7072 6573 7320 6f72 2069 6d70  r express or imp
│ +000002e0: 6c69 6564 2e20 2053 6565 2074 6865 204c  lied.  See the L
│ +000002f0: 6963 656e 7365 2066 6f72 2074 6865 0d0a  icense for the..
│ +00000300: 2020 7370 6563 6966 6963 206c 616e 6775    specific langu
│ +00000310: 6167 6520 676f 7665 726e 696e 6720 7065  age governing pe
│ +00000320: 726d 6973 7369 6f6e 7320 616e 6420 6c69  rmissions and li
│ +00000330: 6d69 7461 7469 6f6e 730d 0a20 2075 6e64  mitations..  und
│ +00000340: 6572 2074 6865 204c 6963 656e 7365 2e0d  er the License..
│ +00000350: 0a2d 2d3e 0d0a 3c70 726f 6a65 6374 2078  .-->..<project x
│ +00000360: 6d6c 6e73 3d22 6874 7470 3a2f 2f6d 6176  mlns="http://mav
│ +00000370: 656e 2e61 7061 6368 652e 6f72 672f 504f  en.apache.org/PO
│ +00000380: 4d2f 342e 302e 3022 2078 6d6c 6e73 3a78  M/4.0.0" xmlns:x
│ +00000390: 7369 3d22 6874 7470 3a2f 2f77 7777 2e77  si="http://www.w
│ +000003a0: 332e 6f72 672f 3230 3031 2f58 4d4c 5363  3.org/2001/XMLSc
│ +000003b0: 6865 6d61 2d69 6e73 7461 6e63 6522 2078  hema-instance" x
│ +000003c0: 7369 3a73 6368 656d 614c 6f63 6174 696f  si:schemaLocatio
│ +000003d0: 6e3d 2268 7474 703a 2f2f 6d61 7665 6e2e  n="http://maven.
│ +000003e0: 6170 6163 6865 2e6f 7267 2f50 4f4d 2f34  apache.org/POM/4
│ +000003f0: 2e30 2e30 2068 7474 703a 2f2f 6d61 7665  .0.0 http://mave
│ +00000400: 6e2e 6170 6163 6865 2e6f 7267 2f6d 6176  n.apache.org/mav
│ +00000410: 656e 2d76 345f 305f 302e 7873 6422 3e0d  en-v4_0_0.xsd">.
│ +00000420: 0a0d 0a20 2020 203c 6d6f 6465 6c56 6572  ...    <modelVer
│ +00000430: 7369 6f6e 3e34 2e30 2e30 3c2f 6d6f 6465  sion>4.0.0</mode
│ +00000440: 6c56 6572 7369 6f6e 3e0d 0a20 2020 203c  lVersion>..    <
│ +00000450: 7061 7265 6e74 3e0d 0a20 2020 2020 2020  parent>..       
│ +00000460: 203c 6772 6f75 7049 643e 6f72 672e 6170   <groupId>org.ap
│ +00000470: 6163 6865 2e73 6c69 6e67 3c2f 6772 6f75  ache.sling</grou
│ +00000480: 7049 643e 0d0a 2020 2020 2020 2020 3c61  pId>..        <a
│ +00000490: 7274 6966 6163 7449 643e 736c 696e 672d  rtifactId>sling-
│ +000004a0: 6275 6e64 6c65 2d70 6172 656e 743c 2f61  bundle-parent</a
│ +000004b0: 7274 6966 6163 7449 643e 0d0a 2020 2020  rtifactId>..    
│ +000004c0: 2020 2020 3c76 6572 7369 6f6e 3e34 373c      <version>47<
│ +000004d0: 2f76 6572 7369 6f6e 3e0d 0a20 2020 2020  /version>..     
│ +000004e0: 2020 203c 7265 6c61 7469 7665 5061 7468     <relativePath
│ +000004f0: 202f 3e0d 0a20 2020 203c 2f70 6172 656e   />..    </paren
│ +00000500: 743e 0d0a 0d0a 2020 2020 3c61 7274 6966  t>....    <artif
│ +00000510: 6163 7449 643e 6f72 672e 6170 6163 6865  actId>org.apache
│ +00000520: 2e73 6c69 6e67 2e74 6573 7469 6e67 2e72  .sling.testing.r
│ +00000530: 6573 6f75 7263 6572 6573 6f6c 7665 722d  esourceresolver-
│ +00000540: 6d6f 636b 3c2f 6172 7469 6661 6374 4964  mock</artifactId
│ +00000550: 3e0d 0a20 2020 203c 7665 7273 696f 6e3e  >..    <version>
│ +00000560: 312e 332e 303c 2f76 6572 7369 6f6e 3e0d  1.3.0</version>.
│ +00000570: 0a0d 0a20 2020 203c 6e61 6d65 3e41 7061  ...    <name>Apa
│ +00000580: 6368 6520 536c 696e 6720 5465 7374 696e  che Sling Testin
│ +00000590: 6720 5265 736f 7572 6365 2052 6573 6f6c  g Resource Resol
│ +000005a0: 7665 7220 4d6f 636b 3c2f 6e61 6d65 3e0d  ver Mock</name>.
│ +000005b0: 0a20 2020 203c 6465 7363 7269 7074 696f  .    <descriptio
│ +000005c0: 6e3e 0d0a 2020 2020 2020 2020 4d6f 636b  n>..        Mock
│ +000005d0: 2066 6f72 2074 6865 2072 6573 6f75 7263   for the resourc
│ +000005e0: 6520 7265 736f 6c76 6572 202f 2066 6163  e resolver / fac
│ +000005f0: 746f 7279 2066 6f72 2065 6173 6965 7220  tory for easier 
│ +00000600: 7465 7374 696e 672e 0d0a 2020 2020 3c2f  testing...    </
│ +00000610: 6465 7363 7269 7074 696f 6e3e 0d0a 0d0a  description>....
│ +00000620: 2020 2020 3c73 636d 3e0d 0a20 2020 2020      <scm>..     
│ +00000630: 2020 203c 636f 6e6e 6563 7469 6f6e 3e73     <connection>s
│ +00000640: 636d 3a67 6974 3a68 7474 7073 3a2f 2f67  cm:git:https://g
│ +00000650: 6974 626f 782e 6170 6163 6865 2e6f 7267  itbox.apache.org
│ +00000660: 2f72 6570 6f73 2f61 7366 2f73 6c69 6e67  /repos/asf/sling
│ +00000670: 2d6f 7267 2d61 7061 6368 652d 736c 696e  -org-apache-slin
│ +00000680: 672d 7465 7374 696e 672d 7265 736f 7572  g-testing-resour
│ +00000690: 6365 7265 736f 6c76 6572 2d6d 6f63 6b2e  ceresolver-mock.
│ +000006a0: 6769 743c 2f63 6f6e 6e65 6374 696f 6e3e  git</connection>
│ +000006b0: 0d0a 2020 2020 2020 2020 3c64 6576 656c  ..        <devel
│ +000006c0: 6f70 6572 436f 6e6e 6563 7469 6f6e 3e73  operConnection>s
│ +000006d0: 636d 3a67 6974 3a68 7474 7073 3a2f 2f67  cm:git:https://g
│ +000006e0: 6974 626f 782e 6170 6163 6865 2e6f 7267  itbox.apache.org
│ +000006f0: 2f72 6570 6f73 2f61 7366 2f73 6c69 6e67  /repos/asf/sling
│ +00000700: 2d6f 7267 2d61 7061 6368 652d 736c 696e  -org-apache-slin
│ +00000710: 672d 7465 7374 696e 672d 7265 736f 7572  g-testing-resour
│ +00000720: 6365 7265 736f 6c76 6572 2d6d 6f63 6b2e  ceresolver-mock.
│ +00000730: 6769 743c 2f64 6576 656c 6f70 6572 436f  git</developerCo
│ +00000740: 6e6e 6563 7469 6f6e 3e0d 0a20 2020 2020  nnection>..     
│ +00000750: 2020 203c 7572 6c3e 6874 7470 733a 2f2f     <url>https://
│ +00000760: 6769 7462 6f78 2e61 7061 6368 652e 6f72  gitbox.apache.or
│ +00000770: 672f 7265 706f 732f 6173 663f 703d 736c  g/repos/asf?p=sl
│ +00000780: 696e 672d 6f72 672d 6170 6163 6865 2d73  ing-org-apache-s
│ +00000790: 6c69 6e67 2d74 6573 7469 6e67 2d72 6573  ling-testing-res
│ +000007a0: 6f75 7263 6572 6573 6f6c 7665 722d 6d6f  ourceresolver-mo
│ +000007b0: 636b 2e67 6974 3c2f 7572 6c3e 0d0a 2020  ck.git</url>..  
│ +000007c0: 2020 2020 2020 3c74 6167 3e6f 7267 2e61        <tag>org.a
│ +000007d0: 7061 6368 652e 736c 696e 672e 7465 7374  pache.sling.test
│ +000007e0: 696e 672e 7265 736f 7572 6365 7265 736f  ing.resourcereso
│ +000007f0: 6c76 6572 2d6d 6f63 6b2d 312e 332e 303c  lver-mock-1.3.0<
│ +00000800: 2f74 6167 3e0d 0a20 2020 203c 2f73 636d  /tag>..    </scm
│ +00000810: 3e0d 0a0d 0a20 2020 203c 7072 6f70 6572  >....    <proper
│ +00000820: 7469 6573 3e0d 0a20 2020 2020 2020 203c  ties>..        <
│ +00000830: 7072 6f6a 6563 742e 6275 696c 642e 6f75  project.build.ou
│ +00000840: 7470 7574 5469 6d65 7374 616d 703e 3230  tputTimestamp>20
│ +00000850: 3232 2d30 352d 3035 5431 363a 3231 3a32  22-05-05T16:21:2
│ +00000860: 355a 3c2f 7072 6f6a 6563 742e 6275 696c  5Z</project.buil
│ +00000870: 642e 6f75 7470 7574 5469 6d65 7374 616d  d.outputTimestam
│ +00000880: 703e 0d0a 2020 2020 3c2f 7072 6f70 6572  p>..    </proper
│ +00000890: 7469 6573 3e0d 0a0d 0a20 2020 203c 7265  ties>....    <re
│ +000008a0: 706f 7274 696e 673e 0d0a 2020 2020 2020  porting>..      
│ +000008b0: 2020 3c70 6c75 6769 6e73 3e0d 0a20 2020    <plugins>..   
│ +000008c0: 2020 2020 2020 2020 203c 706c 7567 696e           <plugin
│ +000008d0: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
│ +000008e0: 2020 203c 6772 6f75 7049 643e 6f72 672e     <groupId>org.
│ +000008f0: 6170 6163 6865 2e6d 6176 656e 2e70 6c75  apache.maven.plu
│ +00000900: 6769 6e73 3c2f 6772 6f75 7049 643e 0d0a  gins</groupId>..
│ +00000910: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00000920: 3c61 7274 6966 6163 7449 643e 6d61 7665  <artifactId>mave
│ +00000930: 6e2d 6a61 7661 646f 632d 706c 7567 696e  n-javadoc-plugin
│ +00000940: 3c2f 6172 7469 6661 6374 4964 3e0d 0a20  </artifactId>.. 
│ +00000950: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ +00000960: 636f 6e66 6967 7572 6174 696f 6e3e 0d0a  configuration>..
│ +00000970: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00000980: 2020 2020 3c65 7863 6c75 6465 5061 636b      <excludePack
│ +00000990: 6167 654e 616d 6573 3e0d 0a20 2020 2020  ageNames>..     
│ +000009a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +000009b0: 2020 206f 7267 2e61 7061 6368 652e 736c     org.apache.sl
│ +000009c0: 696e 672e 7465 7374 696e 672e 7265 736f  ing.testing.reso
│ +000009d0: 7572 6365 7265 736f 6c76 6572 0d0a 2020  urceresolver..  
│ +000009e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +000009f0: 2020 3c2f 6578 636c 7564 6550 6163 6b61    </excludePacka
│ +00000a00: 6765 4e61 6d65 733e 0d0a 2020 2020 2020  geNames>..      
│ +00000a10: 2020 2020 2020 2020 2020 3c2f 636f 6e66            </conf
│ +00000a20: 6967 7572 6174 696f 6e3e 0d0a 2020 2020  iguration>..    
│ +00000a30: 2020 2020 2020 2020 3c2f 706c 7567 696e          </plugin
│ +00000a40: 3e0d 0a20 2020 2020 2020 203c 2f70 6c75  >..        </plu
│ +00000a50: 6769 6e73 3e0d 0a20 2020 203c 2f72 6570  gins>..    </rep
│ +00000a60: 6f72 7469 6e67 3e0d 0a20 2020 203c 6465  orting>..    <de
│ +00000a70: 7065 6e64 656e 6369 6573 3e0d 0a20 2020  pendencies>..   
│ +00000a80: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +00000a90: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00000aa0: 6772 6f75 7049 643e 6f72 672e 6f73 6769  groupId>org.osgi
│ +00000ab0: 3c2f 6772 6f75 7049 643e 0d0a 2020 2020  </groupId>..    
│ +00000ac0: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
│ +00000ad0: 7449 643e 6f72 672e 6f73 6769 2e61 6e6e  tId>org.osgi.ann
│ +00000ae0: 6f74 6174 696f 6e2e 7665 7273 696f 6e69  otation.versioni
│ +00000af0: 6e67 3c2f 6172 7469 6661 6374 4964 3e0d  ng</artifactId>.
│ +00000b00: 0a20 2020 2020 2020 2020 2020 203c 7363  .            <sc
│ +00000b10: 6f70 653e 7072 6f76 6964 6564 3c2f 7363  ope>provided</sc
│ +00000b20: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
│ +00000b30: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
│ +00000b40: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +00000b50: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00000b60: 6772 6f75 7049 643e 6f72 672e 6a65 7462  groupId>org.jetb
│ +00000b70: 7261 696e 733c 2f67 726f 7570 4964 3e0d  rains</groupId>.
│ +00000b80: 0a20 2020 2020 2020 2020 2020 203c 6172  .            <ar
│ +00000b90: 7469 6661 6374 4964 3e61 6e6e 6f74 6174  tifactId>annotat
│ +00000ba0: 696f 6e73 3c2f 6172 7469 6661 6374 4964  ions</artifactId
│ +00000bb0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00000bc0: 7363 6f70 653e 7072 6f76 6964 6564 3c2f  scope>provided</
│ +00000bd0: 7363 6f70 653e 0d0a 2020 2020 2020 2020  scope>..        
│ +00000be0: 3c2f 6465 7065 6e64 656e 6379 3e0d 0a20  </dependency>.. 
│ +00000bf0: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
│ +00000c00: 6379 3e0d 0a20 2020 2020 2020 2020 2020  cy>..           
│ +00000c10: 203c 6772 6f75 7049 643e 6a61 7661 782e   <groupId>javax.
│ +00000c20: 7365 7276 6c65 743c 2f67 726f 7570 4964  servlet</groupId
│ +00000c30: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00000c40: 6172 7469 6661 6374 4964 3e6a 6176 6178  artifactId>javax
│ +00000c50: 2e73 6572 766c 6574 2d61 7069 3c2f 6172  .servlet-api</ar
│ +00000c60: 7469 6661 6374 4964 3e0d 0a20 2020 2020  tifactId>..     
│ +00000c70: 2020 2020 2020 203c 7363 6f70 653e 7072         <scope>pr
│ +00000c80: 6f76 6964 6564 3c2f 7363 6f70 653e 0d0a  ovided</scope>..
│ +00000c90: 2020 2020 2020 2020 3c2f 6465 7065 6e64          </depend
│ +00000ca0: 656e 6379 3e0d 0a0d 0a20 2020 2020 2020  ency>....       
│ +00000cb0: 203c 6465 7065 6e64 656e 6379 3e0d 0a20   <dependency>.. 
│ +00000cc0: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
│ +00000cd0: 7049 643e 6f72 672e 6170 6163 6865 2e73  pId>org.apache.s
│ +00000ce0: 6c69 6e67 3c2f 6772 6f75 7049 643e 0d0a  ling</groupId>..
│ +00000cf0: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
│ +00000d00: 6966 6163 7449 643e 6f72 672e 6170 6163  ifactId>org.apac
│ +00000d10: 6865 2e73 6c69 6e67 2e61 7069 3c2f 6172  he.sling.api</ar
│ +00000d20: 7469 6661 6374 4964 3e0d 0a20 2020 2020  tifactId>..     
│ +00000d30: 2020 2020 2020 203c 7363 6f70 653e 7072         <scope>pr
│ +00000d40: 6f76 6964 6564 3c2f 7363 6f70 653e 0d0a  ovided</scope>..
│ +00000d50: 2020 2020 2020 2020 3c2f 6465 7065 6e64          </depend
│ +00000d60: 656e 6379 3e0d 0a20 2020 2020 2020 203c  ency>..        <
│ +00000d70: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
│ +00000d80: 2020 2020 2020 2020 203c 6772 6f75 7049           <groupI
│ +00000d90: 643e 6f72 672e 6f73 6769 3c2f 6772 6f75  d>org.osgi</grou
│ +00000da0: 7049 643e 0d0a 2020 2020 2020 2020 2020  pId>..          
│ +00000db0: 2020 3c61 7274 6966 6163 7449 643e 6f72    <artifactId>or
│ +00000dc0: 672e 6f73 6769 2e73 6572 7669 6365 2e65  g.osgi.service.e
│ +00000dd0: 7665 6e74 3c2f 6172 7469 6661 6374 4964  vent</artifactId
│ +00000de0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00000df0: 7363 6f70 653e 7072 6f76 6964 6564 3c2f  scope>provided</
│ +00000e00: 7363 6f70 653e 0d0a 2020 2020 2020 2020  scope>..        
│ +00000e10: 3c2f 6465 7065 6e64 656e 6379 3e0d 0a20  </dependency>.. 
│ +00000e20: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
│ +00000e30: 6379 3e0d 0a20 2020 2020 2020 2020 2020  cy>..           
│ +00000e40: 203c 6772 6f75 7049 643e 6f72 672e 6f73   <groupId>org.os
│ +00000e50: 6769 3c2f 6772 6f75 7049 643e 0d0a 2020  gi</groupId>..  
│ +00000e60: 2020 2020 2020 2020 2020 3c61 7274 6966            <artif
│ +00000e70: 6163 7449 643e 6f72 672e 6f73 6769 2e75  actId>org.osgi.u
│ +00000e80: 7469 6c2e 636f 6e76 6572 7465 723c 2f61  til.converter</a
│ +00000e90: 7274 6966 6163 7449 643e 0d0a 2020 2020  rtifactId>..    
│ +00000ea0: 2020 2020 2020 2020 3c73 636f 7065 3e70          <scope>p
│ +00000eb0: 726f 7669 6465 643c 2f73 636f 7065 3e0d  rovided</scope>.
│ +00000ec0: 0a20 2020 2020 2020 203c 2f64 6570 656e  .        </depen
│ +00000ed0: 6465 6e63 793e 0d0a 2020 2020 2020 2020  dency>..        
│ +00000ee0: 3c64 6570 656e 6465 6e63 793e 0d0a 2020  <dependency>..  
│ +00000ef0: 2020 2020 2020 2020 2020 3c67 726f 7570            <group
│ +00000f00: 4964 3e6f 7267 2e6f 7367 693c 2f67 726f  Id>org.osgi</gro
│ +00000f10: 7570 4964 3e0d 0a20 2020 2020 2020 2020  upId>..         
│ +00000f20: 2020 203c 6172 7469 6661 6374 4964 3e6f     <artifactId>o
│ +00000f30: 7267 2e6f 7367 692e 7574 696c 2e66 756e  rg.osgi.util.fun
│ +00000f40: 6374 696f 6e3c 2f61 7274 6966 6163 7449  ction</artifactI
│ +00000f50: 643e 0d0a 2020 2020 2020 2020 2020 2020  d>..            
│ +00000f60: 3c73 636f 7065 3e70 726f 7669 6465 643c  <scope>provided<
│ +00000f70: 2f73 636f 7065 3e0d 0a20 2020 2020 2020  /scope>..       
│ +00000f80: 203c 2f64 6570 656e 6465 6e63 793e 0d0a   </dependency>..
│ +00000f90: 2020 2020 2020 2020 3c64 6570 656e 6465          <depende
│ +00000fa0: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
│ +00000fb0: 2020 3c67 726f 7570 4964 3e63 6f6d 6d6f    <groupId>commo
│ +00000fc0: 6e73 2d69 6f3c 2f67 726f 7570 4964 3e0d  ns-io</groupId>.
│ +00000fd0: 0a20 2020 2020 2020 2020 2020 203c 6172  .            <ar
│ +00000fe0: 7469 6661 6374 4964 3e63 6f6d 6d6f 6e73  tifactId>commons
│ +00000ff0: 2d69 6f3c 2f61 7274 6966 6163 7449 643e  -io</artifactId>
│ +00001000: 0d0a 2020 2020 2020 2020 2020 2020 3c73  ..            <s
│ +00001010: 636f 7065 3e63 6f6d 7069 6c65 3c2f 7363  cope>compile</sc
│ +00001020: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
│ +00001030: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
│ +00001040: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +00001050: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00001060: 6772 6f75 7049 643e 6f72 672e 6170 6163  groupId>org.apac
│ +00001070: 6865 2e6a 6163 6b72 6162 6269 743c 2f67  he.jackrabbit</g
│ +00001080: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
│ +00001090: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
│ +000010a0: 3e6a 6163 6b72 6162 6269 742d 6a63 722d  >jackrabbit-jcr-
│ +000010b0: 636f 6d6d 6f6e 733c 2f61 7274 6966 6163  commons</artifac
│ +000010c0: 7449 643e 0d0a 2020 2020 2020 2020 2020  tId>..          
│ +000010d0: 2020 3c73 636f 7065 3e63 6f6d 7069 6c65    <scope>compile
│ +000010e0: 3c2f 7363 6f70 653e 0d0a 2020 2020 2020  </scope>..      
│ +000010f0: 2020 3c2f 6465 7065 6e64 656e 6379 3e0d    </dependency>.
│ +00001100: 0a0d 0a20 2020 2020 2020 203c 212d 2d20  ...        <!-- 
│ +00001110: 7465 7374 696e 6720 2d2d 3e0d 0a20 2020  testing -->..   
│ +00001120: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +00001130: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00001140: 6772 6f75 7049 643e 6a75 6e69 743c 2f67  groupId>junit</g
│ +00001150: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
│ +00001160: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
│ +00001170: 3e6a 756e 6974 3c2f 6172 7469 6661 6374  >junit</artifact
│ +00001180: 4964 3e0d 0a20 2020 2020 2020 2020 2020  Id>..           
│ +00001190: 203c 7363 6f70 653e 7465 7374 3c2f 7363   <scope>test</sc
│ +000011a0: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
│ +000011b0: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
│ +000011c0: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +000011d0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +000011e0: 6772 6f75 7049 643e 636f 6d2e 676f 6f67  groupId>com.goog
│ +000011f0: 6c65 2e67 7561 7661 3c2f 6772 6f75 7049  le.guava</groupI
│ +00001200: 643e 0d0a 2020 2020 2020 2020 2020 2020  d>..            
│ +00001210: 3c61 7274 6966 6163 7449 643e 6775 6176  <artifactId>guav
│ +00001220: 613c 2f61 7274 6966 6163 7449 643e 0d0a  a</artifactId>..
│ +00001230: 2020 2020 2020 2020 2020 2020 3c76 6572              <ver
│ +00001240: 7369 6f6e 3e31 352e 303c 2f76 6572 7369  sion>15.0</versi
│ +00001250: 6f6e 3e0d 0a20 2020 2020 2020 2020 2020  on>..           
│ +00001260: 203c 7363 6f70 653e 7465 7374 3c2f 7363   <scope>test</sc
│ +00001270: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
│ +00001280: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
│ +00001290: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +000012a0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +000012b0: 6772 6f75 7049 643e 6f72 672e 6d6f 636b  groupId>org.mock
│ +000012c0: 6974 6f3c 2f67 726f 7570 4964 3e0d 0a20  ito</groupId>.. 
│ +000012d0: 2020 2020 2020 2020 2020 203c 6172 7469             <arti
│ +000012e0: 6661 6374 4964 3e6d 6f63 6b69 746f 2d63  factId>mockito-c
│ +000012f0: 6f72 653c 2f61 7274 6966 6163 7449 643e  ore</artifactId>
│ +00001300: 0d0a 2020 2020 2020 2020 2020 2020 3c76  ..            <v
│ +00001310: 6572 7369 6f6e 3e34 2e35 2e31 3c2f 7665  ersion>4.5.1</ve
│ +00001320: 7273 696f 6e3e 0d0a 2020 2020 2020 2020  rsion>..        
│ +00001330: 2020 2020 3c73 636f 7065 3e74 6573 743c      <scope>test<
│ +00001340: 2f73 636f 7065 3e0d 0a20 2020 2020 2020  /scope>..       
│ +00001350: 203c 2f64 6570 656e 6465 6e63 793e 0d0a   </dependency>..
│ +00001360: 2020 2020 2020 2020 3c64 6570 656e 6465          <depende
│ +00001370: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
│ +00001380: 2020 3c67 726f 7570 4964 3e6f 7267 2e61    <groupId>org.a
│ +00001390: 7061 6368 652e 636f 6d6d 6f6e 733c 2f67  pache.commons</g
│ +000013a0: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
│ +000013b0: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
│ +000013c0: 3e63 6f6d 6d6f 6e73 2d6c 616e 6733 3c2f  >commons-lang3</
│ +000013d0: 6172 7469 6661 6374 4964 3e0d 0a20 2020  artifactId>..   
│ +000013e0: 2020 2020 2020 2020 203c 7665 7273 696f           <versio
│ +000013f0: 6e3e 332e 393c 2f76 6572 7369 6f6e 3e0d  n>3.9</version>.
│ +00001400: 0a20 2020 2020 2020 2020 2020 203c 7363  .            <sc
│ +00001410: 6f70 653e 7465 7374 3c2f 7363 6f70 653e  ope>test</scope>
│ +00001420: 0d0a 2020 2020 2020 2020 3c2f 6465 7065  ..        </depe
│ +00001430: 6e64 656e 6379 3e0d 0a20 2020 203c 2f64  ndency>..    </d
│ +00001440: 6570 656e 6465 6e63 6965 733e 0d0a 0d0a  ependencies>....
│ +00001450: 2020 2020 3c64 6570 656e 6465 6e63 794d      <dependencyM
│ +00001460: 616e 6167 656d 656e 743e 0d0a 2020 2020  anagement>..    
│ +00001470: 2020 2020 3c64 6570 656e 6465 6e63 6965      <dependencie
│ +00001480: 733e 0d0a 2020 2020 2020 2020 2020 2020  s>..            
│ +00001490: 3c64 6570 656e 6465 6e63 793e 0d0a 2020  <dependency>..  
│ +000014a0: 2020 2020 2020 2020 2020 2020 2020 3c67                <g
│ +000014b0: 726f 7570 4964 3e6f 7267 2e61 7061 6368  roupId>org.apach
│ +000014c0: 652e 736c 696e 673c 2f67 726f 7570 4964  e.sling</groupId
│ +000014d0: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
│ +000014e0: 2020 203c 6172 7469 6661 6374 4964 3e6f     <artifactId>o
│ +000014f0: 7267 2e61 7061 6368 652e 736c 696e 672e  rg.apache.sling.
│ +00001500: 6170 693c 2f61 7274 6966 6163 7449 643e  api</artifactId>
│ +00001510: 0d0a 2020 2020 2020 2020 2020 2020 2020  ..              
│ +00001520: 2020 3c76 6572 7369 6f6e 3e32 2e32 322e    <version>2.22.
│ +00001530: 303c 2f76 6572 7369 6f6e 3e0d 0a20 2020  0</version>..   
│ +00001540: 2020 2020 2020 2020 203c 2f64 6570 656e           </depen
│ +00001550: 6465 6e63 793e 0d0a 2020 2020 2020 2020  dency>..        
│ +00001560: 2020 2020 3c64 6570 656e 6465 6e63 793e      <dependency>
│ +00001570: 0d0a 2020 2020 2020 2020 2020 2020 2020  ..              
│ +00001580: 2020 3c67 726f 7570 4964 3e6f 7267 2e6f    <groupId>org.o
│ +00001590: 7367 693c 2f67 726f 7570 4964 3e0d 0a20  sgi</groupId>.. 
│ +000015a0: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ +000015b0: 6172 7469 6661 6374 4964 3e6f 7267 2e6f  artifactId>org.o
│ +000015c0: 7367 692e 7365 7276 6963 652e 6576 656e  sgi.service.even
│ +000015d0: 743c 2f61 7274 6966 6163 7449 643e 0d0a  t</artifactId>..
│ +000015e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +000015f0: 3c76 6572 7369 6f6e 3e31 2e34 2e30 3c2f  <version>1.4.0</
│ +00001600: 7665 7273 696f 6e3e 0d0a 2020 2020 2020  version>..      
│ +00001610: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ +00001620: 6379 3e0d 0a20 2020 2020 2020 2020 2020  cy>..           
│ +00001630: 203c 6465 7065 6e64 656e 6379 3e0d 0a20   <dependency>.. 
│ +00001640: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ +00001650: 6772 6f75 7049 643e 636f 6d6d 6f6e 732d  groupId>commons-
│ +00001660: 696f 3c2f 6772 6f75 7049 643e 0d0a 2020  io</groupId>..  
│ +00001670: 2020 2020 2020 2020 2020 2020 2020 3c61                <a
│ +00001680: 7274 6966 6163 7449 643e 636f 6d6d 6f6e  rtifactId>common
│ +00001690: 732d 696f 3c2f 6172 7469 6661 6374 4964  s-io</artifactId
│ +000016a0: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
│ +000016b0: 2020 203c 7665 7273 696f 6e3e 322e 363c     <version>2.6<
│ +000016c0: 2f76 6572 7369 6f6e 3e0d 0a20 2020 2020  /version>..     
│ +000016d0: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
│ +000016e0: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
│ +000016f0: 2020 3c64 6570 656e 6465 6e63 793e 0d0a    <dependency>..
│ +00001700: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00001710: 3c67 726f 7570 4964 3e6f 7267 2e61 7061  <groupId>org.apa
│ +00001720: 6368 652e 6a61 636b 7261 6262 6974 3c2f  che.jackrabbit</
│ +00001730: 6772 6f75 7049 643e 0d0a 2020 2020 2020  groupId>..      
│ +00001740: 2020 2020 2020 2020 2020 3c61 7274 6966            <artif
│ +00001750: 6163 7449 643e 6a61 636b 7261 6262 6974  actId>jackrabbit
│ +00001760: 2d6a 6372 2d63 6f6d 6d6f 6e73 3c2f 6172  -jcr-commons</ar
│ +00001770: 7469 6661 6374 4964 3e0d 0a20 2020 2020  tifactId>..     
│ +00001780: 2020 2020 2020 2020 2020 203c 7665 7273             <vers
│ +00001790: 696f 6e3e 322e 3230 2e31 3c2f 7665 7273  ion>2.20.1</vers
│ +000017a0: 696f 6e3e 0d0a 2020 2020 2020 2020 2020  ion>..          
│ +000017b0: 2020 3c2f 6465 7065 6e64 656e 6379 3e0d    </dependency>.
│ +000017c0: 0a20 2020 2020 2020 2020 2020 203c 6465  .            <de
│ +000017d0: 7065 6e64 656e 6379 3e0d 0a20 2020 2020  pendency>..     
│ +000017e0: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
│ +000017f0: 7049 643e 6f72 672e 6f73 6769 3c2f 6772  pId>org.osgi</gr
│ +00001800: 6f75 7049 643e 0d0a 2020 2020 2020 2020  oupId>..        
│ +00001810: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
│ +00001820: 7449 643e 6f72 672e 6f73 6769 2e75 7469  tId>org.osgi.uti
│ +00001830: 6c2e 636f 6e76 6572 7465 723c 2f61 7274  l.converter</art
│ +00001840: 6966 6163 7449 643e 0d0a 2020 2020 2020  ifactId>..      
│ +00001850: 2020 2020 2020 2020 2020 3c76 6572 7369            <versi
│ +00001860: 6f6e 3e31 2e30 2e30 3c2f 7665 7273 696f  on>1.0.0</versio
│ +00001870: 6e3e 0d0a 2020 2020 2020 2020 2020 2020  n>..            
│ +00001880: 3c2f 6465 7065 6e64 656e 6379 3e0d 0a20  </dependency>.. 
│ +00001890: 2020 2020 2020 2020 2020 203c 6465 7065             <depe
│ +000018a0: 6e64 656e 6379 3e0d 0a20 2020 2020 2020  ndency>..       
│ +000018b0: 2020 2020 2020 2020 203c 6772 6f75 7049           <groupI
│ +000018c0: 643e 6f72 672e 6f73 6769 3c2f 6772 6f75  d>org.osgi</grou
│ +000018d0: 7049 643e 0d0a 2020 2020 2020 2020 2020  pId>..          
│ +000018e0: 2020 2020 2020 3c61 7274 6966 6163 7449        <artifactI
│ +000018f0: 643e 6f72 672e 6f73 6769 2e75 7469 6c2e  d>org.osgi.util.
│ +00001900: 6675 6e63 7469 6f6e 3c2f 6172 7469 6661  function</artifa
│ +00001910: 6374 4964 3e0d 0a20 2020 2020 2020 2020  ctId>..         
│ +00001920: 2020 2020 2020 203c 7665 7273 696f 6e3e         <version>
│ +00001930: 312e 312e 303c 2f76 6572 7369 6f6e 3e0d  1.1.0</version>.
│ +00001940: 0a20 2020 2020 2020 2020 2020 203c 2f64  .            </d
│ +00001950: 6570 656e 6465 6e63 793e 0d0a 2020 2020  ependency>..    
│ +00001960: 2020 2020 3c2f 6465 7065 6e64 656e 6369      </dependenci
│ +00001970: 6573 3e0d 0a20 2020 203c 2f64 6570 656e  es>..    </depen
│ +00001980: 6465 6e63 794d 616e 6167 656d 656e 743e  dencyManagement>
│ +00001990: 0d0a 0d0a 2020 203c 7072 6f66 696c 6573  ....   <profiles
│ +000019a0: 3e0d 0a20 2020 2020 2020 203c 7072 6f66  >..        <prof
│ +000019b0: 696c 653e 0d0a 2020 2020 2020 2020 2020  ile>..          
│ +000019c0: 2020 3c69 643e 6c61 7465 7374 2d64 6570    <id>latest-dep
│ +000019d0: 656e 6465 6e63 792d 7665 7273 696f 6e73  endency-versions
│ +000019e0: 3c2f 6964 3e0d 0a20 2020 2020 2020 2020  </id>..         
│ +000019f0: 2020 203c 6163 7469 7661 7469 6f6e 3e0d     <activation>.
│ +00001a00: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
│ +00001a10: 203c 6163 7469 7665 4279 4465 6661 756c   <activeByDefaul
│ +00001a20: 743e 6661 6c73 653c 2f61 6374 6976 6542  t>false</activeB
│ +00001a30: 7944 6566 6175 6c74 3e0d 0a20 2020 2020  yDefault>..     
│ +00001a40: 2020 2020 2020 203c 2f61 6374 6976 6174         </activat
│ +00001a50: 696f 6e3e 0d0a 2020 2020 2020 2020 2020  ion>..          
│ +00001a60: 2020 3c64 6570 656e 6465 6e63 794d 616e    <dependencyMan
│ +00001a70: 6167 656d 656e 743e 0d0a 2020 2020 2020  agement>..      
│ +00001a80: 2020 2020 2020 2020 2020 3c64 6570 656e            <depen
│ +00001a90: 6465 6e63 6965 733e 0d0a 2020 2020 2020  dencies>..      
│ +00001aa0: 2020 2020 2020 2020 2020 2020 2020 3c64                <d
│ +00001ab0: 6570 656e 6465 6e63 793e 0d0a 2020 2020  ependency>..    
│  00001ac0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001ad0: 203c 2f64 6570 656e 6465 6e63 793e 0a20   </dependency>. 
│ -00001ae0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001af0: 2020 203c 6465 7065 6e64 656e 6379 3e0a     <dependency>.
│ +00001ad0: 2020 2020 3c67 726f 7570 4964 3e6f 7267      <groupId>org
│ +00001ae0: 2e61 7061 6368 652e 736c 696e 673c 2f67  .apache.sling</g
│ +00001af0: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
│  00001b00: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001b10: 2020 2020 2020 2020 3c67 726f 7570 4964          <groupId
│ -00001b20: 3e6f 7267 2e61 7061 6368 652e 6a61 636b  >org.apache.jack
│ -00001b30: 7261 6262 6974 3c2f 6772 6f75 7049 643e  rabbit</groupId>
│ -00001b40: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
│ -00001b50: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
│ -00001b60: 6374 4964 3e6a 6163 6b72 6162 6269 742d  ctId>jackrabbit-
│ -00001b70: 6a63 722d 636f 6d6d 6f6e 733c 2f61 7274  jcr-commons</art
│ -00001b80: 6966 6163 7449 643e 0a20 2020 2020 2020  ifactId>.       
│ -00001b90: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001ba0: 203c 7665 7273 696f 6e3e 322e 3231 2e39   <version>2.21.9
│ -00001bb0: 3c2f 7665 7273 696f 6e3e 0a20 2020 2020  </version>.     
│ -00001bc0: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ -00001bd0: 2f64 6570 656e 6465 6e63 793e 0a20 2020  /dependency>.   
│ -00001be0: 2020 2020 2020 2020 2020 2020 203c 2f64               </d
│ -00001bf0: 6570 656e 6465 6e63 6965 733e 0a20 2020  ependencies>.   
│ -00001c00: 2020 2020 2020 2020 203c 2f64 6570 656e           </depen
│ -00001c10: 6465 6e63 794d 616e 6167 656d 656e 743e  dencyManagement>
│ -00001c20: 0a20 2020 2020 2020 203c 2f70 726f 6669  .        </profi
│ -00001c30: 6c65 3e0a 2020 2020 3c2f 7072 6f66 696c  le>.    </profil
│ -00001c40: 6573 3e0a 0a3c 2f70 726f 6a65 6374 3e0a  es>..</project>.
│ +00001b10: 203c 6172 7469 6661 6374 4964 3e6f 7267   <artifactId>org
│ +00001b20: 2e61 7061 6368 652e 736c 696e 672e 6170  .apache.sling.ap
│ +00001b30: 693c 2f61 7274 6966 6163 7449 643e 0d0a  i</artifactId>..
│ +00001b40: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00001b50: 2020 2020 2020 2020 3c76 6572 7369 6f6e          <version
│ +00001b60: 3e32 2e32 352e 303c 2f76 6572 7369 6f6e  >2.25.0</version
│ +00001b70: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
│ +00001b80: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
│ +00001b90: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
│ +00001ba0: 2020 2020 2020 2020 2020 3c64 6570 656e            <depen
│ +00001bb0: 6465 6e63 793e 0d0a 2020 2020 2020 2020  dency>..        
│ +00001bc0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00001bd0: 3c67 726f 7570 4964 3e6f 7267 2e61 7061  <groupId>org.apa
│ +00001be0: 6368 652e 6a61 636b 7261 6262 6974 3c2f  che.jackrabbit</
│ +00001bf0: 6772 6f75 7049 643e 0d0a 2020 2020 2020  groupId>..      
│ +00001c00: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00001c10: 2020 3c61 7274 6966 6163 7449 643e 6a61    <artifactId>ja
│ +00001c20: 636b 7261 6262 6974 2d6a 6372 2d63 6f6d  ckrabbit-jcr-com
│ +00001c30: 6d6f 6e73 3c2f 6172 7469 6661 6374 4964  mons</artifactId
│ +00001c40: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
│ +00001c50: 2020 2020 2020 2020 2020 203c 7665 7273             <vers
│ +00001c60: 696f 6e3e 322e 3231 2e39 3c2f 7665 7273  ion>2.21.9</vers
│ +00001c70: 696f 6e3e 0d0a 2020 2020 2020 2020 2020  ion>..          
│ +00001c80: 2020 2020 2020 2020 2020 3c2f 6465 7065            </depe
│ +00001c90: 6e64 656e 6379 3e0d 0a20 2020 2020 2020  ndency>..       
│ +00001ca0: 2020 2020 2020 2020 203c 2f64 6570 656e           </depen
│ +00001cb0: 6465 6e63 6965 733e 0d0a 2020 2020 2020  dencies>..      
│ +00001cc0: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ +00001cd0: 6379 4d61 6e61 6765 6d65 6e74 3e0d 0a20  cyManagement>.. 
│ +00001ce0: 2020 2020 2020 203c 2f70 726f 6669 6c65         </profile
│ +00001cf0: 3e0d 0a20 2020 203c 2f70 726f 6669 6c65  >..    </profile
│ +00001d00: 733e 0d0a 0d0a 3c2f 7072 6f6a 6563 743e  s>....</project>
│ +00001d10: 0d0a                                     ..

3 / 4 target/reference/org.apache.sling.testing.resourceresolver-mock-1.3.0-source-release.zip target/org.apache.sling.testing.resourceresolver-mock-1.3.0-source-release.zip
--- target/reference/org.apache.sling.testing.resourceresolver-mock-1.3.0-source-release.zip
+++ target/org.apache.sling.testing.resourceresolver-mock-1.3.0-source-release.zip
├── zipinfo {}
│ @@ -1,8 +1,8 @@
│ -Zip file size: 55735 bytes, number of entries: 51
│ +Zip file size: 56073 bytes, number of entries: 51
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/
│ @@ -11,43 +11,43 @@
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/
│ --rw-r--r--  2.0 unx     1186 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/CODE_OF_CONDUCT.md
│ --rw-r--r--  2.0 unx     1147 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/CONTRIBUTING.md
│ --rw-r--r--  2.0 unx      833 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/Jenkinsfile
│ --rw-r--r--  2.0 unx    11358 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/LICENSE
│ --rw-r--r--  2.0 unx     2242 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/README.md
│ --rw-r--r--  2.0 unx     7248 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/pom.xml
│ --rw-r--r--  2.0 unx     2755 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/DateUtils.java
│ --rw-r--r--  2.0 unx     1380 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/DefaultMockResourceFactory.java
│ --rw-r--r--  2.0 unx     1468 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockFindResourcesHandler.java
│ --rw-r--r--  2.0 unx     4519 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockHelper.java
│ --rw-r--r--  2.0 unx     2582 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockPropertyResource.java
│ --rw-r--r--  2.0 unx     1448 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockQueryResourceHandler.java
│ --rw-r--r--  2.0 unx     5238 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockResource.java
│ --rw-r--r--  2.0 unx     1293 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceFactory.java
│ --rw-r--r--  2.0 unx    21467 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceResolver.java
│ --rw-r--r--  2.0 unx     5017 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceResolverFactory.java
│ --rw-r--r--  2.0 unx     2614 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceResolverFactoryOptions.java
│ --rw-r--r--  2.0 unx     3921 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockValueMap.java
│ --rw-r--r--  2.0 unx     2855 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/NamespaceMangler.java
│ --rw-r--r--  2.0 unx     3047 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/ReadonlyValueMapDecorator.java
│ --rw-r--r--  2.0 unx     2816 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/ResourceTypeUtil.java
│ --rw-r--r--  2.0 unx      963 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/package-info.java
│ --rw-r--r--  2.0 unx     5582 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/CreateDeleteResourceResolverTest.java
│ --rw-r--r--  2.0 unx     4821 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/FindQueryResourcesTest.java
│ --rw-r--r--  2.0 unx     6432 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/IsResourceTypeTest.java
│ --rw-r--r--  2.0 unx     1937 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/NamespaceManglerTest.java
│ --rw-r--r--  2.0 unx     2155 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/NamespaceManglingResourceResolverTest.java
│ --rw-r--r--  2.0 unx     3848 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/NtFileResourceTest.java
│ --rw-r--r--  2.0 unx     2459 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/PropertyMapTest.java
│ --rw-r--r--  2.0 unx     3442 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/ResourceResolverLoginTest.java
│ --rw-r--r--  2.0 unx     1748 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/RootResourceTypeTest.java
│ --rw-r--r--  2.0 unx    14535 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/SlingCrudResourceResolverTest.java
│ --rw-r--r--  2.0 unx     3827 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/ValueMapTest.java
│ +-rw-r--r--  2.0 unx     1208 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/CODE_OF_CONDUCT.md
│ +-rw-r--r--  2.0 unx     1171 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/CONTRIBUTING.md
│ +-rw-r--r--  2.0 unx      853 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/Jenkinsfile
│ +-rw-r--r--  2.0 unx    11560 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/LICENSE
│ +-rw-r--r--  2.0 unx     2254 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/README.md
│ +-rw-r--r--  2.0 unx     7442 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/pom.xml
│ +-rw-r--r--  2.0 unx     2854 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/DateUtils.java
│ +-rw-r--r--  2.0 unx     1417 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/DefaultMockResourceFactory.java
│ +-rw-r--r--  2.0 unx     1509 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockFindResourcesHandler.java
│ +-rw-r--r--  2.0 unx     4652 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockHelper.java
│ +-rw-r--r--  2.0 unx     2667 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockPropertyResource.java
│ +-rw-r--r--  2.0 unx     1489 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockQueryResourceHandler.java
│ +-rw-r--r--  2.0 unx     5386 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockResource.java
│ +-rw-r--r--  2.0 unx     1327 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceFactory.java
│ +-rw-r--r--  2.0 unx    22028 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceResolver.java
│ +-rw-r--r--  2.0 unx     5154 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceResolverFactory.java
│ +-rw-r--r--  2.0 unx     2694 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceResolverFactoryOptions.java
│ +-rw-r--r--  2.0 unx     4033 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockValueMap.java
│ +-rw-r--r--  2.0 unx     2935 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/NamespaceMangler.java
│ +-rw-r--r--  2.0 unx     3160 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/ReadonlyValueMapDecorator.java
│ +-rw-r--r--  2.0 unx     2878 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/ResourceTypeUtil.java
│ +-rw-r--r--  2.0 unx      986 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/package-info.java
│ +-rw-r--r--  2.0 unx     5720 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/CreateDeleteResourceResolverTest.java
│ +-rw-r--r--  2.0 unx     4937 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/FindQueryResourcesTest.java
│ +-rw-r--r--  2.0 unx     6594 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/IsResourceTypeTest.java
│ +-rw-r--r--  2.0 unx     1988 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/NamespaceManglerTest.java
│ +-rw-r--r--  2.0 unx     2212 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/NamespaceManglingResourceResolverTest.java
│ +-rw-r--r--  2.0 unx     3945 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/NtFileResourceTest.java
│ +-rw-r--r--  2.0 unx     2524 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/PropertyMapTest.java
│ +-rw-r--r--  2.0 unx     3534 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/ResourceResolverLoginTest.java
│ +-rw-r--r--  2.0 unx     1800 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/RootResourceTypeTest.java
│ +-rw-r--r--  2.0 unx    14858 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/SlingCrudResourceResolverTest.java
│ +-rw-r--r--  2.0 unx     3935 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/ValueMapTest.java
│  -rw-r--r--  2.0 unx      783 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/DEPENDENCIES
│  -rw-r--r--  2.0 unx      298 b- defN 22-May-05 16:21 org.apache.sling.testing.resourceresolver-mock-1.3.0/NOTICE
│ -51 files, 139264 bytes uncompressed, 41083 bytes compressed:  70.5%
│ +51 files, 142785 bytes uncompressed, 41421 bytes compressed:  71.0%
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/CODE_OF_CONDUCT.md
│ @@ -1,22 +1,22 @@
│ -<!--/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
│ -  ~ Licensed to the Apache Software Foundation (ASF) under one
│ -  ~ or more contributor license agreements.  See the NOTICE file
│ -  ~ distributed with this work for additional information
│ -  ~ regarding copyright ownership.  The ASF licenses this file
│ -  ~ to you under the Apache License, Version 2.0 (the
│ -  ~ "License"); you may not use this file except in compliance
│ -  ~ with the License.  You may obtain a copy of the License at
│ -  ~
│ -  ~   http://www.apache.org/licenses/LICENSE-2.0
│ -  ~
│ -  ~ Unless required by applicable law or agreed to in writing,
│ -  ~ software distributed under the License is distributed on an
│ -  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ -  ~ KIND, either express or implied.  See the License for the
│ -  ~ specific language governing permissions and limitations
│ -  ~ under the License.
│ -  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/-->
│ -Apache Software Foundation Code of Conduct
│ -====
│ -
│ -Being an Apache project, Apache Sling adheres to the Apache Software Foundation's [Code of Conduct](https://www.apache.org/foundation/policies/conduct.html).
│ +<!--/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
│ +  ~ Licensed to the Apache Software Foundation (ASF) under one
│ +  ~ or more contributor license agreements.  See the NOTICE file
│ +  ~ distributed with this work for additional information
│ +  ~ regarding copyright ownership.  The ASF licenses this file
│ +  ~ to you under the Apache License, Version 2.0 (the
│ +  ~ "License"); you may not use this file except in compliance
│ +  ~ with the License.  You may obtain a copy of the License at
│ +  ~
│ +  ~   http://www.apache.org/licenses/LICENSE-2.0
│ +  ~
│ +  ~ Unless required by applicable law or agreed to in writing,
│ +  ~ software distributed under the License is distributed on an
│ +  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ +  ~ KIND, either express or implied.  See the License for the
│ +  ~ specific language governing permissions and limitations
│ +  ~ under the License.
│ +  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/-->
│ +Apache Software Foundation Code of Conduct
│ +====
│ +
│ +Being an Apache project, Apache Sling adheres to the Apache Software Foundation's [Code of Conduct](https://www.apache.org/foundation/policies/conduct.html).
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/CONTRIBUTING.md
│ @@ -1,24 +1,24 @@
│ -<!--/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
│ -  ~ Licensed to the Apache Software Foundation (ASF) under one
│ -  ~ or more contributor license agreements.  See the NOTICE file
│ -  ~ distributed with this work for additional information
│ -  ~ regarding copyright ownership.  The ASF licenses this file
│ -  ~ to you under the Apache License, Version 2.0 (the
│ -  ~ "License"); you may not use this file except in compliance
│ -  ~ with the License.  You may obtain a copy of the License at
│ -  ~
│ -  ~   http://www.apache.org/licenses/LICENSE-2.0
│ -  ~
│ -  ~ Unless required by applicable law or agreed to in writing,
│ -  ~ software distributed under the License is distributed on an
│ -  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ -  ~ KIND, either express or implied.  See the License for the
│ -  ~ specific language governing permissions and limitations
│ -  ~ under the License.
│ -  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/-->
│ -Contributing
│ -====
│ -
│ -Thanks for choosing to contribute!
│ -
│ -You will find all the necessary details about how you can do this at https://sling.apache.org/contributing.html.
│ +<!--/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
│ +  ~ Licensed to the Apache Software Foundation (ASF) under one
│ +  ~ or more contributor license agreements.  See the NOTICE file
│ +  ~ distributed with this work for additional information
│ +  ~ regarding copyright ownership.  The ASF licenses this file
│ +  ~ to you under the Apache License, Version 2.0 (the
│ +  ~ "License"); you may not use this file except in compliance
│ +  ~ with the License.  You may obtain a copy of the License at
│ +  ~
│ +  ~   http://www.apache.org/licenses/LICENSE-2.0
│ +  ~
│ +  ~ Unless required by applicable law or agreed to in writing,
│ +  ~ software distributed under the License is distributed on an
│ +  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ +  ~ KIND, either express or implied.  See the License for the
│ +  ~ specific language governing permissions and limitations
│ +  ~ under the License.
│ +  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/-->
│ +Contributing
│ +====
│ +
│ +Thanks for choosing to contribute!
│ +
│ +You will find all the necessary details about how you can do this at https://sling.apache.org/contributing.html.
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/Jenkinsfile
│ @@ -1,20 +1,20 @@
│ -/**
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -
│ -slingOsgiBundleBuild()
│ +/**
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +
│ +slingOsgiBundleBuild()
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/LICENSE
│ @@ -1,202 +1,202 @@
│ -
│ -                                 Apache License
│ -                           Version 2.0, January 2004
│ -                        http://www.apache.org/licenses/
│ -
│ -   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
│ -
│ -   1. Definitions.
│ -
│ -      "License" shall mean the terms and conditions for use, reproduction,
│ -      and distribution as defined by Sections 1 through 9 of this document.
│ -
│ -      "Licensor" shall mean the copyright owner or entity authorized by
│ -      the copyright owner that is granting the License.
│ -
│ -      "Legal Entity" shall mean the union of the acting entity and all
│ -      other entities that control, are controlled by, or are under common
│ -      control with that entity. For the purposes of this definition,
│ -      "control" means (i) the power, direct or indirect, to cause the
│ -      direction or management of such entity, whether by contract or
│ -      otherwise, or (ii) ownership of fifty percent (50%) or more of the
│ -      outstanding shares, or (iii) beneficial ownership of such entity.
│ -
│ -      "You" (or "Your") shall mean an individual or Legal Entity
│ -      exercising permissions granted by this License.
│ -
│ -      "Source" form shall mean the preferred form for making modifications,
│ -      including but not limited to software source code, documentation
│ -      source, and configuration files.
│ -
│ -      "Object" form shall mean any form resulting from mechanical
│ -      transformation or translation of a Source form, including but
│ -      not limited to compiled object code, generated documentation,
│ -      and conversions to other media types.
│ -
│ -      "Work" shall mean the work of authorship, whether in Source or
│ -      Object form, made available under the License, as indicated by a
│ -      copyright notice that is included in or attached to the work
│ -      (an example is provided in the Appendix below).
│ -
│ -      "Derivative Works" shall mean any work, whether in Source or Object
│ -      form, that is based on (or derived from) the Work and for which the
│ -      editorial revisions, annotations, elaborations, or other modifications
│ -      represent, as a whole, an original work of authorship. For the purposes
│ -      of this License, Derivative Works shall not include works that remain
│ -      separable from, or merely link (or bind by name) to the interfaces of,
│ -      the Work and Derivative Works thereof.
│ -
│ -      "Contribution" shall mean any work of authorship, including
│ -      the original version of the Work and any modifications or additions
│ -      to that Work or Derivative Works thereof, that is intentionally
│ -      submitted to Licensor for inclusion in the Work by the copyright owner
│ -      or by an individual or Legal Entity authorized to submit on behalf of
│ -      the copyright owner. For the purposes of this definition, "submitted"
│ -      means any form of electronic, verbal, or written communication sent
│ -      to the Licensor or its representatives, including but not limited to
│ -      communication on electronic mailing lists, source code control systems,
│ -      and issue tracking systems that are managed by, or on behalf of, the
│ -      Licensor for the purpose of discussing and improving the Work, but
│ -      excluding communication that is conspicuously marked or otherwise
│ -      designated in writing by the copyright owner as "Not a Contribution."
│ -
│ -      "Contributor" shall mean Licensor and any individual or Legal Entity
│ -      on behalf of whom a Contribution has been received by Licensor and
│ -      subsequently incorporated within the Work.
│ -
│ -   2. Grant of Copyright License. Subject to the terms and conditions of
│ -      this License, each Contributor hereby grants to You a perpetual,
│ -      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
│ -      copyright license to reproduce, prepare Derivative Works of,
│ -      publicly display, publicly perform, sublicense, and distribute the
│ -      Work and such Derivative Works in Source or Object form.
│ -
│ -   3. Grant of Patent License. Subject to the terms and conditions of
│ -      this License, each Contributor hereby grants to You a perpetual,
│ -      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
│ -      (except as stated in this section) patent license to make, have made,
│ -      use, offer to sell, sell, import, and otherwise transfer the Work,
│ -      where such license applies only to those patent claims licensable
│ -      by such Contributor that are necessarily infringed by their
│ -      Contribution(s) alone or by combination of their Contribution(s)
│ -      with the Work to which such Contribution(s) was submitted. If You
│ -      institute patent litigation against any entity (including a
│ -      cross-claim or counterclaim in a lawsuit) alleging that the Work
│ -      or a Contribution incorporated within the Work constitutes direct
│ -      or contributory patent infringement, then any patent licenses
│ -      granted to You under this License for that Work shall terminate
│ -      as of the date such litigation is filed.
│ -
│ -   4. Redistribution. You may reproduce and distribute copies of the
│ -      Work or Derivative Works thereof in any medium, with or without
│ -      modifications, and in Source or Object form, provided that You
│ -      meet the following conditions:
│ -
│ -      (a) You must give any other recipients of the Work or
│ -          Derivative Works a copy of this License; and
│ -
│ -      (b) You must cause any modified files to carry prominent notices
│ -          stating that You changed the files; and
│ -
│ -      (c) You must retain, in the Source form of any Derivative Works
│ -          that You distribute, all copyright, patent, trademark, and
│ -          attribution notices from the Source form of the Work,
│ -          excluding those notices that do not pertain to any part of
│ -          the Derivative Works; and
│ -
│ -      (d) If the Work includes a "NOTICE" text file as part of its
│ -          distribution, then any Derivative Works that You distribute must
│ -          include a readable copy of the attribution notices contained
│ -          within such NOTICE file, excluding those notices that do not
│ -          pertain to any part of the Derivative Works, in at least one
│ -          of the following places: within a NOTICE text file distributed
│ -          as part of the Derivative Works; within the Source form or
│ -          documentation, if provided along with the Derivative Works; or,
│ -          within a display generated by the Derivative Works, if and
│ -          wherever such third-party notices normally appear. The contents
│ -          of the NOTICE file are for informational purposes only and
│ -          do not modify the License. You may add Your own attribution
│ -          notices within Derivative Works that You distribute, alongside
│ -          or as an addendum to the NOTICE text from the Work, provided
│ -          that such additional attribution notices cannot be construed
│ -          as modifying the License.
│ -
│ -      You may add Your own copyright statement to Your modifications and
│ -      may provide additional or different license terms and conditions
│ -      for use, reproduction, or distribution of Your modifications, or
│ -      for any such Derivative Works as a whole, provided Your use,
│ -      reproduction, and distribution of the Work otherwise complies with
│ -      the conditions stated in this License.
│ -
│ -   5. Submission of Contributions. Unless You explicitly state otherwise,
│ -      any Contribution intentionally submitted for inclusion in the Work
│ -      by You to the Licensor shall be under the terms and conditions of
│ -      this License, without any additional terms or conditions.
│ -      Notwithstanding the above, nothing herein shall supersede or modify
│ -      the terms of any separate license agreement you may have executed
│ -      with Licensor regarding such Contributions.
│ -
│ -   6. Trademarks. This License does not grant permission to use the trade
│ -      names, trademarks, service marks, or product names of the Licensor,
│ -      except as required for reasonable and customary use in describing the
│ -      origin of the Work and reproducing the content of the NOTICE file.
│ -
│ -   7. Disclaimer of Warranty. Unless required by applicable law or
│ -      agreed to in writing, Licensor provides the Work (and each
│ -      Contributor provides its Contributions) on an "AS IS" BASIS,
│ -      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
│ -      implied, including, without limitation, any warranties or conditions
│ -      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
│ -      PARTICULAR PURPOSE. You are solely responsible for determining the
│ -      appropriateness of using or redistributing the Work and assume any
│ -      risks associated with Your exercise of permissions under this License.
│ -
│ -   8. Limitation of Liability. In no event and under no legal theory,
│ -      whether in tort (including negligence), contract, or otherwise,
│ -      unless required by applicable law (such as deliberate and grossly
│ -      negligent acts) or agreed to in writing, shall any Contributor be
│ -      liable to You for damages, including any direct, indirect, special,
│ -      incidental, or consequential damages of any character arising as a
│ -      result of this License or out of the use or inability to use the
│ -      Work (including but not limited to damages for loss of goodwill,
│ -      work stoppage, computer failure or malfunction, or any and all
│ -      other commercial damages or losses), even if such Contributor
│ -      has been advised of the possibility of such damages.
│ -
│ -   9. Accepting Warranty or Additional Liability. While redistributing
│ -      the Work or Derivative Works thereof, You may choose to offer,
│ -      and charge a fee for, acceptance of support, warranty, indemnity,
│ -      or other liability obligations and/or rights consistent with this
│ -      License. However, in accepting such obligations, You may act only
│ -      on Your own behalf and on Your sole responsibility, not on behalf
│ -      of any other Contributor, and only if You agree to indemnify,
│ -      defend, and hold each Contributor harmless for any liability
│ -      incurred by, or claims asserted against, such Contributor by reason
│ -      of your accepting any such warranty or additional liability.
│ -
│ -   END OF TERMS AND CONDITIONS
│ -
│ -   APPENDIX: How to apply the Apache License to your work.
│ -
│ -      To apply the Apache License to your work, attach the following
│ -      boilerplate notice, with the fields enclosed by brackets "[]"
│ -      replaced with your own identifying information. (Don't include
│ -      the brackets!)  The text should be enclosed in the appropriate
│ -      comment syntax for the file format. We also recommend that a
│ -      file or class name and description of purpose be included on the
│ -      same "printed page" as the copyright notice for easier
│ -      identification within third-party archives.
│ -
│ -   Copyright [yyyy] [name of copyright owner]
│ -
│ -   Licensed under the Apache License, Version 2.0 (the "License");
│ -   you may not use this file except in compliance with the License.
│ -   You may obtain a copy of the License at
│ -
│ -       http://www.apache.org/licenses/LICENSE-2.0
│ -
│ -   Unless required by applicable law or agreed to in writing, software
│ -   distributed under the License is distributed on an "AS IS" BASIS,
│ -   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
│ -   See the License for the specific language governing permissions and
│ -   limitations under the License.
│ +
│ +                                 Apache License
│ +                           Version 2.0, January 2004
│ +                        http://www.apache.org/licenses/
│ +
│ +   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
│ +
│ +   1. Definitions.
│ +
│ +      "License" shall mean the terms and conditions for use, reproduction,
│ +      and distribution as defined by Sections 1 through 9 of this document.
│ +
│ +      "Licensor" shall mean the copyright owner or entity authorized by
│ +      the copyright owner that is granting the License.
│ +
│ +      "Legal Entity" shall mean the union of the acting entity and all
│ +      other entities that control, are controlled by, or are under common
│ +      control with that entity. For the purposes of this definition,
│ +      "control" means (i) the power, direct or indirect, to cause the
│ +      direction or management of such entity, whether by contract or
│ +      otherwise, or (ii) ownership of fifty percent (50%) or more of the
│ +      outstanding shares, or (iii) beneficial ownership of such entity.
│ +
│ +      "You" (or "Your") shall mean an individual or Legal Entity
│ +      exercising permissions granted by this License.
│ +
│ +      "Source" form shall mean the preferred form for making modifications,
│ +      including but not limited to software source code, documentation
│ +      source, and configuration files.
│ +
│ +      "Object" form shall mean any form resulting from mechanical
│ +      transformation or translation of a Source form, including but
│ +      not limited to compiled object code, generated documentation,
│ +      and conversions to other media types.
│ +
│ +      "Work" shall mean the work of authorship, whether in Source or
│ +      Object form, made available under the License, as indicated by a
│ +      copyright notice that is included in or attached to the work
│ +      (an example is provided in the Appendix below).
│ +
│ +      "Derivative Works" shall mean any work, whether in Source or Object
│ +      form, that is based on (or derived from) the Work and for which the
│ +      editorial revisions, annotations, elaborations, or other modifications
│ +      represent, as a whole, an original work of authorship. For the purposes
│ +      of this License, Derivative Works shall not include works that remain
│ +      separable from, or merely link (or bind by name) to the interfaces of,
│ +      the Work and Derivative Works thereof.
│ +
│ +      "Contribution" shall mean any work of authorship, including
│ +      the original version of the Work and any modifications or additions
│ +      to that Work or Derivative Works thereof, that is intentionally
│ +      submitted to Licensor for inclusion in the Work by the copyright owner
│ +      or by an individual or Legal Entity authorized to submit on behalf of
│ +      the copyright owner. For the purposes of this definition, "submitted"
│ +      means any form of electronic, verbal, or written communication sent
│ +      to the Licensor or its representatives, including but not limited to
│ +      communication on electronic mailing lists, source code control systems,
│ +      and issue tracking systems that are managed by, or on behalf of, the
│ +      Licensor for the purpose of discussing and improving the Work, but
│ +      excluding communication that is conspicuously marked or otherwise
│ +      designated in writing by the copyright owner as "Not a Contribution."
│ +
│ +      "Contributor" shall mean Licensor and any individual or Legal Entity
│ +      on behalf of whom a Contribution has been received by Licensor and
│ +      subsequently incorporated within the Work.
│ +
│ +   2. Grant of Copyright License. Subject to the terms and conditions of
│ +      this License, each Contributor hereby grants to You a perpetual,
│ +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
│ +      copyright license to reproduce, prepare Derivative Works of,
│ +      publicly display, publicly perform, sublicense, and distribute the
│ +      Work and such Derivative Works in Source or Object form.
│ +
│ +   3. Grant of Patent License. Subject to the terms and conditions of
│ +      this License, each Contributor hereby grants to You a perpetual,
│ +      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
│ +      (except as stated in this section) patent license to make, have made,
│ +      use, offer to sell, sell, import, and otherwise transfer the Work,
│ +      where such license applies only to those patent claims licensable
│ +      by such Contributor that are necessarily infringed by their
│ +      Contribution(s) alone or by combination of their Contribution(s)
│ +      with the Work to which such Contribution(s) was submitted. If You
│ +      institute patent litigation against any entity (including a
│ +      cross-claim or counterclaim in a lawsuit) alleging that the Work
│ +      or a Contribution incorporated within the Work constitutes direct
│ +      or contributory patent infringement, then any patent licenses
│ +      granted to You under this License for that Work shall terminate
│ +      as of the date such litigation is filed.
│ +
│ +   4. Redistribution. You may reproduce and distribute copies of the
│ +      Work or Derivative Works thereof in any medium, with or without
│ +      modifications, and in Source or Object form, provided that You
│ +      meet the following conditions:
│ +
│ +      (a) You must give any other recipients of the Work or
│ +          Derivative Works a copy of this License; and
│ +
│ +      (b) You must cause any modified files to carry prominent notices
│ +          stating that You changed the files; and
│ +
│ +      (c) You must retain, in the Source form of any Derivative Works
│ +          that You distribute, all copyright, patent, trademark, and
│ +          attribution notices from the Source form of the Work,
│ +          excluding those notices that do not pertain to any part of
│ +          the Derivative Works; and
│ +
│ +      (d) If the Work includes a "NOTICE" text file as part of its
│ +          distribution, then any Derivative Works that You distribute must
│ +          include a readable copy of the attribution notices contained
│ +          within such NOTICE file, excluding those notices that do not
│ +          pertain to any part of the Derivative Works, in at least one
│ +          of the following places: within a NOTICE text file distributed
│ +          as part of the Derivative Works; within the Source form or
│ +          documentation, if provided along with the Derivative Works; or,
│ +          within a display generated by the Derivative Works, if and
│ +          wherever such third-party notices normally appear. The contents
│ +          of the NOTICE file are for informational purposes only and
│ +          do not modify the License. You may add Your own attribution
│ +          notices within Derivative Works that You distribute, alongside
│ +          or as an addendum to the NOTICE text from the Work, provided
│ +          that such additional attribution notices cannot be construed
│ +          as modifying the License.
│ +
│ +      You may add Your own copyright statement to Your modifications and
│ +      may provide additional or different license terms and conditions
│ +      for use, reproduction, or distribution of Your modifications, or
│ +      for any such Derivative Works as a whole, provided Your use,
│ +      reproduction, and distribution of the Work otherwise complies with
│ +      the conditions stated in this License.
│ +
│ +   5. Submission of Contributions. Unless You explicitly state otherwise,
│ +      any Contribution intentionally submitted for inclusion in the Work
│ +      by You to the Licensor shall be under the terms and conditions of
│ +      this License, without any additional terms or conditions.
│ +      Notwithstanding the above, nothing herein shall supersede or modify
│ +      the terms of any separate license agreement you may have executed
│ +      with Licensor regarding such Contributions.
│ +
│ +   6. Trademarks. This License does not grant permission to use the trade
│ +      names, trademarks, service marks, or product names of the Licensor,
│ +      except as required for reasonable and customary use in describing the
│ +      origin of the Work and reproducing the content of the NOTICE file.
│ +
│ +   7. Disclaimer of Warranty. Unless required by applicable law or
│ +      agreed to in writing, Licensor provides the Work (and each
│ +      Contributor provides its Contributions) on an "AS IS" BASIS,
│ +      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
│ +      implied, including, without limitation, any warranties or conditions
│ +      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
│ +      PARTICULAR PURPOSE. You are solely responsible for determining the
│ +      appropriateness of using or redistributing the Work and assume any
│ +      risks associated with Your exercise of permissions under this License.
│ +
│ +   8. Limitation of Liability. In no event and under no legal theory,
│ +      whether in tort (including negligence), contract, or otherwise,
│ +      unless required by applicable law (such as deliberate and grossly
│ +      negligent acts) or agreed to in writing, shall any Contributor be
│ +      liable to You for damages, including any direct, indirect, special,
│ +      incidental, or consequential damages of any character arising as a
│ +      result of this License or out of the use or inability to use the
│ +      Work (including but not limited to damages for loss of goodwill,
│ +      work stoppage, computer failure or malfunction, or any and all
│ +      other commercial damages or losses), even if such Contributor
│ +      has been advised of the possibility of such damages.
│ +
│ +   9. Accepting Warranty or Additional Liability. While redistributing
│ +      the Work or Derivative Works thereof, You may choose to offer,
│ +      and charge a fee for, acceptance of support, warranty, indemnity,
│ +      or other liability obligations and/or rights consistent with this
│ +      License. However, in accepting such obligations, You may act only
│ +      on Your own behalf and on Your sole responsibility, not on behalf
│ +      of any other Contributor, and only if You agree to indemnify,
│ +      defend, and hold each Contributor harmless for any liability
│ +      incurred by, or claims asserted against, such Contributor by reason
│ +      of your accepting any such warranty or additional liability.
│ +
│ +   END OF TERMS AND CONDITIONS
│ +
│ +   APPENDIX: How to apply the Apache License to your work.
│ +
│ +      To apply the Apache License to your work, attach the following
│ +      boilerplate notice, with the fields enclosed by brackets "[]"
│ +      replaced with your own identifying information. (Don't include
│ +      the brackets!)  The text should be enclosed in the appropriate
│ +      comment syntax for the file format. We also recommend that a
│ +      file or class name and description of purpose be included on the
│ +      same "printed page" as the copyright notice for easier
│ +      identification within third-party archives.
│ +
│ +   Copyright [yyyy] [name of copyright owner]
│ +
│ +   Licensed under the Apache License, Version 2.0 (the "License");
│ +   you may not use this file except in compliance with the License.
│ +   You may obtain a copy of the License at
│ +
│ +       http://www.apache.org/licenses/LICENSE-2.0
│ +
│ +   Unless required by applicable law or agreed to in writing, software
│ +   distributed under the License is distributed on an "AS IS" BASIS,
│ +   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
│ +   See the License for the specific language governing permissions and
│ +   limitations under the License.
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/README.md
│ @@ -1,12 +1,12 @@
│ -[![Apache Sling](https://sling.apache.org/res/logos/sling.png)](https://sling.apache.org)
│ -
│ -&#32;[![Build Status](https://ci-builds.apache.org/job/Sling/job/modules/job/sling-org-apache-sling-testing-resourceresolver-mock/job/master/badge/icon)](https://ci-builds.apache.org/job/Sling/job/modules/job/sling-org-apache-sling-testing-resourceresolver-mock/job/master/)&#32;[![Test Status](https://img.shields.io/jenkins/tests.svg?jobUrl=https://ci-builds.apache.org/job/Sling/job/modules/job/sling-org-apache-sling-testing-resourceresolver-mock/job/master/)](https://ci-builds.apache.org/job/Sling/job/modules/job/sling-org-apache-sling-testing-resourceresolver-mock/job/master/test/?width=800&height=600)&#32;[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=apache_sling-org-apache-sling-testing-resourceresolver-mock&metric=coverage)](https://sonarcloud.io/dashboard?id=apache_sling-org-apache-sling-testing-resourceresolver-mock)&#32;[![Sonarcloud Status](https://sonarcloud.io/api/project_badges/measure?project=apache_sling-org-apache-sling-testing-resourceresolver-mock&metric=alert_status)](https://sonarcloud.io/dashboard?id=apache_sling-org-apache-sling-testing-resourceresolver-mock)&#32;[![JavaDoc](https://www.javadoc.io/badge/org.apache.sling/org.apache.sling.testing.resourceresolver-mock.svg)](https://www.javadoc.io/doc/org.apache.sling/org.apache.sling.testing.resourceresolver-mock)&#32;[![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.apache.sling/org.apache.sling.testing.resourceresolver-mock/badge.svg)](https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.apache.sling%22%20a%3A%22org.apache.sling.testing.resourceresolver-mock%22)&#32;[![testing](https://sling.apache.org/badges/group-testing.svg)](https://github.com/apache/sling-aggregator/blob/master/docs/groups/testing.md) [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://www.apache.org/licenses/LICENSE-2.0)
│ -
│ -# Apache Sling Testing Resource Resolver Mock
│ -
│ -This module is part of the [Apache Sling](https://sling.apache.org) project.
│ -
│ -Mock for the resource resolver / factory for easier testing.
│ -
│ -Documentation:
│ -http://sling.apache.org/documentation/development/resourceresolver-mock.html
│ +[![Apache Sling](https://sling.apache.org/res/logos/sling.png)](https://sling.apache.org)
│ +
│ +&#32;[![Build Status](https://ci-builds.apache.org/job/Sling/job/modules/job/sling-org-apache-sling-testing-resourceresolver-mock/job/master/badge/icon)](https://ci-builds.apache.org/job/Sling/job/modules/job/sling-org-apache-sling-testing-resourceresolver-mock/job/master/)&#32;[![Test Status](https://img.shields.io/jenkins/tests.svg?jobUrl=https://ci-builds.apache.org/job/Sling/job/modules/job/sling-org-apache-sling-testing-resourceresolver-mock/job/master/)](https://ci-builds.apache.org/job/Sling/job/modules/job/sling-org-apache-sling-testing-resourceresolver-mock/job/master/test/?width=800&height=600)&#32;[![Coverage](https://sonarcloud.io/api/project_badges/measure?project=apache_sling-org-apache-sling-testing-resourceresolver-mock&metric=coverage)](https://sonarcloud.io/dashboard?id=apache_sling-org-apache-sling-testing-resourceresolver-mock)&#32;[![Sonarcloud Status](https://sonarcloud.io/api/project_badges/measure?project=apache_sling-org-apache-sling-testing-resourceresolver-mock&metric=alert_status)](https://sonarcloud.io/dashboard?id=apache_sling-org-apache-sling-testing-resourceresolver-mock)&#32;[![JavaDoc](https://www.javadoc.io/badge/org.apache.sling/org.apache.sling.testing.resourceresolver-mock.svg)](https://www.javadoc.io/doc/org.apache.sling/org.apache.sling.testing.resourceresolver-mock)&#32;[![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.apache.sling/org.apache.sling.testing.resourceresolver-mock/badge.svg)](https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.apache.sling%22%20a%3A%22org.apache.sling.testing.resourceresolver-mock%22)&#32;[![testing](https://sling.apache.org/badges/group-testing.svg)](https://github.com/apache/sling-aggregator/blob/master/docs/groups/testing.md) [![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://www.apache.org/licenses/LICENSE-2.0)
│ +
│ +# Apache Sling Testing Resource Resolver Mock
│ +
│ +This module is part of the [Apache Sling](https://sling.apache.org) project.
│ +
│ +Mock for the resource resolver / factory for easier testing.
│ +
│ +Documentation:
│ +http://sling.apache.org/documentation/development/resourceresolver-mock.html
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/pom.xml
│┄ Format-specific differences are supported for XML files but no file-specific differences were detected; falling back to a binary diff. file(1) reports: XML 1.0 document, ASCII text
│ @@ -1,453 +1,466 @@
│  00000000: 3c3f 786d 6c20 7665 7273 696f 6e3d 2231  <?xml version="1
│  00000010: 2e30 2220 656e 636f 6469 6e67 3d22 4953  .0" encoding="IS
│ -00000020: 4f2d 3838 3539 2d31 223f 3e0a 3c21 2d2d  O-8859-1"?>.<!--
│ -00000030: 0a20 204c 6963 656e 7365 6420 746f 2074  .  Licensed to t
│ -00000040: 6865 2041 7061 6368 6520 536f 6674 7761  he Apache Softwa
│ -00000050: 7265 2046 6f75 6e64 6174 696f 6e20 2841  re Foundation (A
│ -00000060: 5346 2920 756e 6465 7220 6f6e 650a 2020  SF) under one.  
│ -00000070: 6f72 206d 6f72 6520 636f 6e74 7269 6275  or more contribu
│ -00000080: 746f 7220 6c69 6365 6e73 6520 6167 7265  tor license agre
│ -00000090: 656d 656e 7473 2e20 2053 6565 2074 6865  ements.  See the
│ -000000a0: 204e 4f54 4943 4520 6669 6c65 0a20 2064   NOTICE file.  d
│ -000000b0: 6973 7472 6962 7574 6564 2077 6974 6820  istributed with 
│ -000000c0: 7468 6973 2077 6f72 6b20 666f 7220 6164  this work for ad
│ -000000d0: 6469 7469 6f6e 616c 2069 6e66 6f72 6d61  ditional informa
│ -000000e0: 7469 6f6e 0a20 2072 6567 6172 6469 6e67  tion.  regarding
│ -000000f0: 2063 6f70 7972 6967 6874 206f 776e 6572   copyright owner
│ -00000100: 7368 6970 2e20 2054 6865 2041 5346 206c  ship.  The ASF l
│ -00000110: 6963 656e 7365 7320 7468 6973 2066 696c  icenses this fil
│ -00000120: 650a 2020 746f 2079 6f75 2075 6e64 6572  e.  to you under
│ -00000130: 2074 6865 2041 7061 6368 6520 4c69 6365   the Apache Lice
│ -00000140: 6e73 652c 2056 6572 7369 6f6e 2032 2e30  nse, Version 2.0
│ -00000150: 2028 7468 650a 2020 224c 6963 656e 7365   (the.  "License
│ -00000160: 2229 3b20 796f 7520 6d61 7920 6e6f 7420  "); you may not 
│ -00000170: 7573 6520 7468 6973 2066 696c 6520 6578  use this file ex
│ -00000180: 6365 7074 2069 6e20 636f 6d70 6c69 616e  cept in complian
│ -00000190: 6365 0a20 2077 6974 6820 7468 6520 4c69  ce.  with the Li
│ -000001a0: 6365 6e73 652e 2020 596f 7520 6d61 7920  cense.  You may 
│ -000001b0: 6f62 7461 696e 2061 2063 6f70 7920 6f66  obtain a copy of
│ -000001c0: 2074 6865 204c 6963 656e 7365 2061 740a   the License at.
│ -000001d0: 0a20 2020 6874 7470 3a2f 2f77 7777 2e61  .   http://www.a
│ -000001e0: 7061 6368 652e 6f72 672f 6c69 6365 6e73  pache.org/licens
│ -000001f0: 6573 2f4c 4943 454e 5345 2d32 2e30 0a0a  es/LICENSE-2.0..
│ -00000200: 2020 556e 6c65 7373 2072 6571 7569 7265    Unless require
│ -00000210: 6420 6279 2061 7070 6c69 6361 626c 6520  d by applicable 
│ -00000220: 6c61 7720 6f72 2061 6772 6565 6420 746f  law or agreed to
│ -00000230: 2069 6e20 7772 6974 696e 672c 0a20 2073   in writing,.  s
│ -00000240: 6f66 7477 6172 6520 6469 7374 7269 6275  oftware distribu
│ -00000250: 7465 6420 756e 6465 7220 7468 6520 4c69  ted under the Li
│ -00000260: 6365 6e73 6520 6973 2064 6973 7472 6962  cense is distrib
│ -00000270: 7574 6564 206f 6e20 616e 0a20 2022 4153  uted on an.  "AS
│ -00000280: 2049 5322 2042 4153 4953 2c20 5749 5448   IS" BASIS, WITH
│ -00000290: 4f55 5420 5741 5252 414e 5449 4553 204f  OUT WARRANTIES O
│ -000002a0: 5220 434f 4e44 4954 494f 4e53 204f 4620  R CONDITIONS OF 
│ -000002b0: 414e 590a 2020 4b49 4e44 2c20 6569 7468  ANY.  KIND, eith
│ -000002c0: 6572 2065 7870 7265 7373 206f 7220 696d  er express or im
│ -000002d0: 706c 6965 642e 2020 5365 6520 7468 6520  plied.  See the 
│ -000002e0: 4c69 6365 6e73 6520 666f 7220 7468 650a  License for the.
│ -000002f0: 2020 7370 6563 6966 6963 206c 616e 6775    specific langu
│ -00000300: 6167 6520 676f 7665 726e 696e 6720 7065  age governing pe
│ -00000310: 726d 6973 7369 6f6e 7320 616e 6420 6c69  rmissions and li
│ -00000320: 6d69 7461 7469 6f6e 730a 2020 756e 6465  mitations.  unde
│ -00000330: 7220 7468 6520 4c69 6365 6e73 652e 0a2d  r the License..-
│ -00000340: 2d3e 0a3c 7072 6f6a 6563 7420 786d 6c6e  ->.<project xmln
│ -00000350: 733d 2268 7474 703a 2f2f 6d61 7665 6e2e  s="http://maven.
│ -00000360: 6170 6163 6865 2e6f 7267 2f50 4f4d 2f34  apache.org/POM/4
│ -00000370: 2e30 2e30 2220 786d 6c6e 733a 7873 693d  .0.0" xmlns:xsi=
│ -00000380: 2268 7474 703a 2f2f 7777 772e 7733 2e6f  "http://www.w3.o
│ -00000390: 7267 2f32 3030 312f 584d 4c53 6368 656d  rg/2001/XMLSchem
│ -000003a0: 612d 696e 7374 616e 6365 2220 7873 693a  a-instance" xsi:
│ -000003b0: 7363 6865 6d61 4c6f 6361 7469 6f6e 3d22  schemaLocation="
│ -000003c0: 6874 7470 3a2f 2f6d 6176 656e 2e61 7061  http://maven.apa
│ -000003d0: 6368 652e 6f72 672f 504f 4d2f 342e 302e  che.org/POM/4.0.
│ -000003e0: 3020 6874 7470 3a2f 2f6d 6176 656e 2e61  0 http://maven.a
│ -000003f0: 7061 6368 652e 6f72 672f 6d61 7665 6e2d  pache.org/maven-
│ -00000400: 7634 5f30 5f30 2e78 7364 223e 0a0a 2020  v4_0_0.xsd">..  
│ -00000410: 2020 3c6d 6f64 656c 5665 7273 696f 6e3e    <modelVersion>
│ -00000420: 342e 302e 303c 2f6d 6f64 656c 5665 7273  4.0.0</modelVers
│ -00000430: 696f 6e3e 0a20 2020 203c 7061 7265 6e74  ion>.    <parent
│ -00000440: 3e0a 2020 2020 2020 2020 3c67 726f 7570  >.        <group
│ -00000450: 4964 3e6f 7267 2e61 7061 6368 652e 736c  Id>org.apache.sl
│ -00000460: 696e 673c 2f67 726f 7570 4964 3e0a 2020  ing</groupId>.  
│ -00000470: 2020 2020 2020 3c61 7274 6966 6163 7449        <artifactI
│ -00000480: 643e 736c 696e 672d 6275 6e64 6c65 2d70  d>sling-bundle-p
│ -00000490: 6172 656e 743c 2f61 7274 6966 6163 7449  arent</artifactI
│ -000004a0: 643e 0a20 2020 2020 2020 203c 7665 7273  d>.        <vers
│ -000004b0: 696f 6e3e 3437 3c2f 7665 7273 696f 6e3e  ion>47</version>
│ -000004c0: 0a20 2020 2020 2020 203c 7265 6c61 7469  .        <relati
│ -000004d0: 7665 5061 7468 202f 3e0a 2020 2020 3c2f  vePath />.    </
│ -000004e0: 7061 7265 6e74 3e0a 0a20 2020 203c 6172  parent>..    <ar
│ -000004f0: 7469 6661 6374 4964 3e6f 7267 2e61 7061  tifactId>org.apa
│ -00000500: 6368 652e 736c 696e 672e 7465 7374 696e  che.sling.testin
│ -00000510: 672e 7265 736f 7572 6365 7265 736f 6c76  g.resourceresolv
│ -00000520: 6572 2d6d 6f63 6b3c 2f61 7274 6966 6163  er-mock</artifac
│ -00000530: 7449 643e 0a20 2020 203c 7665 7273 696f  tId>.    <versio
│ -00000540: 6e3e 312e 332e 303c 2f76 6572 7369 6f6e  n>1.3.0</version
│ -00000550: 3e0a 0a20 2020 203c 6e61 6d65 3e41 7061  >..    <name>Apa
│ -00000560: 6368 6520 536c 696e 6720 5465 7374 696e  che Sling Testin
│ -00000570: 6720 5265 736f 7572 6365 2052 6573 6f6c  g Resource Resol
│ -00000580: 7665 7220 4d6f 636b 3c2f 6e61 6d65 3e0a  ver Mock</name>.
│ -00000590: 2020 2020 3c64 6573 6372 6970 7469 6f6e      <description
│ -000005a0: 3e0a 2020 2020 2020 2020 4d6f 636b 2066  >.        Mock f
│ -000005b0: 6f72 2074 6865 2072 6573 6f75 7263 6520  or the resource 
│ -000005c0: 7265 736f 6c76 6572 202f 2066 6163 746f  resolver / facto
│ -000005d0: 7279 2066 6f72 2065 6173 6965 7220 7465  ry for easier te
│ -000005e0: 7374 696e 672e 0a20 2020 203c 2f64 6573  sting..    </des
│ -000005f0: 6372 6970 7469 6f6e 3e0a 0a20 2020 203c  cription>..    <
│ -00000600: 7363 6d3e 0a20 2020 2020 2020 203c 636f  scm>.        <co
│ -00000610: 6e6e 6563 7469 6f6e 3e73 636d 3a67 6974  nnection>scm:git
│ -00000620: 3a68 7474 7073 3a2f 2f67 6974 626f 782e  :https://gitbox.
│ -00000630: 6170 6163 6865 2e6f 7267 2f72 6570 6f73  apache.org/repos
│ -00000640: 2f61 7366 2f73 6c69 6e67 2d6f 7267 2d61  /asf/sling-org-a
│ -00000650: 7061 6368 652d 736c 696e 672d 7465 7374  pache-sling-test
│ -00000660: 696e 672d 7265 736f 7572 6365 7265 736f  ing-resourcereso
│ -00000670: 6c76 6572 2d6d 6f63 6b2e 6769 743c 2f63  lver-mock.git</c
│ -00000680: 6f6e 6e65 6374 696f 6e3e 0a20 2020 2020  onnection>.     
│ -00000690: 2020 203c 6465 7665 6c6f 7065 7243 6f6e     <developerCon
│ -000006a0: 6e65 6374 696f 6e3e 7363 6d3a 6769 743a  nection>scm:git:
│ -000006b0: 6874 7470 733a 2f2f 6769 7462 6f78 2e61  https://gitbox.a
│ -000006c0: 7061 6368 652e 6f72 672f 7265 706f 732f  pache.org/repos/
│ -000006d0: 6173 662f 736c 696e 672d 6f72 672d 6170  asf/sling-org-ap
│ -000006e0: 6163 6865 2d73 6c69 6e67 2d74 6573 7469  ache-sling-testi
│ -000006f0: 6e67 2d72 6573 6f75 7263 6572 6573 6f6c  ng-resourceresol
│ -00000700: 7665 722d 6d6f 636b 2e67 6974 3c2f 6465  ver-mock.git</de
│ -00000710: 7665 6c6f 7065 7243 6f6e 6e65 6374 696f  veloperConnectio
│ -00000720: 6e3e 0a20 2020 2020 2020 203c 7572 6c3e  n>.        <url>
│ -00000730: 6874 7470 733a 2f2f 6769 7462 6f78 2e61  https://gitbox.a
│ -00000740: 7061 6368 652e 6f72 672f 7265 706f 732f  pache.org/repos/
│ -00000750: 6173 663f 703d 736c 696e 672d 6f72 672d  asf?p=sling-org-
│ -00000760: 6170 6163 6865 2d73 6c69 6e67 2d74 6573  apache-sling-tes
│ -00000770: 7469 6e67 2d72 6573 6f75 7263 6572 6573  ting-resourceres
│ -00000780: 6f6c 7665 722d 6d6f 636b 2e67 6974 3c2f  olver-mock.git</
│ -00000790: 7572 6c3e 0a20 2020 2020 2020 203c 7461  url>.        <ta
│ -000007a0: 673e 6f72 672e 6170 6163 6865 2e73 6c69  g>org.apache.sli
│ -000007b0: 6e67 2e74 6573 7469 6e67 2e72 6573 6f75  ng.testing.resou
│ -000007c0: 7263 6572 6573 6f6c 7665 722d 6d6f 636b  rceresolver-mock
│ -000007d0: 2d31 2e33 2e30 3c2f 7461 673e 0a20 2020  -1.3.0</tag>.   
│ -000007e0: 203c 2f73 636d 3e0a 0a20 2020 203c 7072   </scm>..    <pr
│ -000007f0: 6f70 6572 7469 6573 3e0a 2020 2020 2020  operties>.      
│ -00000800: 2020 3c70 726f 6a65 6374 2e62 7569 6c64    <project.build
│ -00000810: 2e6f 7574 7075 7454 696d 6573 7461 6d70  .outputTimestamp
│ -00000820: 3e32 3032 322d 3035 2d30 3554 3136 3a32  >2022-05-05T16:2
│ -00000830: 313a 3235 5a3c 2f70 726f 6a65 6374 2e62  1:25Z</project.b
│ -00000840: 7569 6c64 2e6f 7574 7075 7454 696d 6573  uild.outputTimes
│ -00000850: 7461 6d70 3e0a 2020 2020 3c2f 7072 6f70  tamp>.    </prop
│ -00000860: 6572 7469 6573 3e0a 0a20 2020 203c 7265  erties>..    <re
│ -00000870: 706f 7274 696e 673e 0a20 2020 2020 2020  porting>.       
│ -00000880: 203c 706c 7567 696e 733e 0a20 2020 2020   <plugins>.     
│ -00000890: 2020 2020 2020 203c 706c 7567 696e 3e0a         <plugin>.
│ -000008a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -000008b0: 3c67 726f 7570 4964 3e6f 7267 2e61 7061  <groupId>org.apa
│ -000008c0: 6368 652e 6d61 7665 6e2e 706c 7567 696e  che.maven.plugin
│ -000008d0: 733c 2f67 726f 7570 4964 3e0a 2020 2020  s</groupId>.    
│ -000008e0: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
│ -000008f0: 6966 6163 7449 643e 6d61 7665 6e2d 6a61  ifactId>maven-ja
│ -00000900: 7661 646f 632d 706c 7567 696e 3c2f 6172  vadoc-plugin</ar
│ -00000910: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
│ -00000920: 2020 2020 2020 2020 2020 3c63 6f6e 6669            <confi
│ -00000930: 6775 7261 7469 6f6e 3e0a 2020 2020 2020  guration>.      
│ -00000940: 2020 2020 2020 2020 2020 2020 2020 3c65                <e
│ -00000950: 7863 6c75 6465 5061 636b 6167 654e 616d  xcludePackageNam
│ -00000960: 6573 3e0a 2020 2020 2020 2020 2020 2020  es>.            
│ -00000970: 2020 2020 2020 2020 2020 2020 6f72 672e              org.
│ -00000980: 6170 6163 6865 2e73 6c69 6e67 2e74 6573  apache.sling.tes
│ -00000990: 7469 6e67 2e72 6573 6f75 7263 6572 6573  ting.resourceres
│ -000009a0: 6f6c 7665 720a 2020 2020 2020 2020 2020  olver.          
│ -000009b0: 2020 2020 2020 2020 2020 3c2f 6578 636c            </excl
│ -000009c0: 7564 6550 6163 6b61 6765 4e61 6d65 733e  udePackageNames>
│ -000009d0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
│ -000009e0: 203c 2f63 6f6e 6669 6775 7261 7469 6f6e   </configuration
│ -000009f0: 3e0a 2020 2020 2020 2020 2020 2020 3c2f  >.            </
│ -00000a00: 706c 7567 696e 3e0a 2020 2020 2020 2020  plugin>.        
│ -00000a10: 3c2f 706c 7567 696e 733e 0a20 2020 203c  </plugins>.    <
│ -00000a20: 2f72 6570 6f72 7469 6e67 3e0a 2020 2020  /reporting>.    
│ -00000a30: 3c64 6570 656e 6465 6e63 6965 733e 0a20  <dependencies>. 
│ -00000a40: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
│ -00000a50: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
│ -00000a60: 3c67 726f 7570 4964 3e6f 7267 2e6f 7367  <groupId>org.osg
│ -00000a70: 693c 2f67 726f 7570 4964 3e0a 2020 2020  i</groupId>.    
│ -00000a80: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
│ -00000a90: 7449 643e 6f72 672e 6f73 6769 2e61 6e6e  tId>org.osgi.ann
│ -00000aa0: 6f74 6174 696f 6e2e 7665 7273 696f 6e69  otation.versioni
│ -00000ab0: 6e67 3c2f 6172 7469 6661 6374 4964 3e0a  ng</artifactId>.
│ -00000ac0: 2020 2020 2020 2020 2020 2020 3c73 636f              <sco
│ -00000ad0: 7065 3e70 726f 7669 6465 643c 2f73 636f  pe>provided</sco
│ -00000ae0: 7065 3e0a 2020 2020 2020 2020 3c2f 6465  pe>.        </de
│ -00000af0: 7065 6e64 656e 6379 3e0a 2020 2020 2020  pendency>.      
│ -00000b00: 2020 3c64 6570 656e 6465 6e63 793e 0a20    <dependency>. 
│ -00000b10: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
│ -00000b20: 7049 643e 6f72 672e 6a65 7462 7261 696e  pId>org.jetbrain
│ -00000b30: 733c 2f67 726f 7570 4964 3e0a 2020 2020  s</groupId>.    
│ -00000b40: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
│ -00000b50: 7449 643e 616e 6e6f 7461 7469 6f6e 733c  tId>annotations<
│ -00000b60: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
│ -00000b70: 2020 2020 2020 2020 203c 7363 6f70 653e           <scope>
│ -00000b80: 7072 6f76 6964 6564 3c2f 7363 6f70 653e  provided</scope>
│ -00000b90: 0a20 2020 2020 2020 203c 2f64 6570 656e  .        </depen
│ -00000ba0: 6465 6e63 793e 0a20 2020 2020 2020 203c  dency>.        <
│ -00000bb0: 6465 7065 6e64 656e 6379 3e0a 2020 2020  dependency>.    
│ -00000bc0: 2020 2020 2020 2020 3c67 726f 7570 4964          <groupId
│ -00000bd0: 3e6a 6176 6178 2e73 6572 766c 6574 3c2f  >javax.servlet</
│ -00000be0: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
│ -00000bf0: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
│ -00000c00: 3e6a 6176 6178 2e73 6572 766c 6574 2d61  >javax.servlet-a
│ -00000c10: 7069 3c2f 6172 7469 6661 6374 4964 3e0a  pi</artifactId>.
│ -00000c20: 2020 2020 2020 2020 2020 2020 3c73 636f              <sco
│ -00000c30: 7065 3e70 726f 7669 6465 643c 2f73 636f  pe>provided</sco
│ -00000c40: 7065 3e0a 2020 2020 2020 2020 3c2f 6465  pe>.        </de
│ -00000c50: 7065 6e64 656e 6379 3e0a 0a20 2020 2020  pendency>..     
│ -00000c60: 2020 203c 6465 7065 6e64 656e 6379 3e0a     <dependency>.
│ -00000c70: 2020 2020 2020 2020 2020 2020 3c67 726f              <gro
│ -00000c80: 7570 4964 3e6f 7267 2e61 7061 6368 652e  upId>org.apache.
│ -00000c90: 736c 696e 673c 2f67 726f 7570 4964 3e0a  sling</groupId>.
│ -00000ca0: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
│ -00000cb0: 6966 6163 7449 643e 6f72 672e 6170 6163  ifactId>org.apac
│ -00000cc0: 6865 2e73 6c69 6e67 2e61 7069 3c2f 6172  he.sling.api</ar
│ -00000cd0: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
│ -00000ce0: 2020 2020 2020 3c73 636f 7065 3e70 726f        <scope>pro
│ -00000cf0: 7669 6465 643c 2f73 636f 7065 3e0a 2020  vided</scope>.  
│ -00000d00: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ -00000d10: 6379 3e0a 2020 2020 2020 2020 3c64 6570  cy>.        <dep
│ -00000d20: 656e 6465 6e63 793e 0a20 2020 2020 2020  endency>.       
│ -00000d30: 2020 2020 203c 6772 6f75 7049 643e 6f72       <groupId>or
│ -00000d40: 672e 6f73 6769 3c2f 6772 6f75 7049 643e  g.osgi</groupId>
│ -00000d50: 0a20 2020 2020 2020 2020 2020 203c 6172  .            <ar
│ -00000d60: 7469 6661 6374 4964 3e6f 7267 2e6f 7367  tifactId>org.osg
│ -00000d70: 692e 7365 7276 6963 652e 6576 656e 743c  i.service.event<
│ -00000d80: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
│ -00000d90: 2020 2020 2020 2020 203c 7363 6f70 653e           <scope>
│ -00000da0: 7072 6f76 6964 6564 3c2f 7363 6f70 653e  provided</scope>
│ -00000db0: 0a20 2020 2020 2020 203c 2f64 6570 656e  .        </depen
│ -00000dc0: 6465 6e63 793e 0a20 2020 2020 2020 203c  dency>.        <
│ -00000dd0: 6465 7065 6e64 656e 6379 3e0a 2020 2020  dependency>.    
│ -00000de0: 2020 2020 2020 2020 3c67 726f 7570 4964          <groupId
│ -00000df0: 3e6f 7267 2e6f 7367 693c 2f67 726f 7570  >org.osgi</group
│ -00000e00: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
│ -00000e10: 3c61 7274 6966 6163 7449 643e 6f72 672e  <artifactId>org.
│ -00000e20: 6f73 6769 2e75 7469 6c2e 636f 6e76 6572  osgi.util.conver
│ -00000e30: 7465 723c 2f61 7274 6966 6163 7449 643e  ter</artifactId>
│ -00000e40: 0a20 2020 2020 2020 2020 2020 203c 7363  .            <sc
│ -00000e50: 6f70 653e 7072 6f76 6964 6564 3c2f 7363  ope>provided</sc
│ -00000e60: 6f70 653e 0a20 2020 2020 2020 203c 2f64  ope>.        </d
│ -00000e70: 6570 656e 6465 6e63 793e 0a20 2020 2020  ependency>.     
│ -00000e80: 2020 203c 6465 7065 6e64 656e 6379 3e0a     <dependency>.
│ -00000e90: 2020 2020 2020 2020 2020 2020 3c67 726f              <gro
│ -00000ea0: 7570 4964 3e6f 7267 2e6f 7367 693c 2f67  upId>org.osgi</g
│ -00000eb0: 726f 7570 4964 3e0a 2020 2020 2020 2020  roupId>.        
│ -00000ec0: 2020 2020 3c61 7274 6966 6163 7449 643e      <artifactId>
│ -00000ed0: 6f72 672e 6f73 6769 2e75 7469 6c2e 6675  org.osgi.util.fu
│ -00000ee0: 6e63 7469 6f6e 3c2f 6172 7469 6661 6374  nction</artifact
│ -00000ef0: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
│ -00000f00: 3c73 636f 7065 3e70 726f 7669 6465 643c  <scope>provided<
│ -00000f10: 2f73 636f 7065 3e0a 2020 2020 2020 2020  /scope>.        
│ -00000f20: 3c2f 6465 7065 6e64 656e 6379 3e0a 2020  </dependency>.  
│ -00000f30: 2020 2020 2020 3c64 6570 656e 6465 6e63        <dependenc
│ -00000f40: 793e 0a20 2020 2020 2020 2020 2020 203c  y>.            <
│ -00000f50: 6772 6f75 7049 643e 636f 6d6d 6f6e 732d  groupId>commons-
│ -00000f60: 696f 3c2f 6772 6f75 7049 643e 0a20 2020  io</groupId>.   
│ -00000f70: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
│ -00000f80: 6374 4964 3e63 6f6d 6d6f 6e73 2d69 6f3c  ctId>commons-io<
│ -00000f90: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
│ -00000fa0: 2020 2020 2020 2020 203c 7363 6f70 653e           <scope>
│ -00000fb0: 636f 6d70 696c 653c 2f73 636f 7065 3e0a  compile</scope>.
│ -00000fc0: 2020 2020 2020 2020 3c2f 6465 7065 6e64          </depend
│ -00000fd0: 656e 6379 3e0a 2020 2020 2020 2020 3c64  ency>.        <d
│ -00000fe0: 6570 656e 6465 6e63 793e 0a20 2020 2020  ependency>.     
│ -00000ff0: 2020 2020 2020 203c 6772 6f75 7049 643e         <groupId>
│ -00001000: 6f72 672e 6170 6163 6865 2e6a 6163 6b72  org.apache.jackr
│ -00001010: 6162 6269 743c 2f67 726f 7570 4964 3e0a  abbit</groupId>.
│ -00001020: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
│ -00001030: 6966 6163 7449 643e 6a61 636b 7261 6262  ifactId>jackrabb
│ -00001040: 6974 2d6a 6372 2d63 6f6d 6d6f 6e73 3c2f  it-jcr-commons</
│ -00001050: 6172 7469 6661 6374 4964 3e0a 2020 2020  artifactId>.    
│ -00001060: 2020 2020 2020 2020 3c73 636f 7065 3e63          <scope>c
│ -00001070: 6f6d 7069 6c65 3c2f 7363 6f70 653e 0a20  ompile</scope>. 
│ -00001080: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
│ -00001090: 6e63 793e 0a0a 2020 2020 2020 2020 3c21  ncy>..        <!
│ -000010a0: 2d2d 2074 6573 7469 6e67 202d 2d3e 0a20  -- testing -->. 
│ -000010b0: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
│ -000010c0: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
│ -000010d0: 3c67 726f 7570 4964 3e6a 756e 6974 3c2f  <groupId>junit</
│ -000010e0: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
│ -000010f0: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
│ -00001100: 3e6a 756e 6974 3c2f 6172 7469 6661 6374  >junit</artifact
│ -00001110: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
│ -00001120: 3c73 636f 7065 3e74 6573 743c 2f73 636f  <scope>test</sco
│ -00001130: 7065 3e0a 2020 2020 2020 2020 3c2f 6465  pe>.        </de
│ -00001140: 7065 6e64 656e 6379 3e0a 2020 2020 2020  pendency>.      
│ -00001150: 2020 3c64 6570 656e 6465 6e63 793e 0a20    <dependency>. 
│ -00001160: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
│ -00001170: 7049 643e 636f 6d2e 676f 6f67 6c65 2e67  pId>com.google.g
│ -00001180: 7561 7661 3c2f 6772 6f75 7049 643e 0a20  uava</groupId>. 
│ -00001190: 2020 2020 2020 2020 2020 203c 6172 7469             <arti
│ -000011a0: 6661 6374 4964 3e67 7561 7661 3c2f 6172  factId>guava</ar
│ -000011b0: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
│ -000011c0: 2020 2020 2020 3c76 6572 7369 6f6e 3e31        <version>1
│ -000011d0: 352e 303c 2f76 6572 7369 6f6e 3e0a 2020  5.0</version>.  
│ -000011e0: 2020 2020 2020 2020 2020 3c73 636f 7065            <scope
│ -000011f0: 3e74 6573 743c 2f73 636f 7065 3e0a 2020  >test</scope>.  
│ -00001200: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ -00001210: 6379 3e0a 2020 2020 2020 2020 3c64 6570  cy>.        <dep
│ -00001220: 656e 6465 6e63 793e 0a20 2020 2020 2020  endency>.       
│ -00001230: 2020 2020 203c 6772 6f75 7049 643e 6f72       <groupId>or
│ -00001240: 672e 6d6f 636b 6974 6f3c 2f67 726f 7570  g.mockito</group
│ -00001250: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
│ -00001260: 3c61 7274 6966 6163 7449 643e 6d6f 636b  <artifactId>mock
│ -00001270: 6974 6f2d 636f 7265 3c2f 6172 7469 6661  ito-core</artifa
│ -00001280: 6374 4964 3e0a 2020 2020 2020 2020 2020  ctId>.          
│ -00001290: 2020 3c76 6572 7369 6f6e 3e34 2e35 2e31    <version>4.5.1
│ -000012a0: 3c2f 7665 7273 696f 6e3e 0a20 2020 2020  </version>.     
│ -000012b0: 2020 2020 2020 203c 7363 6f70 653e 7465         <scope>te
│ -000012c0: 7374 3c2f 7363 6f70 653e 0a20 2020 2020  st</scope>.     
│ -000012d0: 2020 203c 2f64 6570 656e 6465 6e63 793e     </dependency>
│ -000012e0: 0a20 2020 2020 2020 203c 6465 7065 6e64  .        <depend
│ -000012f0: 656e 6379 3e0a 2020 2020 2020 2020 2020  ency>.          
│ -00001300: 2020 3c67 726f 7570 4964 3e6f 7267 2e61    <groupId>org.a
│ -00001310: 7061 6368 652e 636f 6d6d 6f6e 733c 2f67  pache.commons</g
│ -00001320: 726f 7570 4964 3e0a 2020 2020 2020 2020  roupId>.        
│ -00001330: 2020 2020 3c61 7274 6966 6163 7449 643e      <artifactId>
│ -00001340: 636f 6d6d 6f6e 732d 6c61 6e67 333c 2f61  commons-lang3</a
│ -00001350: 7274 6966 6163 7449 643e 0a20 2020 2020  rtifactId>.     
│ -00001360: 2020 2020 2020 203c 7665 7273 696f 6e3e         <version>
│ -00001370: 332e 393c 2f76 6572 7369 6f6e 3e0a 2020  3.9</version>.  
│ -00001380: 2020 2020 2020 2020 2020 3c73 636f 7065            <scope
│ -00001390: 3e74 6573 743c 2f73 636f 7065 3e0a 2020  >test</scope>.  
│ -000013a0: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ -000013b0: 6379 3e0a 2020 2020 3c2f 6465 7065 6e64  cy>.    </depend
│ -000013c0: 656e 6369 6573 3e0a 0a20 2020 203c 6465  encies>..    <de
│ -000013d0: 7065 6e64 656e 6379 4d61 6e61 6765 6d65  pendencyManageme
│ -000013e0: 6e74 3e0a 2020 2020 2020 2020 3c64 6570  nt>.        <dep
│ -000013f0: 656e 6465 6e63 6965 733e 0a20 2020 2020  endencies>.     
│ -00001400: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
│ -00001410: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
│ -00001420: 2020 2020 3c67 726f 7570 4964 3e6f 7267      <groupId>org
│ -00001430: 2e61 7061 6368 652e 736c 696e 673c 2f67  .apache.sling</g
│ -00001440: 726f 7570 4964 3e0a 2020 2020 2020 2020  roupId>.        
│ -00001450: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
│ -00001460: 7449 643e 6f72 672e 6170 6163 6865 2e73  tId>org.apache.s
│ -00001470: 6c69 6e67 2e61 7069 3c2f 6172 7469 6661  ling.api</artifa
│ -00001480: 6374 4964 3e0a 2020 2020 2020 2020 2020  ctId>.          
│ -00001490: 2020 2020 2020 3c76 6572 7369 6f6e 3e32        <version>2
│ -000014a0: 2e32 322e 303c 2f76 6572 7369 6f6e 3e0a  .22.0</version>.
│ -000014b0: 2020 2020 2020 2020 2020 2020 3c2f 6465              </de
│ -000014c0: 7065 6e64 656e 6379 3e0a 2020 2020 2020  pendency>.      
│ -000014d0: 2020 2020 2020 3c64 6570 656e 6465 6e63        <dependenc
│ -000014e0: 793e 0a20 2020 2020 2020 2020 2020 2020  y>.             
│ -000014f0: 2020 203c 6772 6f75 7049 643e 6f72 672e     <groupId>org.
│ -00001500: 6f73 6769 3c2f 6772 6f75 7049 643e 0a20  osgi</groupId>. 
│ -00001510: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ -00001520: 6172 7469 6661 6374 4964 3e6f 7267 2e6f  artifactId>org.o
│ -00001530: 7367 692e 7365 7276 6963 652e 6576 656e  sgi.service.even
│ -00001540: 743c 2f61 7274 6966 6163 7449 643e 0a20  t</artifactId>. 
│ -00001550: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ -00001560: 7665 7273 696f 6e3e 312e 342e 303c 2f76  version>1.4.0</v
│ -00001570: 6572 7369 6f6e 3e0a 2020 2020 2020 2020  ersion>.        
│ -00001580: 2020 2020 3c2f 6465 7065 6e64 656e 6379      </dependency
│ -00001590: 3e0a 2020 2020 2020 2020 2020 2020 3c64  >.            <d
│ -000015a0: 6570 656e 6465 6e63 793e 0a20 2020 2020  ependency>.     
│ -000015b0: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
│ -000015c0: 7049 643e 636f 6d6d 6f6e 732d 696f 3c2f  pId>commons-io</
│ -000015d0: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
│ -000015e0: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
│ -000015f0: 6374 4964 3e63 6f6d 6d6f 6e73 2d69 6f3c  ctId>commons-io<
│ -00001600: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
│ -00001610: 2020 2020 2020 2020 2020 2020 203c 7665               <ve
│ -00001620: 7273 696f 6e3e 322e 363c 2f76 6572 7369  rsion>2.6</versi
│ -00001630: 6f6e 3e0a 2020 2020 2020 2020 2020 2020  on>.            
│ -00001640: 3c2f 6465 7065 6e64 656e 6379 3e0a 2020  </dependency>.  
│ -00001650: 2020 2020 2020 2020 2020 3c64 6570 656e            <depen
│ -00001660: 6465 6e63 793e 0a20 2020 2020 2020 2020  dency>.         
│ -00001670: 2020 2020 2020 203c 6772 6f75 7049 643e         <groupId>
│ -00001680: 6f72 672e 6170 6163 6865 2e6a 6163 6b72  org.apache.jackr
│ -00001690: 6162 6269 743c 2f67 726f 7570 4964 3e0a  abbit</groupId>.
│ -000016a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -000016b0: 3c61 7274 6966 6163 7449 643e 6a61 636b  <artifactId>jack
│ -000016c0: 7261 6262 6974 2d6a 6372 2d63 6f6d 6d6f  rabbit-jcr-commo
│ -000016d0: 6e73 3c2f 6172 7469 6661 6374 4964 3e0a  ns</artifactId>.
│ -000016e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -000016f0: 3c76 6572 7369 6f6e 3e32 2e32 302e 313c  <version>2.20.1<
│ -00001700: 2f76 6572 7369 6f6e 3e0a 2020 2020 2020  /version>.      
│ -00001710: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ -00001720: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
│ -00001730: 3c64 6570 656e 6465 6e63 793e 0a20 2020  <dependency>.   
│ -00001740: 2020 2020 2020 2020 2020 2020 203c 6772               <gr
│ -00001750: 6f75 7049 643e 6f72 672e 6f73 6769 3c2f  oupId>org.osgi</
│ -00001760: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
│ -00001770: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
│ -00001780: 6374 4964 3e6f 7267 2e6f 7367 692e 7574  ctId>org.osgi.ut
│ -00001790: 696c 2e63 6f6e 7665 7274 6572 3c2f 6172  il.converter</ar
│ -000017a0: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
│ -000017b0: 2020 2020 2020 2020 2020 3c76 6572 7369            <versi
│ -000017c0: 6f6e 3e31 2e30 2e30 3c2f 7665 7273 696f  on>1.0.0</versio
│ -000017d0: 6e3e 0a20 2020 2020 2020 2020 2020 203c  n>.            <
│ -000017e0: 2f64 6570 656e 6465 6e63 793e 0a20 2020  /dependency>.   
│ -000017f0: 2020 2020 2020 2020 203c 6465 7065 6e64           <depend
│ -00001800: 656e 6379 3e0a 2020 2020 2020 2020 2020  ency>.          
│ -00001810: 2020 2020 2020 3c67 726f 7570 4964 3e6f        <groupId>o
│ -00001820: 7267 2e6f 7367 693c 2f67 726f 7570 4964  rg.osgi</groupId
│ -00001830: 3e0a 2020 2020 2020 2020 2020 2020 2020  >.              
│ -00001840: 2020 3c61 7274 6966 6163 7449 643e 6f72    <artifactId>or
│ -00001850: 672e 6f73 6769 2e75 7469 6c2e 6675 6e63  g.osgi.util.func
│ -00001860: 7469 6f6e 3c2f 6172 7469 6661 6374 4964  tion</artifactId
│ -00001870: 3e0a 2020 2020 2020 2020 2020 2020 2020  >.              
│ -00001880: 2020 3c76 6572 7369 6f6e 3e31 2e31 2e30    <version>1.1.0
│ -00001890: 3c2f 7665 7273 696f 6e3e 0a20 2020 2020  </version>.     
│ -000018a0: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
│ -000018b0: 6e63 793e 0a20 2020 2020 2020 203c 2f64  ncy>.        </d
│ -000018c0: 6570 656e 6465 6e63 6965 733e 0a20 2020  ependencies>.   
│ -000018d0: 203c 2f64 6570 656e 6465 6e63 794d 616e   </dependencyMan
│ -000018e0: 6167 656d 656e 743e 0a0a 2020 203c 7072  agement>..   <pr
│ -000018f0: 6f66 696c 6573 3e0a 2020 2020 2020 2020  ofiles>.        
│ -00001900: 3c70 726f 6669 6c65 3e0a 2020 2020 2020  <profile>.      
│ -00001910: 2020 2020 2020 3c69 643e 6c61 7465 7374        <id>latest
│ -00001920: 2d64 6570 656e 6465 6e63 792d 7665 7273  -dependency-vers
│ -00001930: 696f 6e73 3c2f 6964 3e0a 2020 2020 2020  ions</id>.      
│ -00001940: 2020 2020 2020 3c61 6374 6976 6174 696f        <activatio
│ -00001950: 6e3e 0a20 2020 2020 2020 2020 2020 2020  n>.             
│ -00001960: 2020 203c 6163 7469 7665 4279 4465 6661     <activeByDefa
│ -00001970: 756c 743e 6661 6c73 653c 2f61 6374 6976  ult>false</activ
│ -00001980: 6542 7944 6566 6175 6c74 3e0a 2020 2020  eByDefault>.    
│ -00001990: 2020 2020 2020 2020 3c2f 6163 7469 7661          </activa
│ -000019a0: 7469 6f6e 3e0a 2020 2020 2020 2020 2020  tion>.          
│ -000019b0: 2020 3c64 6570 656e 6465 6e63 794d 616e    <dependencyMan
│ -000019c0: 6167 656d 656e 743e 0a20 2020 2020 2020  agement>.       
│ -000019d0: 2020 2020 2020 2020 203c 6465 7065 6e64           <depend
│ -000019e0: 656e 6369 6573 3e0a 2020 2020 2020 2020  encies>.        
│ -000019f0: 2020 2020 2020 2020 2020 2020 3c64 6570              <dep
│ -00001a00: 656e 6465 6e63 793e 0a20 2020 2020 2020  endency>.       
│ -00001a10: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001a20: 203c 6772 6f75 7049 643e 6f72 672e 6170   <groupId>org.ap
│ -00001a30: 6163 6865 2e73 6c69 6e67 3c2f 6772 6f75  ache.sling</grou
│ -00001a40: 7049 643e 0a20 2020 2020 2020 2020 2020  pId>.           
│ -00001a50: 2020 2020 2020 2020 2020 2020 203c 6172               <ar
│ -00001a60: 7469 6661 6374 4964 3e6f 7267 2e61 7061  tifactId>org.apa
│ -00001a70: 6368 652e 736c 696e 672e 6170 693c 2f61  che.sling.api</a
│ -00001a80: 7274 6966 6163 7449 643e 0a20 2020 2020  rtifactId>.     
│ -00001a90: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001aa0: 2020 203c 7665 7273 696f 6e3e 322e 3235     <version>2.25
│ -00001ab0: 2e30 3c2f 7665 7273 696f 6e3e 0a20 2020  .0</version>.   
│ +00000020: 4f2d 3838 3539 2d31 223f 3e0d 0a3c 212d  O-8859-1"?>..<!-
│ +00000030: 2d0d 0a20 204c 6963 656e 7365 6420 746f  -..  Licensed to
│ +00000040: 2074 6865 2041 7061 6368 6520 536f 6674   the Apache Soft
│ +00000050: 7761 7265 2046 6f75 6e64 6174 696f 6e20  ware Foundation 
│ +00000060: 2841 5346 2920 756e 6465 7220 6f6e 650d  (ASF) under one.
│ +00000070: 0a20 206f 7220 6d6f 7265 2063 6f6e 7472  .  or more contr
│ +00000080: 6962 7574 6f72 206c 6963 656e 7365 2061  ibutor license a
│ +00000090: 6772 6565 6d65 6e74 732e 2020 5365 6520  greements.  See 
│ +000000a0: 7468 6520 4e4f 5449 4345 2066 696c 650d  the NOTICE file.
│ +000000b0: 0a20 2064 6973 7472 6962 7574 6564 2077  .  distributed w
│ +000000c0: 6974 6820 7468 6973 2077 6f72 6b20 666f  ith this work fo
│ +000000d0: 7220 6164 6469 7469 6f6e 616c 2069 6e66  r additional inf
│ +000000e0: 6f72 6d61 7469 6f6e 0d0a 2020 7265 6761  ormation..  rega
│ +000000f0: 7264 696e 6720 636f 7079 7269 6768 7420  rding copyright 
│ +00000100: 6f77 6e65 7273 6869 702e 2020 5468 6520  ownership.  The 
│ +00000110: 4153 4620 6c69 6365 6e73 6573 2074 6869  ASF licenses thi
│ +00000120: 7320 6669 6c65 0d0a 2020 746f 2079 6f75  s file..  to you
│ +00000130: 2075 6e64 6572 2074 6865 2041 7061 6368   under the Apach
│ +00000140: 6520 4c69 6365 6e73 652c 2056 6572 7369  e License, Versi
│ +00000150: 6f6e 2032 2e30 2028 7468 650d 0a20 2022  on 2.0 (the..  "
│ +00000160: 4c69 6365 6e73 6522 293b 2079 6f75 206d  License"); you m
│ +00000170: 6179 206e 6f74 2075 7365 2074 6869 7320  ay not use this 
│ +00000180: 6669 6c65 2065 7863 6570 7420 696e 2063  file except in c
│ +00000190: 6f6d 706c 6961 6e63 650d 0a20 2077 6974  ompliance..  wit
│ +000001a0: 6820 7468 6520 4c69 6365 6e73 652e 2020  h the License.  
│ +000001b0: 596f 7520 6d61 7920 6f62 7461 696e 2061  You may obtain a
│ +000001c0: 2063 6f70 7920 6f66 2074 6865 204c 6963   copy of the Lic
│ +000001d0: 656e 7365 2061 740d 0a0d 0a20 2020 6874  ense at....   ht
│ +000001e0: 7470 3a2f 2f77 7777 2e61 7061 6368 652e  tp://www.apache.
│ +000001f0: 6f72 672f 6c69 6365 6e73 6573 2f4c 4943  org/licenses/LIC
│ +00000200: 454e 5345 2d32 2e30 0d0a 0d0a 2020 556e  ENSE-2.0....  Un
│ +00000210: 6c65 7373 2072 6571 7569 7265 6420 6279  less required by
│ +00000220: 2061 7070 6c69 6361 626c 6520 6c61 7720   applicable law 
│ +00000230: 6f72 2061 6772 6565 6420 746f 2069 6e20  or agreed to in 
│ +00000240: 7772 6974 696e 672c 0d0a 2020 736f 6674  writing,..  soft
│ +00000250: 7761 7265 2064 6973 7472 6962 7574 6564  ware distributed
│ +00000260: 2075 6e64 6572 2074 6865 204c 6963 656e   under the Licen
│ +00000270: 7365 2069 7320 6469 7374 7269 6275 7465  se is distribute
│ +00000280: 6420 6f6e 2061 6e0d 0a20 2022 4153 2049  d on an..  "AS I
│ +00000290: 5322 2042 4153 4953 2c20 5749 5448 4f55  S" BASIS, WITHOU
│ +000002a0: 5420 5741 5252 414e 5449 4553 204f 5220  T WARRANTIES OR 
│ +000002b0: 434f 4e44 4954 494f 4e53 204f 4620 414e  CONDITIONS OF AN
│ +000002c0: 590d 0a20 204b 494e 442c 2065 6974 6865  Y..  KIND, eithe
│ +000002d0: 7220 6578 7072 6573 7320 6f72 2069 6d70  r express or imp
│ +000002e0: 6c69 6564 2e20 2053 6565 2074 6865 204c  lied.  See the L
│ +000002f0: 6963 656e 7365 2066 6f72 2074 6865 0d0a  icense for the..
│ +00000300: 2020 7370 6563 6966 6963 206c 616e 6775    specific langu
│ +00000310: 6167 6520 676f 7665 726e 696e 6720 7065  age governing pe
│ +00000320: 726d 6973 7369 6f6e 7320 616e 6420 6c69  rmissions and li
│ +00000330: 6d69 7461 7469 6f6e 730d 0a20 2075 6e64  mitations..  und
│ +00000340: 6572 2074 6865 204c 6963 656e 7365 2e0d  er the License..
│ +00000350: 0a2d 2d3e 0d0a 3c70 726f 6a65 6374 2078  .-->..<project x
│ +00000360: 6d6c 6e73 3d22 6874 7470 3a2f 2f6d 6176  mlns="http://mav
│ +00000370: 656e 2e61 7061 6368 652e 6f72 672f 504f  en.apache.org/PO
│ +00000380: 4d2f 342e 302e 3022 2078 6d6c 6e73 3a78  M/4.0.0" xmlns:x
│ +00000390: 7369 3d22 6874 7470 3a2f 2f77 7777 2e77  si="http://www.w
│ +000003a0: 332e 6f72 672f 3230 3031 2f58 4d4c 5363  3.org/2001/XMLSc
│ +000003b0: 6865 6d61 2d69 6e73 7461 6e63 6522 2078  hema-instance" x
│ +000003c0: 7369 3a73 6368 656d 614c 6f63 6174 696f  si:schemaLocatio
│ +000003d0: 6e3d 2268 7474 703a 2f2f 6d61 7665 6e2e  n="http://maven.
│ +000003e0: 6170 6163 6865 2e6f 7267 2f50 4f4d 2f34  apache.org/POM/4
│ +000003f0: 2e30 2e30 2068 7474 703a 2f2f 6d61 7665  .0.0 http://mave
│ +00000400: 6e2e 6170 6163 6865 2e6f 7267 2f6d 6176  n.apache.org/mav
│ +00000410: 656e 2d76 345f 305f 302e 7873 6422 3e0d  en-v4_0_0.xsd">.
│ +00000420: 0a0d 0a20 2020 203c 6d6f 6465 6c56 6572  ...    <modelVer
│ +00000430: 7369 6f6e 3e34 2e30 2e30 3c2f 6d6f 6465  sion>4.0.0</mode
│ +00000440: 6c56 6572 7369 6f6e 3e0d 0a20 2020 203c  lVersion>..    <
│ +00000450: 7061 7265 6e74 3e0d 0a20 2020 2020 2020  parent>..       
│ +00000460: 203c 6772 6f75 7049 643e 6f72 672e 6170   <groupId>org.ap
│ +00000470: 6163 6865 2e73 6c69 6e67 3c2f 6772 6f75  ache.sling</grou
│ +00000480: 7049 643e 0d0a 2020 2020 2020 2020 3c61  pId>..        <a
│ +00000490: 7274 6966 6163 7449 643e 736c 696e 672d  rtifactId>sling-
│ +000004a0: 6275 6e64 6c65 2d70 6172 656e 743c 2f61  bundle-parent</a
│ +000004b0: 7274 6966 6163 7449 643e 0d0a 2020 2020  rtifactId>..    
│ +000004c0: 2020 2020 3c76 6572 7369 6f6e 3e34 373c      <version>47<
│ +000004d0: 2f76 6572 7369 6f6e 3e0d 0a20 2020 2020  /version>..     
│ +000004e0: 2020 203c 7265 6c61 7469 7665 5061 7468     <relativePath
│ +000004f0: 202f 3e0d 0a20 2020 203c 2f70 6172 656e   />..    </paren
│ +00000500: 743e 0d0a 0d0a 2020 2020 3c61 7274 6966  t>....    <artif
│ +00000510: 6163 7449 643e 6f72 672e 6170 6163 6865  actId>org.apache
│ +00000520: 2e73 6c69 6e67 2e74 6573 7469 6e67 2e72  .sling.testing.r
│ +00000530: 6573 6f75 7263 6572 6573 6f6c 7665 722d  esourceresolver-
│ +00000540: 6d6f 636b 3c2f 6172 7469 6661 6374 4964  mock</artifactId
│ +00000550: 3e0d 0a20 2020 203c 7665 7273 696f 6e3e  >..    <version>
│ +00000560: 312e 332e 303c 2f76 6572 7369 6f6e 3e0d  1.3.0</version>.
│ +00000570: 0a0d 0a20 2020 203c 6e61 6d65 3e41 7061  ...    <name>Apa
│ +00000580: 6368 6520 536c 696e 6720 5465 7374 696e  che Sling Testin
│ +00000590: 6720 5265 736f 7572 6365 2052 6573 6f6c  g Resource Resol
│ +000005a0: 7665 7220 4d6f 636b 3c2f 6e61 6d65 3e0d  ver Mock</name>.
│ +000005b0: 0a20 2020 203c 6465 7363 7269 7074 696f  .    <descriptio
│ +000005c0: 6e3e 0d0a 2020 2020 2020 2020 4d6f 636b  n>..        Mock
│ +000005d0: 2066 6f72 2074 6865 2072 6573 6f75 7263   for the resourc
│ +000005e0: 6520 7265 736f 6c76 6572 202f 2066 6163  e resolver / fac
│ +000005f0: 746f 7279 2066 6f72 2065 6173 6965 7220  tory for easier 
│ +00000600: 7465 7374 696e 672e 0d0a 2020 2020 3c2f  testing...    </
│ +00000610: 6465 7363 7269 7074 696f 6e3e 0d0a 0d0a  description>....
│ +00000620: 2020 2020 3c73 636d 3e0d 0a20 2020 2020      <scm>..     
│ +00000630: 2020 203c 636f 6e6e 6563 7469 6f6e 3e73     <connection>s
│ +00000640: 636d 3a67 6974 3a68 7474 7073 3a2f 2f67  cm:git:https://g
│ +00000650: 6974 626f 782e 6170 6163 6865 2e6f 7267  itbox.apache.org
│ +00000660: 2f72 6570 6f73 2f61 7366 2f73 6c69 6e67  /repos/asf/sling
│ +00000670: 2d6f 7267 2d61 7061 6368 652d 736c 696e  -org-apache-slin
│ +00000680: 672d 7465 7374 696e 672d 7265 736f 7572  g-testing-resour
│ +00000690: 6365 7265 736f 6c76 6572 2d6d 6f63 6b2e  ceresolver-mock.
│ +000006a0: 6769 743c 2f63 6f6e 6e65 6374 696f 6e3e  git</connection>
│ +000006b0: 0d0a 2020 2020 2020 2020 3c64 6576 656c  ..        <devel
│ +000006c0: 6f70 6572 436f 6e6e 6563 7469 6f6e 3e73  operConnection>s
│ +000006d0: 636d 3a67 6974 3a68 7474 7073 3a2f 2f67  cm:git:https://g
│ +000006e0: 6974 626f 782e 6170 6163 6865 2e6f 7267  itbox.apache.org
│ +000006f0: 2f72 6570 6f73 2f61 7366 2f73 6c69 6e67  /repos/asf/sling
│ +00000700: 2d6f 7267 2d61 7061 6368 652d 736c 696e  -org-apache-slin
│ +00000710: 672d 7465 7374 696e 672d 7265 736f 7572  g-testing-resour
│ +00000720: 6365 7265 736f 6c76 6572 2d6d 6f63 6b2e  ceresolver-mock.
│ +00000730: 6769 743c 2f64 6576 656c 6f70 6572 436f  git</developerCo
│ +00000740: 6e6e 6563 7469 6f6e 3e0d 0a20 2020 2020  nnection>..     
│ +00000750: 2020 203c 7572 6c3e 6874 7470 733a 2f2f     <url>https://
│ +00000760: 6769 7462 6f78 2e61 7061 6368 652e 6f72  gitbox.apache.or
│ +00000770: 672f 7265 706f 732f 6173 663f 703d 736c  g/repos/asf?p=sl
│ +00000780: 696e 672d 6f72 672d 6170 6163 6865 2d73  ing-org-apache-s
│ +00000790: 6c69 6e67 2d74 6573 7469 6e67 2d72 6573  ling-testing-res
│ +000007a0: 6f75 7263 6572 6573 6f6c 7665 722d 6d6f  ourceresolver-mo
│ +000007b0: 636b 2e67 6974 3c2f 7572 6c3e 0d0a 2020  ck.git</url>..  
│ +000007c0: 2020 2020 2020 3c74 6167 3e6f 7267 2e61        <tag>org.a
│ +000007d0: 7061 6368 652e 736c 696e 672e 7465 7374  pache.sling.test
│ +000007e0: 696e 672e 7265 736f 7572 6365 7265 736f  ing.resourcereso
│ +000007f0: 6c76 6572 2d6d 6f63 6b2d 312e 332e 303c  lver-mock-1.3.0<
│ +00000800: 2f74 6167 3e0d 0a20 2020 203c 2f73 636d  /tag>..    </scm
│ +00000810: 3e0d 0a0d 0a20 2020 203c 7072 6f70 6572  >....    <proper
│ +00000820: 7469 6573 3e0d 0a20 2020 2020 2020 203c  ties>..        <
│ +00000830: 7072 6f6a 6563 742e 6275 696c 642e 6f75  project.build.ou
│ +00000840: 7470 7574 5469 6d65 7374 616d 703e 3230  tputTimestamp>20
│ +00000850: 3232 2d30 352d 3035 5431 363a 3231 3a32  22-05-05T16:21:2
│ +00000860: 355a 3c2f 7072 6f6a 6563 742e 6275 696c  5Z</project.buil
│ +00000870: 642e 6f75 7470 7574 5469 6d65 7374 616d  d.outputTimestam
│ +00000880: 703e 0d0a 2020 2020 3c2f 7072 6f70 6572  p>..    </proper
│ +00000890: 7469 6573 3e0d 0a0d 0a20 2020 203c 7265  ties>....    <re
│ +000008a0: 706f 7274 696e 673e 0d0a 2020 2020 2020  porting>..      
│ +000008b0: 2020 3c70 6c75 6769 6e73 3e0d 0a20 2020    <plugins>..   
│ +000008c0: 2020 2020 2020 2020 203c 706c 7567 696e           <plugin
│ +000008d0: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
│ +000008e0: 2020 203c 6772 6f75 7049 643e 6f72 672e     <groupId>org.
│ +000008f0: 6170 6163 6865 2e6d 6176 656e 2e70 6c75  apache.maven.plu
│ +00000900: 6769 6e73 3c2f 6772 6f75 7049 643e 0d0a  gins</groupId>..
│ +00000910: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00000920: 3c61 7274 6966 6163 7449 643e 6d61 7665  <artifactId>mave
│ +00000930: 6e2d 6a61 7661 646f 632d 706c 7567 696e  n-javadoc-plugin
│ +00000940: 3c2f 6172 7469 6661 6374 4964 3e0d 0a20  </artifactId>.. 
│ +00000950: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ +00000960: 636f 6e66 6967 7572 6174 696f 6e3e 0d0a  configuration>..
│ +00000970: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00000980: 2020 2020 3c65 7863 6c75 6465 5061 636b      <excludePack
│ +00000990: 6167 654e 616d 6573 3e0d 0a20 2020 2020  ageNames>..     
│ +000009a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +000009b0: 2020 206f 7267 2e61 7061 6368 652e 736c     org.apache.sl
│ +000009c0: 696e 672e 7465 7374 696e 672e 7265 736f  ing.testing.reso
│ +000009d0: 7572 6365 7265 736f 6c76 6572 0d0a 2020  urceresolver..  
│ +000009e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +000009f0: 2020 3c2f 6578 636c 7564 6550 6163 6b61    </excludePacka
│ +00000a00: 6765 4e61 6d65 733e 0d0a 2020 2020 2020  geNames>..      
│ +00000a10: 2020 2020 2020 2020 2020 3c2f 636f 6e66            </conf
│ +00000a20: 6967 7572 6174 696f 6e3e 0d0a 2020 2020  iguration>..    
│ +00000a30: 2020 2020 2020 2020 3c2f 706c 7567 696e          </plugin
│ +00000a40: 3e0d 0a20 2020 2020 2020 203c 2f70 6c75  >..        </plu
│ +00000a50: 6769 6e73 3e0d 0a20 2020 203c 2f72 6570  gins>..    </rep
│ +00000a60: 6f72 7469 6e67 3e0d 0a20 2020 203c 6465  orting>..    <de
│ +00000a70: 7065 6e64 656e 6369 6573 3e0d 0a20 2020  pendencies>..   
│ +00000a80: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +00000a90: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00000aa0: 6772 6f75 7049 643e 6f72 672e 6f73 6769  groupId>org.osgi
│ +00000ab0: 3c2f 6772 6f75 7049 643e 0d0a 2020 2020  </groupId>..    
│ +00000ac0: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
│ +00000ad0: 7449 643e 6f72 672e 6f73 6769 2e61 6e6e  tId>org.osgi.ann
│ +00000ae0: 6f74 6174 696f 6e2e 7665 7273 696f 6e69  otation.versioni
│ +00000af0: 6e67 3c2f 6172 7469 6661 6374 4964 3e0d  ng</artifactId>.
│ +00000b00: 0a20 2020 2020 2020 2020 2020 203c 7363  .            <sc
│ +00000b10: 6f70 653e 7072 6f76 6964 6564 3c2f 7363  ope>provided</sc
│ +00000b20: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
│ +00000b30: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
│ +00000b40: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +00000b50: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00000b60: 6772 6f75 7049 643e 6f72 672e 6a65 7462  groupId>org.jetb
│ +00000b70: 7261 696e 733c 2f67 726f 7570 4964 3e0d  rains</groupId>.
│ +00000b80: 0a20 2020 2020 2020 2020 2020 203c 6172  .            <ar
│ +00000b90: 7469 6661 6374 4964 3e61 6e6e 6f74 6174  tifactId>annotat
│ +00000ba0: 696f 6e73 3c2f 6172 7469 6661 6374 4964  ions</artifactId
│ +00000bb0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00000bc0: 7363 6f70 653e 7072 6f76 6964 6564 3c2f  scope>provided</
│ +00000bd0: 7363 6f70 653e 0d0a 2020 2020 2020 2020  scope>..        
│ +00000be0: 3c2f 6465 7065 6e64 656e 6379 3e0d 0a20  </dependency>.. 
│ +00000bf0: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
│ +00000c00: 6379 3e0d 0a20 2020 2020 2020 2020 2020  cy>..           
│ +00000c10: 203c 6772 6f75 7049 643e 6a61 7661 782e   <groupId>javax.
│ +00000c20: 7365 7276 6c65 743c 2f67 726f 7570 4964  servlet</groupId
│ +00000c30: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00000c40: 6172 7469 6661 6374 4964 3e6a 6176 6178  artifactId>javax
│ +00000c50: 2e73 6572 766c 6574 2d61 7069 3c2f 6172  .servlet-api</ar
│ +00000c60: 7469 6661 6374 4964 3e0d 0a20 2020 2020  tifactId>..     
│ +00000c70: 2020 2020 2020 203c 7363 6f70 653e 7072         <scope>pr
│ +00000c80: 6f76 6964 6564 3c2f 7363 6f70 653e 0d0a  ovided</scope>..
│ +00000c90: 2020 2020 2020 2020 3c2f 6465 7065 6e64          </depend
│ +00000ca0: 656e 6379 3e0d 0a0d 0a20 2020 2020 2020  ency>....       
│ +00000cb0: 203c 6465 7065 6e64 656e 6379 3e0d 0a20   <dependency>.. 
│ +00000cc0: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
│ +00000cd0: 7049 643e 6f72 672e 6170 6163 6865 2e73  pId>org.apache.s
│ +00000ce0: 6c69 6e67 3c2f 6772 6f75 7049 643e 0d0a  ling</groupId>..
│ +00000cf0: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
│ +00000d00: 6966 6163 7449 643e 6f72 672e 6170 6163  ifactId>org.apac
│ +00000d10: 6865 2e73 6c69 6e67 2e61 7069 3c2f 6172  he.sling.api</ar
│ +00000d20: 7469 6661 6374 4964 3e0d 0a20 2020 2020  tifactId>..     
│ +00000d30: 2020 2020 2020 203c 7363 6f70 653e 7072         <scope>pr
│ +00000d40: 6f76 6964 6564 3c2f 7363 6f70 653e 0d0a  ovided</scope>..
│ +00000d50: 2020 2020 2020 2020 3c2f 6465 7065 6e64          </depend
│ +00000d60: 656e 6379 3e0d 0a20 2020 2020 2020 203c  ency>..        <
│ +00000d70: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
│ +00000d80: 2020 2020 2020 2020 203c 6772 6f75 7049           <groupI
│ +00000d90: 643e 6f72 672e 6f73 6769 3c2f 6772 6f75  d>org.osgi</grou
│ +00000da0: 7049 643e 0d0a 2020 2020 2020 2020 2020  pId>..          
│ +00000db0: 2020 3c61 7274 6966 6163 7449 643e 6f72    <artifactId>or
│ +00000dc0: 672e 6f73 6769 2e73 6572 7669 6365 2e65  g.osgi.service.e
│ +00000dd0: 7665 6e74 3c2f 6172 7469 6661 6374 4964  vent</artifactId
│ +00000de0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00000df0: 7363 6f70 653e 7072 6f76 6964 6564 3c2f  scope>provided</
│ +00000e00: 7363 6f70 653e 0d0a 2020 2020 2020 2020  scope>..        
│ +00000e10: 3c2f 6465 7065 6e64 656e 6379 3e0d 0a20  </dependency>.. 
│ +00000e20: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
│ +00000e30: 6379 3e0d 0a20 2020 2020 2020 2020 2020  cy>..           
│ +00000e40: 203c 6772 6f75 7049 643e 6f72 672e 6f73   <groupId>org.os
│ +00000e50: 6769 3c2f 6772 6f75 7049 643e 0d0a 2020  gi</groupId>..  
│ +00000e60: 2020 2020 2020 2020 2020 3c61 7274 6966            <artif
│ +00000e70: 6163 7449 643e 6f72 672e 6f73 6769 2e75  actId>org.osgi.u
│ +00000e80: 7469 6c2e 636f 6e76 6572 7465 723c 2f61  til.converter</a
│ +00000e90: 7274 6966 6163 7449 643e 0d0a 2020 2020  rtifactId>..    
│ +00000ea0: 2020 2020 2020 2020 3c73 636f 7065 3e70          <scope>p
│ +00000eb0: 726f 7669 6465 643c 2f73 636f 7065 3e0d  rovided</scope>.
│ +00000ec0: 0a20 2020 2020 2020 203c 2f64 6570 656e  .        </depen
│ +00000ed0: 6465 6e63 793e 0d0a 2020 2020 2020 2020  dency>..        
│ +00000ee0: 3c64 6570 656e 6465 6e63 793e 0d0a 2020  <dependency>..  
│ +00000ef0: 2020 2020 2020 2020 2020 3c67 726f 7570            <group
│ +00000f00: 4964 3e6f 7267 2e6f 7367 693c 2f67 726f  Id>org.osgi</gro
│ +00000f10: 7570 4964 3e0d 0a20 2020 2020 2020 2020  upId>..         
│ +00000f20: 2020 203c 6172 7469 6661 6374 4964 3e6f     <artifactId>o
│ +00000f30: 7267 2e6f 7367 692e 7574 696c 2e66 756e  rg.osgi.util.fun
│ +00000f40: 6374 696f 6e3c 2f61 7274 6966 6163 7449  ction</artifactI
│ +00000f50: 643e 0d0a 2020 2020 2020 2020 2020 2020  d>..            
│ +00000f60: 3c73 636f 7065 3e70 726f 7669 6465 643c  <scope>provided<
│ +00000f70: 2f73 636f 7065 3e0d 0a20 2020 2020 2020  /scope>..       
│ +00000f80: 203c 2f64 6570 656e 6465 6e63 793e 0d0a   </dependency>..
│ +00000f90: 2020 2020 2020 2020 3c64 6570 656e 6465          <depende
│ +00000fa0: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
│ +00000fb0: 2020 3c67 726f 7570 4964 3e63 6f6d 6d6f    <groupId>commo
│ +00000fc0: 6e73 2d69 6f3c 2f67 726f 7570 4964 3e0d  ns-io</groupId>.
│ +00000fd0: 0a20 2020 2020 2020 2020 2020 203c 6172  .            <ar
│ +00000fe0: 7469 6661 6374 4964 3e63 6f6d 6d6f 6e73  tifactId>commons
│ +00000ff0: 2d69 6f3c 2f61 7274 6966 6163 7449 643e  -io</artifactId>
│ +00001000: 0d0a 2020 2020 2020 2020 2020 2020 3c73  ..            <s
│ +00001010: 636f 7065 3e63 6f6d 7069 6c65 3c2f 7363  cope>compile</sc
│ +00001020: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
│ +00001030: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
│ +00001040: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +00001050: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00001060: 6772 6f75 7049 643e 6f72 672e 6170 6163  groupId>org.apac
│ +00001070: 6865 2e6a 6163 6b72 6162 6269 743c 2f67  he.jackrabbit</g
│ +00001080: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
│ +00001090: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
│ +000010a0: 3e6a 6163 6b72 6162 6269 742d 6a63 722d  >jackrabbit-jcr-
│ +000010b0: 636f 6d6d 6f6e 733c 2f61 7274 6966 6163  commons</artifac
│ +000010c0: 7449 643e 0d0a 2020 2020 2020 2020 2020  tId>..          
│ +000010d0: 2020 3c73 636f 7065 3e63 6f6d 7069 6c65    <scope>compile
│ +000010e0: 3c2f 7363 6f70 653e 0d0a 2020 2020 2020  </scope>..      
│ +000010f0: 2020 3c2f 6465 7065 6e64 656e 6379 3e0d    </dependency>.
│ +00001100: 0a0d 0a20 2020 2020 2020 203c 212d 2d20  ...        <!-- 
│ +00001110: 7465 7374 696e 6720 2d2d 3e0d 0a20 2020  testing -->..   
│ +00001120: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +00001130: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00001140: 6772 6f75 7049 643e 6a75 6e69 743c 2f67  groupId>junit</g
│ +00001150: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
│ +00001160: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
│ +00001170: 3e6a 756e 6974 3c2f 6172 7469 6661 6374  >junit</artifact
│ +00001180: 4964 3e0d 0a20 2020 2020 2020 2020 2020  Id>..           
│ +00001190: 203c 7363 6f70 653e 7465 7374 3c2f 7363   <scope>test</sc
│ +000011a0: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
│ +000011b0: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
│ +000011c0: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +000011d0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +000011e0: 6772 6f75 7049 643e 636f 6d2e 676f 6f67  groupId>com.goog
│ +000011f0: 6c65 2e67 7561 7661 3c2f 6772 6f75 7049  le.guava</groupI
│ +00001200: 643e 0d0a 2020 2020 2020 2020 2020 2020  d>..            
│ +00001210: 3c61 7274 6966 6163 7449 643e 6775 6176  <artifactId>guav
│ +00001220: 613c 2f61 7274 6966 6163 7449 643e 0d0a  a</artifactId>..
│ +00001230: 2020 2020 2020 2020 2020 2020 3c76 6572              <ver
│ +00001240: 7369 6f6e 3e31 352e 303c 2f76 6572 7369  sion>15.0</versi
│ +00001250: 6f6e 3e0d 0a20 2020 2020 2020 2020 2020  on>..           
│ +00001260: 203c 7363 6f70 653e 7465 7374 3c2f 7363   <scope>test</sc
│ +00001270: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
│ +00001280: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
│ +00001290: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +000012a0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +000012b0: 6772 6f75 7049 643e 6f72 672e 6d6f 636b  groupId>org.mock
│ +000012c0: 6974 6f3c 2f67 726f 7570 4964 3e0d 0a20  ito</groupId>.. 
│ +000012d0: 2020 2020 2020 2020 2020 203c 6172 7469             <arti
│ +000012e0: 6661 6374 4964 3e6d 6f63 6b69 746f 2d63  factId>mockito-c
│ +000012f0: 6f72 653c 2f61 7274 6966 6163 7449 643e  ore</artifactId>
│ +00001300: 0d0a 2020 2020 2020 2020 2020 2020 3c76  ..            <v
│ +00001310: 6572 7369 6f6e 3e34 2e35 2e31 3c2f 7665  ersion>4.5.1</ve
│ +00001320: 7273 696f 6e3e 0d0a 2020 2020 2020 2020  rsion>..        
│ +00001330: 2020 2020 3c73 636f 7065 3e74 6573 743c      <scope>test<
│ +00001340: 2f73 636f 7065 3e0d 0a20 2020 2020 2020  /scope>..       
│ +00001350: 203c 2f64 6570 656e 6465 6e63 793e 0d0a   </dependency>..
│ +00001360: 2020 2020 2020 2020 3c64 6570 656e 6465          <depende
│ +00001370: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
│ +00001380: 2020 3c67 726f 7570 4964 3e6f 7267 2e61    <groupId>org.a
│ +00001390: 7061 6368 652e 636f 6d6d 6f6e 733c 2f67  pache.commons</g
│ +000013a0: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
│ +000013b0: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
│ +000013c0: 3e63 6f6d 6d6f 6e73 2d6c 616e 6733 3c2f  >commons-lang3</
│ +000013d0: 6172 7469 6661 6374 4964 3e0d 0a20 2020  artifactId>..   
│ +000013e0: 2020 2020 2020 2020 203c 7665 7273 696f           <versio
│ +000013f0: 6e3e 332e 393c 2f76 6572 7369 6f6e 3e0d  n>3.9</version>.
│ +00001400: 0a20 2020 2020 2020 2020 2020 203c 7363  .            <sc
│ +00001410: 6f70 653e 7465 7374 3c2f 7363 6f70 653e  ope>test</scope>
│ +00001420: 0d0a 2020 2020 2020 2020 3c2f 6465 7065  ..        </depe
│ +00001430: 6e64 656e 6379 3e0d 0a20 2020 203c 2f64  ndency>..    </d
│ +00001440: 6570 656e 6465 6e63 6965 733e 0d0a 0d0a  ependencies>....
│ +00001450: 2020 2020 3c64 6570 656e 6465 6e63 794d      <dependencyM
│ +00001460: 616e 6167 656d 656e 743e 0d0a 2020 2020  anagement>..    
│ +00001470: 2020 2020 3c64 6570 656e 6465 6e63 6965      <dependencie
│ +00001480: 733e 0d0a 2020 2020 2020 2020 2020 2020  s>..            
│ +00001490: 3c64 6570 656e 6465 6e63 793e 0d0a 2020  <dependency>..  
│ +000014a0: 2020 2020 2020 2020 2020 2020 2020 3c67                <g
│ +000014b0: 726f 7570 4964 3e6f 7267 2e61 7061 6368  roupId>org.apach
│ +000014c0: 652e 736c 696e 673c 2f67 726f 7570 4964  e.sling</groupId
│ +000014d0: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
│ +000014e0: 2020 203c 6172 7469 6661 6374 4964 3e6f     <artifactId>o
│ +000014f0: 7267 2e61 7061 6368 652e 736c 696e 672e  rg.apache.sling.
│ +00001500: 6170 693c 2f61 7274 6966 6163 7449 643e  api</artifactId>
│ +00001510: 0d0a 2020 2020 2020 2020 2020 2020 2020  ..              
│ +00001520: 2020 3c76 6572 7369 6f6e 3e32 2e32 322e    <version>2.22.
│ +00001530: 303c 2f76 6572 7369 6f6e 3e0d 0a20 2020  0</version>..   
│ +00001540: 2020 2020 2020 2020 203c 2f64 6570 656e           </depen
│ +00001550: 6465 6e63 793e 0d0a 2020 2020 2020 2020  dency>..        
│ +00001560: 2020 2020 3c64 6570 656e 6465 6e63 793e      <dependency>
│ +00001570: 0d0a 2020 2020 2020 2020 2020 2020 2020  ..              
│ +00001580: 2020 3c67 726f 7570 4964 3e6f 7267 2e6f    <groupId>org.o
│ +00001590: 7367 693c 2f67 726f 7570 4964 3e0d 0a20  sgi</groupId>.. 
│ +000015a0: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ +000015b0: 6172 7469 6661 6374 4964 3e6f 7267 2e6f  artifactId>org.o
│ +000015c0: 7367 692e 7365 7276 6963 652e 6576 656e  sgi.service.even
│ +000015d0: 743c 2f61 7274 6966 6163 7449 643e 0d0a  t</artifactId>..
│ +000015e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +000015f0: 3c76 6572 7369 6f6e 3e31 2e34 2e30 3c2f  <version>1.4.0</
│ +00001600: 7665 7273 696f 6e3e 0d0a 2020 2020 2020  version>..      
│ +00001610: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ +00001620: 6379 3e0d 0a20 2020 2020 2020 2020 2020  cy>..           
│ +00001630: 203c 6465 7065 6e64 656e 6379 3e0d 0a20   <dependency>.. 
│ +00001640: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ +00001650: 6772 6f75 7049 643e 636f 6d6d 6f6e 732d  groupId>commons-
│ +00001660: 696f 3c2f 6772 6f75 7049 643e 0d0a 2020  io</groupId>..  
│ +00001670: 2020 2020 2020 2020 2020 2020 2020 3c61                <a
│ +00001680: 7274 6966 6163 7449 643e 636f 6d6d 6f6e  rtifactId>common
│ +00001690: 732d 696f 3c2f 6172 7469 6661 6374 4964  s-io</artifactId
│ +000016a0: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
│ +000016b0: 2020 203c 7665 7273 696f 6e3e 322e 363c     <version>2.6<
│ +000016c0: 2f76 6572 7369 6f6e 3e0d 0a20 2020 2020  /version>..     
│ +000016d0: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
│ +000016e0: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
│ +000016f0: 2020 3c64 6570 656e 6465 6e63 793e 0d0a    <dependency>..
│ +00001700: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00001710: 3c67 726f 7570 4964 3e6f 7267 2e61 7061  <groupId>org.apa
│ +00001720: 6368 652e 6a61 636b 7261 6262 6974 3c2f  che.jackrabbit</
│ +00001730: 6772 6f75 7049 643e 0d0a 2020 2020 2020  groupId>..      
│ +00001740: 2020 2020 2020 2020 2020 3c61 7274 6966            <artif
│ +00001750: 6163 7449 643e 6a61 636b 7261 6262 6974  actId>jackrabbit
│ +00001760: 2d6a 6372 2d63 6f6d 6d6f 6e73 3c2f 6172  -jcr-commons</ar
│ +00001770: 7469 6661 6374 4964 3e0d 0a20 2020 2020  tifactId>..     
│ +00001780: 2020 2020 2020 2020 2020 203c 7665 7273             <vers
│ +00001790: 696f 6e3e 322e 3230 2e31 3c2f 7665 7273  ion>2.20.1</vers
│ +000017a0: 696f 6e3e 0d0a 2020 2020 2020 2020 2020  ion>..          
│ +000017b0: 2020 3c2f 6465 7065 6e64 656e 6379 3e0d    </dependency>.
│ +000017c0: 0a20 2020 2020 2020 2020 2020 203c 6465  .            <de
│ +000017d0: 7065 6e64 656e 6379 3e0d 0a20 2020 2020  pendency>..     
│ +000017e0: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
│ +000017f0: 7049 643e 6f72 672e 6f73 6769 3c2f 6772  pId>org.osgi</gr
│ +00001800: 6f75 7049 643e 0d0a 2020 2020 2020 2020  oupId>..        
│ +00001810: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
│ +00001820: 7449 643e 6f72 672e 6f73 6769 2e75 7469  tId>org.osgi.uti
│ +00001830: 6c2e 636f 6e76 6572 7465 723c 2f61 7274  l.converter</art
│ +00001840: 6966 6163 7449 643e 0d0a 2020 2020 2020  ifactId>..      
│ +00001850: 2020 2020 2020 2020 2020 3c76 6572 7369            <versi
│ +00001860: 6f6e 3e31 2e30 2e30 3c2f 7665 7273 696f  on>1.0.0</versio
│ +00001870: 6e3e 0d0a 2020 2020 2020 2020 2020 2020  n>..            
│ +00001880: 3c2f 6465 7065 6e64 656e 6379 3e0d 0a20  </dependency>.. 
│ +00001890: 2020 2020 2020 2020 2020 203c 6465 7065             <depe
│ +000018a0: 6e64 656e 6379 3e0d 0a20 2020 2020 2020  ndency>..       
│ +000018b0: 2020 2020 2020 2020 203c 6772 6f75 7049           <groupI
│ +000018c0: 643e 6f72 672e 6f73 6769 3c2f 6772 6f75  d>org.osgi</grou
│ +000018d0: 7049 643e 0d0a 2020 2020 2020 2020 2020  pId>..          
│ +000018e0: 2020 2020 2020 3c61 7274 6966 6163 7449        <artifactI
│ +000018f0: 643e 6f72 672e 6f73 6769 2e75 7469 6c2e  d>org.osgi.util.
│ +00001900: 6675 6e63 7469 6f6e 3c2f 6172 7469 6661  function</artifa
│ +00001910: 6374 4964 3e0d 0a20 2020 2020 2020 2020  ctId>..         
│ +00001920: 2020 2020 2020 203c 7665 7273 696f 6e3e         <version>
│ +00001930: 312e 312e 303c 2f76 6572 7369 6f6e 3e0d  1.1.0</version>.
│ +00001940: 0a20 2020 2020 2020 2020 2020 203c 2f64  .            </d
│ +00001950: 6570 656e 6465 6e63 793e 0d0a 2020 2020  ependency>..    
│ +00001960: 2020 2020 3c2f 6465 7065 6e64 656e 6369      </dependenci
│ +00001970: 6573 3e0d 0a20 2020 203c 2f64 6570 656e  es>..    </depen
│ +00001980: 6465 6e63 794d 616e 6167 656d 656e 743e  dencyManagement>
│ +00001990: 0d0a 0d0a 2020 203c 7072 6f66 696c 6573  ....   <profiles
│ +000019a0: 3e0d 0a20 2020 2020 2020 203c 7072 6f66  >..        <prof
│ +000019b0: 696c 653e 0d0a 2020 2020 2020 2020 2020  ile>..          
│ +000019c0: 2020 3c69 643e 6c61 7465 7374 2d64 6570    <id>latest-dep
│ +000019d0: 656e 6465 6e63 792d 7665 7273 696f 6e73  endency-versions
│ +000019e0: 3c2f 6964 3e0d 0a20 2020 2020 2020 2020  </id>..         
│ +000019f0: 2020 203c 6163 7469 7661 7469 6f6e 3e0d     <activation>.
│ +00001a00: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
│ +00001a10: 203c 6163 7469 7665 4279 4465 6661 756c   <activeByDefaul
│ +00001a20: 743e 6661 6c73 653c 2f61 6374 6976 6542  t>false</activeB
│ +00001a30: 7944 6566 6175 6c74 3e0d 0a20 2020 2020  yDefault>..     
│ +00001a40: 2020 2020 2020 203c 2f61 6374 6976 6174         </activat
│ +00001a50: 696f 6e3e 0d0a 2020 2020 2020 2020 2020  ion>..          
│ +00001a60: 2020 3c64 6570 656e 6465 6e63 794d 616e    <dependencyMan
│ +00001a70: 6167 656d 656e 743e 0d0a 2020 2020 2020  agement>..      
│ +00001a80: 2020 2020 2020 2020 2020 3c64 6570 656e            <depen
│ +00001a90: 6465 6e63 6965 733e 0d0a 2020 2020 2020  dencies>..      
│ +00001aa0: 2020 2020 2020 2020 2020 2020 2020 3c64                <d
│ +00001ab0: 6570 656e 6465 6e63 793e 0d0a 2020 2020  ependency>..    
│  00001ac0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001ad0: 203c 2f64 6570 656e 6465 6e63 793e 0a20   </dependency>. 
│ -00001ae0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001af0: 2020 203c 6465 7065 6e64 656e 6379 3e0a     <dependency>.
│ +00001ad0: 2020 2020 3c67 726f 7570 4964 3e6f 7267      <groupId>org
│ +00001ae0: 2e61 7061 6368 652e 736c 696e 673c 2f67  .apache.sling</g
│ +00001af0: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
│  00001b00: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001b10: 2020 2020 2020 2020 3c67 726f 7570 4964          <groupId
│ -00001b20: 3e6f 7267 2e61 7061 6368 652e 6a61 636b  >org.apache.jack
│ -00001b30: 7261 6262 6974 3c2f 6772 6f75 7049 643e  rabbit</groupId>
│ -00001b40: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
│ -00001b50: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
│ -00001b60: 6374 4964 3e6a 6163 6b72 6162 6269 742d  ctId>jackrabbit-
│ -00001b70: 6a63 722d 636f 6d6d 6f6e 733c 2f61 7274  jcr-commons</art
│ -00001b80: 6966 6163 7449 643e 0a20 2020 2020 2020  ifactId>.       
│ -00001b90: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001ba0: 203c 7665 7273 696f 6e3e 322e 3231 2e39   <version>2.21.9
│ -00001bb0: 3c2f 7665 7273 696f 6e3e 0a20 2020 2020  </version>.     
│ -00001bc0: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ -00001bd0: 2f64 6570 656e 6465 6e63 793e 0a20 2020  /dependency>.   
│ -00001be0: 2020 2020 2020 2020 2020 2020 203c 2f64               </d
│ -00001bf0: 6570 656e 6465 6e63 6965 733e 0a20 2020  ependencies>.   
│ -00001c00: 2020 2020 2020 2020 203c 2f64 6570 656e           </depen
│ -00001c10: 6465 6e63 794d 616e 6167 656d 656e 743e  dencyManagement>
│ -00001c20: 0a20 2020 2020 2020 203c 2f70 726f 6669  .        </profi
│ -00001c30: 6c65 3e0a 2020 2020 3c2f 7072 6f66 696c  le>.    </profil
│ -00001c40: 6573 3e0a 0a3c 2f70 726f 6a65 6374 3e0a  es>..</project>.
│ +00001b10: 203c 6172 7469 6661 6374 4964 3e6f 7267   <artifactId>org
│ +00001b20: 2e61 7061 6368 652e 736c 696e 672e 6170  .apache.sling.ap
│ +00001b30: 693c 2f61 7274 6966 6163 7449 643e 0d0a  i</artifactId>..
│ +00001b40: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00001b50: 2020 2020 2020 2020 3c76 6572 7369 6f6e          <version
│ +00001b60: 3e32 2e32 352e 303c 2f76 6572 7369 6f6e  >2.25.0</version
│ +00001b70: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
│ +00001b80: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
│ +00001b90: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
│ +00001ba0: 2020 2020 2020 2020 2020 3c64 6570 656e            <depen
│ +00001bb0: 6465 6e63 793e 0d0a 2020 2020 2020 2020  dency>..        
│ +00001bc0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00001bd0: 3c67 726f 7570 4964 3e6f 7267 2e61 7061  <groupId>org.apa
│ +00001be0: 6368 652e 6a61 636b 7261 6262 6974 3c2f  che.jackrabbit</
│ +00001bf0: 6772 6f75 7049 643e 0d0a 2020 2020 2020  groupId>..      
│ +00001c00: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00001c10: 2020 3c61 7274 6966 6163 7449 643e 6a61    <artifactId>ja
│ +00001c20: 636b 7261 6262 6974 2d6a 6372 2d63 6f6d  ckrabbit-jcr-com
│ +00001c30: 6d6f 6e73 3c2f 6172 7469 6661 6374 4964  mons</artifactId
│ +00001c40: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
│ +00001c50: 2020 2020 2020 2020 2020 203c 7665 7273             <vers
│ +00001c60: 696f 6e3e 322e 3231 2e39 3c2f 7665 7273  ion>2.21.9</vers
│ +00001c70: 696f 6e3e 0d0a 2020 2020 2020 2020 2020  ion>..          
│ +00001c80: 2020 2020 2020 2020 2020 3c2f 6465 7065            </depe
│ +00001c90: 6e64 656e 6379 3e0d 0a20 2020 2020 2020  ndency>..       
│ +00001ca0: 2020 2020 2020 2020 203c 2f64 6570 656e           </depen
│ +00001cb0: 6465 6e63 6965 733e 0d0a 2020 2020 2020  dencies>..      
│ +00001cc0: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ +00001cd0: 6379 4d61 6e61 6765 6d65 6e74 3e0d 0a20  cyManagement>.. 
│ +00001ce0: 2020 2020 2020 203c 2f70 726f 6669 6c65         </profile
│ +00001cf0: 3e0d 0a20 2020 203c 2f70 726f 6669 6c65  >..    </profile
│ +00001d00: 733e 0d0a 0d0a 3c2f 7072 6f6a 6563 743e  s>....</project>
│ +00001d10: 0d0a                                     ..
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/DateUtils.java
│ @@ -1,99 +1,99 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.Calendar;
│ -import java.util.Date;
│ -
│ -import org.apache.jackrabbit.util.ISO8601;
│ -
│ -/**
│ - * This is copied from org.apache.sling.api.wrappers.impl.DateUtils
│ - * to avoid dependency to latest Sling API.
│ - * This can be removed when Sling API 2.17.0 or higher is referenced.
│ - */
│ -final class DateUtils {
│ -
│ -    private DateUtils() {
│ -        // static methods only
│ -    }
│ -
│ -    /**
│ -     * @param date Date value
│ -     * @return Calendar value or null
│ -     */
│ -    public static Calendar toCalendar(Date input) {
│ -        if (input == null) {
│ -            return null;
│ -        }
│ -        Calendar result = Calendar.getInstance();
│ -        result.setTime(input);
│ -        return result;
│ -    }
│ -
│ -    /**
│ -     * @param calendar Calendar value
│ -     * @return Date value or null
│ -     */
│ -    public static Date toDate(Calendar input) {
│ -        if (input == null) {
│ -            return null;
│ -        }
│ -        return input.getTime();
│ -    }
│ -
│ -    /**
│ -     * @param input Date value
│ -     * @return ISO8601 string representation or null
│ -     */
│ -    public static String dateToString(Date input) {
│ -        return calendarToString(toCalendar(input));
│ -    }
│ -
│ -    /**
│ -     * @param input Calendar value
│ -     * @return ISO8601 string representation or null
│ -     */
│ -    public static String calendarToString(Calendar input) {
│ -        if (input == null) {
│ -            return null;
│ -        }
│ -        return ISO8601.format(input);
│ -    }
│ -
│ -    /**
│ -     * @param input ISO8601 string representation
│ -     * @return Date value or null
│ -     */
│ -    public static Date dateFromString(String input) {
│ -        return toDate(calendarFromString(input));
│ -    }
│ -
│ -    /**
│ -     * @param input ISO8601 string representation
│ -     * @return Calendar value or null
│ -     */
│ -    public static Calendar calendarFromString(String input) {
│ -        if (input == null) {
│ -            return null;
│ -        }
│ -        return ISO8601.parse(input);
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.Calendar;
│ +import java.util.Date;
│ +
│ +import org.apache.jackrabbit.util.ISO8601;
│ +
│ +/**
│ + * This is copied from org.apache.sling.api.wrappers.impl.DateUtils
│ + * to avoid dependency to latest Sling API.
│ + * This can be removed when Sling API 2.17.0 or higher is referenced.
│ + */
│ +final class DateUtils {
│ +
│ +    private DateUtils() {
│ +        // static methods only
│ +    }
│ +
│ +    /**
│ +     * @param date Date value
│ +     * @return Calendar value or null
│ +     */
│ +    public static Calendar toCalendar(Date input) {
│ +        if (input == null) {
│ +            return null;
│ +        }
│ +        Calendar result = Calendar.getInstance();
│ +        result.setTime(input);
│ +        return result;
│ +    }
│ +
│ +    /**
│ +     * @param calendar Calendar value
│ +     * @return Date value or null
│ +     */
│ +    public static Date toDate(Calendar input) {
│ +        if (input == null) {
│ +            return null;
│ +        }
│ +        return input.getTime();
│ +    }
│ +
│ +    /**
│ +     * @param input Date value
│ +     * @return ISO8601 string representation or null
│ +     */
│ +    public static String dateToString(Date input) {
│ +        return calendarToString(toCalendar(input));
│ +    }
│ +
│ +    /**
│ +     * @param input Calendar value
│ +     * @return ISO8601 string representation or null
│ +     */
│ +    public static String calendarToString(Calendar input) {
│ +        if (input == null) {
│ +            return null;
│ +        }
│ +        return ISO8601.format(input);
│ +    }
│ +
│ +    /**
│ +     * @param input ISO8601 string representation
│ +     * @return Date value or null
│ +     */
│ +    public static Date dateFromString(String input) {
│ +        return toDate(calendarFromString(input));
│ +    }
│ +
│ +    /**
│ +     * @param input ISO8601 string representation
│ +     * @return Calendar value or null
│ +     */
│ +    public static Calendar calendarFromString(String input) {
│ +        if (input == null) {
│ +            return null;
│ +        }
│ +        return ISO8601.parse(input);
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/DefaultMockResourceFactory.java
│ @@ -1,37 +1,37 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one or more
│ - * contributor license agreements.  See the NOTICE file distributed with
│ - * this work for additional information regarding copyright ownership.
│ - * The ASF licenses this file to You under the Apache License, Version 2.0
│ - * (the "License"); you may not use this file except in compliance with
│ - * the License.  You may obtain a copy of the License at
│ - *
│ - *      http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing, software
│ - * distributed under the License is distributed on an "AS IS" BASIS,
│ - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
│ - * See the License for the specific language governing permissions and
│ - * limitations under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.Map;
│ -
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -
│ -/**
│ - * Default factory implementation that always returns a MockResource
│ - * object
│ - */
│ -public class DefaultMockResourceFactory implements MockResourceFactory {
│ -
│ -    @Override
│ -    public Resource newMockResource(final String path, 
│ -            final Map<String, Object> properties, 
│ -            final ResourceResolver resolver) {
│ -        return new MockResource(path, properties, resolver);
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one or more
│ + * contributor license agreements.  See the NOTICE file distributed with
│ + * this work for additional information regarding copyright ownership.
│ + * The ASF licenses this file to You under the Apache License, Version 2.0
│ + * (the "License"); you may not use this file except in compliance with
│ + * the License.  You may obtain a copy of the License at
│ + *
│ + *      http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing, software
│ + * distributed under the License is distributed on an "AS IS" BASIS,
│ + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
│ + * See the License for the specific language governing permissions and
│ + * limitations under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.Map;
│ +
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +
│ +/**
│ + * Default factory implementation that always returns a MockResource
│ + * object
│ + */
│ +public class DefaultMockResourceFactory implements MockResourceFactory {
│ +
│ +    @Override
│ +    public Resource newMockResource(final String path, 
│ +            final Map<String, Object> properties, 
│ +            final ResourceResolver resolver) {
│ +        return new MockResource(path, properties, resolver);
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockFindResourcesHandler.java
│ @@ -1,41 +1,41 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.Iterator;
│ -
│ -import org.apache.sling.api.resource.Resource;
│ -import org.jetbrains.annotations.NotNull;
│ -import org.jetbrains.annotations.Nullable;
│ -import org.osgi.annotation.versioning.ConsumerType;
│ -
│ -/**
│ - * Can provide a result when finding resources using a certain query/language.
│ - */
│ -@ConsumerType
│ -public interface MockFindResourcesHandler {
│ -
│ -    /**
│ -     * @param query Query
│ -     * @param language Language
│ -     * @return Returns a non-null value if a mocked result is available
│ -     */
│ -    @Nullable Iterator<Resource> findResources(final @NotNull String query, final String language);
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.Iterator;
│ +
│ +import org.apache.sling.api.resource.Resource;
│ +import org.jetbrains.annotations.NotNull;
│ +import org.jetbrains.annotations.Nullable;
│ +import org.osgi.annotation.versioning.ConsumerType;
│ +
│ +/**
│ + * Can provide a result when finding resources using a certain query/language.
│ + */
│ +@ConsumerType
│ +public interface MockFindResourcesHandler {
│ +
│ +    /**
│ +     * @param query Query
│ +     * @param language Language
│ +     * @return Returns a non-null value if a mocked result is available
│ +     */
│ +    @Nullable Iterator<Resource> findResources(final @NotNull String query, final String language);
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockHelper.java
│ @@ -1,133 +1,133 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.HashMap;
│ -import java.util.Map;
│ -import java.util.Stack;
│ -
│ -import org.apache.sling.api.resource.PersistenceException;
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ResourceUtil;
│ -import org.jetbrains.annotations.NotNull;
│ -import org.jetbrains.annotations.Nullable;
│ -
│ -/**
│ - * Helper class to create resources:
│ - *
│ - * MockHelper.create(resolver).resource("/libs").p("prop", "value")
│ - *                              .resource("sub").p("sub", "hello")
│ - *                              .resource(".sameLevel")
│ - *                            .resource("/apps").p("foo", "baa").commit()
│ - *
│ - */
│ -public class MockHelper {
│ -
│ -    private final ResourceResolver resolver;
│ -
│ -    private final Stack<Description> stack = new Stack<Description>();
│ -
│ -    private MockHelper(final ResourceResolver r) {
│ -        this.resolver = r;
│ -    }
│ -
│ -
│ -    /**
│ -     * Create a new helper
│ -     * @param resolver Resource resolver
│ -     * @return this
│ -     */
│ -    public static @NotNull MockHelper create(@NotNull final ResourceResolver resolver) {
│ -        return new MockHelper(resolver);
│ -    }
│ -
│ -    /**
│ -     * Add a new resource.
│ -     * If the path is relative, this resource is added as a child to the previous resource.
│ -     * If the path is relative and starts with a dot, this resource is added as a peer to the previous resource.
│ -     * @param path Resource path
│ -     * @return this
│ -     */
│ -    public @NotNull MockHelper resource(@NotNull final String path) {
│ -        final String fullPath;
│ -        if ( path.startsWith("/") ) {
│ -            fullPath = path;
│ -        } else if ( path.startsWith(".") ) {
│ -            final Description d = this.stack.peek();
│ -            fullPath = ResourceUtil.normalize(d.path + "/../" + path.substring(1));
│ -        } else {
│ -            final Description d = this.stack.peek();
│ -            fullPath = d.path + "/" + path;
│ -        }
│ -        final Description d = new Description();
│ -        d.path = fullPath;
│ -        this.stack.push(d);
│ -
│ -        return this;
│ -    }
│ -
│ -    /**
│ -     * Add a property to the current resource
│ -     * @param name Property name
│ -     * @param value Property value
│ -     * @return this
│ -     */
│ -    public @NotNull MockHelper p(@NotNull final String name, @Nullable final Object value) {
│ -        final Description d = this.stack.peek();
│ -        d.properties.put(name, value);
│ -
│ -        return this;
│ -    }
│ -
│ -    /**
│ -     * Finish building and add all resources to the resource tree.
│ -     * @throws PersistenceException Persistence exception
│ -     */
│ -    public void add() throws PersistenceException {
│ -        for(int i=0; i<this.stack.size(); i++) {
│ -            final Description d = this.stack.get(i);
│ -            this.create(d.path, d.properties);
│ -        }
│ -        this.stack.clear();
│ -    }
│ -
│ -    /**
│ -     * Finish building, add all resources to the resource tree and commit changes.
│ -     * @throws PersistenceException Persistence exception
│ -     */
│ -    public void commit() throws PersistenceException {
│ -        this.add();
│ -        this.resolver.commit();
│ -    }
│ -
│ -    @SuppressWarnings("null")
│ -    private void create(@NotNull final String path, @NotNull final Map<String, Object> properties) throws PersistenceException {
│ -        final String parentPath = ResourceUtil.getParent(path);
│ -        final String name = ResourceUtil.getName(path);
│ -
│ -        final Resource parent = this.resolver.getResource(parentPath);
│ -        this.resolver.create(parent, name, properties);
│ -    }
│ -
│ -    private static final class Description {
│ -        public String path;
│ -        public Map<String, Object> properties = new HashMap<String, Object>();
│ -    }
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.HashMap;
│ +import java.util.Map;
│ +import java.util.Stack;
│ +
│ +import org.apache.sling.api.resource.PersistenceException;
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ResourceUtil;
│ +import org.jetbrains.annotations.NotNull;
│ +import org.jetbrains.annotations.Nullable;
│ +
│ +/**
│ + * Helper class to create resources:
│ + *
│ + * MockHelper.create(resolver).resource("/libs").p("prop", "value")
│ + *                              .resource("sub").p("sub", "hello")
│ + *                              .resource(".sameLevel")
│ + *                            .resource("/apps").p("foo", "baa").commit()
│ + *
│ + */
│ +public class MockHelper {
│ +
│ +    private final ResourceResolver resolver;
│ +
│ +    private final Stack<Description> stack = new Stack<Description>();
│ +
│ +    private MockHelper(final ResourceResolver r) {
│ +        this.resolver = r;
│ +    }
│ +
│ +
│ +    /**
│ +     * Create a new helper
│ +     * @param resolver Resource resolver
│ +     * @return this
│ +     */
│ +    public static @NotNull MockHelper create(@NotNull final ResourceResolver resolver) {
│ +        return new MockHelper(resolver);
│ +    }
│ +
│ +    /**
│ +     * Add a new resource.
│ +     * If the path is relative, this resource is added as a child to the previous resource.
│ +     * If the path is relative and starts with a dot, this resource is added as a peer to the previous resource.
│ +     * @param path Resource path
│ +     * @return this
│ +     */
│ +    public @NotNull MockHelper resource(@NotNull final String path) {
│ +        final String fullPath;
│ +        if ( path.startsWith("/") ) {
│ +            fullPath = path;
│ +        } else if ( path.startsWith(".") ) {
│ +            final Description d = this.stack.peek();
│ +            fullPath = ResourceUtil.normalize(d.path + "/../" + path.substring(1));
│ +        } else {
│ +            final Description d = this.stack.peek();
│ +            fullPath = d.path + "/" + path;
│ +        }
│ +        final Description d = new Description();
│ +        d.path = fullPath;
│ +        this.stack.push(d);
│ +
│ +        return this;
│ +    }
│ +
│ +    /**
│ +     * Add a property to the current resource
│ +     * @param name Property name
│ +     * @param value Property value
│ +     * @return this
│ +     */
│ +    public @NotNull MockHelper p(@NotNull final String name, @Nullable final Object value) {
│ +        final Description d = this.stack.peek();
│ +        d.properties.put(name, value);
│ +
│ +        return this;
│ +    }
│ +
│ +    /**
│ +     * Finish building and add all resources to the resource tree.
│ +     * @throws PersistenceException Persistence exception
│ +     */
│ +    public void add() throws PersistenceException {
│ +        for(int i=0; i<this.stack.size(); i++) {
│ +            final Description d = this.stack.get(i);
│ +            this.create(d.path, d.properties);
│ +        }
│ +        this.stack.clear();
│ +    }
│ +
│ +    /**
│ +     * Finish building, add all resources to the resource tree and commit changes.
│ +     * @throws PersistenceException Persistence exception
│ +     */
│ +    public void commit() throws PersistenceException {
│ +        this.add();
│ +        this.resolver.commit();
│ +    }
│ +
│ +    @SuppressWarnings("null")
│ +    private void create(@NotNull final String path, @NotNull final Map<String, Object> properties) throws PersistenceException {
│ +        final String parentPath = ResourceUtil.getParent(path);
│ +        final String name = ResourceUtil.getName(path);
│ +
│ +        final Resource parent = this.resolver.getResource(parentPath);
│ +        this.resolver.create(parent, name, properties);
│ +    }
│ +
│ +    private static final class Description {
│ +        public String path;
│ +        public Map<String, Object> properties = new HashMap<String, Object>();
│ +    }
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockPropertyResource.java
│ @@ -1,85 +1,85 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import org.apache.sling.api.resource.AbstractResource;
│ -import org.apache.sling.api.resource.ResourceMetadata;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ResourceUtil;
│ -import org.apache.sling.api.resource.ValueMap;
│ -import org.jetbrains.annotations.NotNull;
│ -
│ -/**
│ - * Resource that wraps a property value.
│ - */
│ -class MockPropertyResource extends AbstractResource {
│ -
│ -    private final String path;
│ -    private final ValueMap props;
│ -    private final String key;
│ -    private final ResourceResolver resolver;
│ -    private final ResourceMetadata rm = new ResourceMetadata();
│ -
│ -    public MockPropertyResource(final String path,
│ -            final ValueMap props,
│ -            final ResourceResolver resolver) {
│ -        this.path = path;
│ -        this.props = props;
│ -        this.key = ResourceUtil.getName(path);
│ -        this.resolver = resolver;
│ -    }
│ -
│ -    @Override
│ -    public @NotNull String getPath() {
│ -        return this.path;
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("null")
│ -    public @NotNull String getResourceType() {
│ -        // TODO: we should return a resource type here!
│ -        return null;
│ -    }
│ -
│ -    @Override
│ -    public String getResourceSuperType() {
│ -        return null;
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceMetadata getResourceMetadata() {
│ -        return rm;
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceResolver getResourceResolver() {
│ -        return this.resolver;
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("null")
│ -    public <AdapterType> AdapterType adaptTo(Class<AdapterType> type) {
│ -        AdapterType value = props.get(key, type);
│ -        if (value!=null) {
│ -            return value;
│ -        }
│ -        return super.adaptTo(type);
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import org.apache.sling.api.resource.AbstractResource;
│ +import org.apache.sling.api.resource.ResourceMetadata;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ResourceUtil;
│ +import org.apache.sling.api.resource.ValueMap;
│ +import org.jetbrains.annotations.NotNull;
│ +
│ +/**
│ + * Resource that wraps a property value.
│ + */
│ +class MockPropertyResource extends AbstractResource {
│ +
│ +    private final String path;
│ +    private final ValueMap props;
│ +    private final String key;
│ +    private final ResourceResolver resolver;
│ +    private final ResourceMetadata rm = new ResourceMetadata();
│ +
│ +    public MockPropertyResource(final String path,
│ +            final ValueMap props,
│ +            final ResourceResolver resolver) {
│ +        this.path = path;
│ +        this.props = props;
│ +        this.key = ResourceUtil.getName(path);
│ +        this.resolver = resolver;
│ +    }
│ +
│ +    @Override
│ +    public @NotNull String getPath() {
│ +        return this.path;
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("null")
│ +    public @NotNull String getResourceType() {
│ +        // TODO: we should return a resource type here!
│ +        return null;
│ +    }
│ +
│ +    @Override
│ +    public String getResourceSuperType() {
│ +        return null;
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceMetadata getResourceMetadata() {
│ +        return rm;
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceResolver getResourceResolver() {
│ +        return this.resolver;
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("null")
│ +    public <AdapterType> AdapterType adaptTo(Class<AdapterType> type) {
│ +        AdapterType value = props.get(key, type);
│ +        if (value!=null) {
│ +            return value;
│ +        }
│ +        return super.adaptTo(type);
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockQueryResourceHandler.java
│ @@ -1,41 +1,41 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.Iterator;
│ -import java.util.Map;
│ -
│ -import org.jetbrains.annotations.NotNull;
│ -import org.jetbrains.annotations.Nullable;
│ -import org.osgi.annotation.versioning.ConsumerType;
│ -
│ -/**
│ - * Can provide a result when querying for resources using a certain query/language.
│ - */
│ -@ConsumerType
│ -public interface MockQueryResourceHandler {
│ -
│ -    /**
│ -     * @param query Query
│ -     * @param language Language
│ -     * @return Returns a non-null value if a mocked result is available
│ -     */
│ -    @Nullable Iterator<Map<String, Object>> queryResources(@NotNull String query, String language);
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.Iterator;
│ +import java.util.Map;
│ +
│ +import org.jetbrains.annotations.NotNull;
│ +import org.jetbrains.annotations.Nullable;
│ +import org.osgi.annotation.versioning.ConsumerType;
│ +
│ +/**
│ + * Can provide a result when querying for resources using a certain query/language.
│ + */
│ +@ConsumerType
│ +public interface MockQueryResourceHandler {
│ +
│ +    /**
│ +     * @param query Query
│ +     * @param language Language
│ +     * @return Returns a non-null value if a mocked result is available
│ +     */
│ +    @Nullable Iterator<Map<String, Object>> queryResources(@NotNull String query, String language);
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockResource.java
│ @@ -1,148 +1,148 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.io.InputStream;
│ -import java.util.Map;
│ -
│ -import org.apache.sling.api.resource.AbstractResource;
│ -import org.apache.sling.api.resource.ModifiableValueMap;
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceMetadata;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ResourceUtil;
│ -import org.apache.sling.api.resource.ValueMap;
│ -import org.jetbrains.annotations.NotNull;
│ -
│ -public class MockResource extends AbstractResource {
│ -
│ -    private final String path;
│ -
│ -    private final ValueMap props;
│ -
│ -    private final ResourceMetadata rm = new ResourceMetadata();
│ -
│ -    private final ResourceResolver resolver;
│ -
│ -    static final String JCR_PRIMARYTYPE = "jcr:primaryType";
│ -    static final String JCR_CONTENT = "jcr:content";
│ -    static final String JCR_DATA = "jcr:data";
│ -    static final String NT_RESOURCE = "nt:resource";
│ -    static final String NT_FILE = "nt:file";
│ -    static final String NT_UNSTRUCTURED = "nt:unstructured";
│ -
│ -    public MockResource(final String path,
│ -            final Map<String, Object> props,
│ -            final ResourceResolver resolver) {
│ -        this.resolver = resolver;
│ -        this.path = path;
│ -        rm.setResolutionPath(path);
│ -        if (props instanceof MockValueMap) {
│ -            this.props = (MockValueMap)props;
│ -        }
│ -        else if (props instanceof ReadonlyValueMapDecorator &&  ((ReadonlyValueMapDecorator)props).getDelegate() instanceof MockValueMap) {
│ -            this.props = ((ReadonlyValueMapDecorator)props).getDelegate();
│ -        }
│ -        else {
│ -            this.props = new MockValueMap(this, props);
│ -        }
│ -    }
│ -
│ -    @Override
│ -    public @NotNull String getPath() {
│ -        return this.path;
│ -    }
│ -
│ -    @Override
│ -    public @NotNull String getResourceType() {
│ -        String resourceType = this.props.get(ResourceResolver.PROPERTY_RESOURCE_TYPE, String.class);
│ -        if (resourceType == null) {
│ -            // fallback to jcr:primaryType if not resouce type exists (to mimick JCR resource behavior)
│ -            resourceType = this.props.get(JCR_PRIMARYTYPE, String.class);
│ -        }
│ -        if (resourceType == null) {
│ -            // fallback to nt:unstructured if no other resource type can be detected
│ -            resourceType = NT_UNSTRUCTURED;
│ -        }
│ -        return resourceType;
│ -    }
│ -
│ -    @Override
│ -    public String getResourceSuperType() {
│ -        return this.props.get("sling:resourceSuperType", String.class);
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceMetadata getResourceMetadata() {
│ -        return rm;
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceResolver getResourceResolver() {
│ -        return this.resolver;
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings({ "unchecked", "null" })
│ -    public <AdapterType> AdapterType adaptTo(final Class<AdapterType> type) {
│ -        if ( type == ValueMap.class || type == Map.class ) {
│ -            return (AdapterType)new ReadonlyValueMapDecorator(this.props);
│ -        }
│ -        else if ( type == ModifiableValueMap.class ) {
│ -            ((MockResourceResolver)this.resolver).addChanged(this.path, this.props);
│ -            return (AdapterType)this.props;
│ -        }
│ -        else if ( type == InputStream.class ) {
│ -            InputStream is = getFileResourceInputStream();
│ -            if (is != null) {
│ -                return (AdapterType)is;
│ -            }
│ -        }
│ -        return super.adaptTo(type);
│ -    }
│ -
│ -    /**
│ -     * Emulate feature of JCR resource implementation that allows adapting to InputStream for nt:file and nt:resource nodes.
│ -     * @return InputStream or null if adaption not possible.
│ -     */
│ -    private InputStream getFileResourceInputStream() {
│ -        String resourceType = getResourceType();
│ -        if (NT_RESOURCE.equals(resourceType)) {
│ -            return getValueMap().get(JCR_DATA, InputStream.class);
│ -        }
│ -        else if (NT_FILE.equals(resourceType)) {
│ -            Resource contentResource = getChild(JCR_CONTENT);
│ -            if (contentResource != null) {
│ -                return ResourceUtil.getValueMap(contentResource).get(JCR_DATA, InputStream.class);
│ -            }
│ -        }
│ -        return null;
│ -    }
│ -
│ -    @Override
│ -    public ValueMap getValueMap() {
│ -        return this.adaptTo(ValueMap.class);
│ -    }
│ -
│ -    @Override
│ -    public String toString() {
│ -        return "MockResource [path=" + path + ", props=" + props + "]";
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.io.InputStream;
│ +import java.util.Map;
│ +
│ +import org.apache.sling.api.resource.AbstractResource;
│ +import org.apache.sling.api.resource.ModifiableValueMap;
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceMetadata;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ResourceUtil;
│ +import org.apache.sling.api.resource.ValueMap;
│ +import org.jetbrains.annotations.NotNull;
│ +
│ +public class MockResource extends AbstractResource {
│ +
│ +    private final String path;
│ +
│ +    private final ValueMap props;
│ +
│ +    private final ResourceMetadata rm = new ResourceMetadata();
│ +
│ +    private final ResourceResolver resolver;
│ +
│ +    static final String JCR_PRIMARYTYPE = "jcr:primaryType";
│ +    static final String JCR_CONTENT = "jcr:content";
│ +    static final String JCR_DATA = "jcr:data";
│ +    static final String NT_RESOURCE = "nt:resource";
│ +    static final String NT_FILE = "nt:file";
│ +    static final String NT_UNSTRUCTURED = "nt:unstructured";
│ +
│ +    public MockResource(final String path,
│ +            final Map<String, Object> props,
│ +            final ResourceResolver resolver) {
│ +        this.resolver = resolver;
│ +        this.path = path;
│ +        rm.setResolutionPath(path);
│ +        if (props instanceof MockValueMap) {
│ +            this.props = (MockValueMap)props;
│ +        }
│ +        else if (props instanceof ReadonlyValueMapDecorator &&  ((ReadonlyValueMapDecorator)props).getDelegate() instanceof MockValueMap) {
│ +            this.props = ((ReadonlyValueMapDecorator)props).getDelegate();
│ +        }
│ +        else {
│ +            this.props = new MockValueMap(this, props);
│ +        }
│ +    }
│ +
│ +    @Override
│ +    public @NotNull String getPath() {
│ +        return this.path;
│ +    }
│ +
│ +    @Override
│ +    public @NotNull String getResourceType() {
│ +        String resourceType = this.props.get(ResourceResolver.PROPERTY_RESOURCE_TYPE, String.class);
│ +        if (resourceType == null) {
│ +            // fallback to jcr:primaryType if not resouce type exists (to mimick JCR resource behavior)
│ +            resourceType = this.props.get(JCR_PRIMARYTYPE, String.class);
│ +        }
│ +        if (resourceType == null) {
│ +            // fallback to nt:unstructured if no other resource type can be detected
│ +            resourceType = NT_UNSTRUCTURED;
│ +        }
│ +        return resourceType;
│ +    }
│ +
│ +    @Override
│ +    public String getResourceSuperType() {
│ +        return this.props.get("sling:resourceSuperType", String.class);
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceMetadata getResourceMetadata() {
│ +        return rm;
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceResolver getResourceResolver() {
│ +        return this.resolver;
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings({ "unchecked", "null" })
│ +    public <AdapterType> AdapterType adaptTo(final Class<AdapterType> type) {
│ +        if ( type == ValueMap.class || type == Map.class ) {
│ +            return (AdapterType)new ReadonlyValueMapDecorator(this.props);
│ +        }
│ +        else if ( type == ModifiableValueMap.class ) {
│ +            ((MockResourceResolver)this.resolver).addChanged(this.path, this.props);
│ +            return (AdapterType)this.props;
│ +        }
│ +        else if ( type == InputStream.class ) {
│ +            InputStream is = getFileResourceInputStream();
│ +            if (is != null) {
│ +                return (AdapterType)is;
│ +            }
│ +        }
│ +        return super.adaptTo(type);
│ +    }
│ +
│ +    /**
│ +     * Emulate feature of JCR resource implementation that allows adapting to InputStream for nt:file and nt:resource nodes.
│ +     * @return InputStream or null if adaption not possible.
│ +     */
│ +    private InputStream getFileResourceInputStream() {
│ +        String resourceType = getResourceType();
│ +        if (NT_RESOURCE.equals(resourceType)) {
│ +            return getValueMap().get(JCR_DATA, InputStream.class);
│ +        }
│ +        else if (NT_FILE.equals(resourceType)) {
│ +            Resource contentResource = getChild(JCR_CONTENT);
│ +            if (contentResource != null) {
│ +                return ResourceUtil.getValueMap(contentResource).get(JCR_DATA, InputStream.class);
│ +            }
│ +        }
│ +        return null;
│ +    }
│ +
│ +    @Override
│ +    public ValueMap getValueMap() {
│ +        return this.adaptTo(ValueMap.class);
│ +    }
│ +
│ +    @Override
│ +    public String toString() {
│ +        return "MockResource [path=" + path + ", props=" + props + "]";
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceFactory.java
│ @@ -1,34 +1,34 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one or more
│ - * contributor license agreements.  See the NOTICE file distributed with
│ - * this work for additional information regarding copyright ownership.
│ - * The ASF licenses this file to You under the Apache License, Version 2.0
│ - * (the "License"); you may not use this file except in compliance with
│ - * the License.  You may obtain a copy of the License at
│ - *
│ - *      http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing, software
│ - * distributed under the License is distributed on an "AS IS" BASIS,
│ - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
│ - * See the License for the specific language governing permissions and
│ - * limitations under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.Map;
│ -
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -
│ -/**
│ - * Implement this interface to customize how MockResource objects
│ - * are created by the MockResourceResolver
│ - */
│ -public interface MockResourceFactory {
│ -
│ -    public Resource newMockResource(final String path, 
│ -            final Map<String, Object> properties,
│ -            final ResourceResolver resolver);
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one or more
│ + * contributor license agreements.  See the NOTICE file distributed with
│ + * this work for additional information regarding copyright ownership.
│ + * The ASF licenses this file to You under the Apache License, Version 2.0
│ + * (the "License"); you may not use this file except in compliance with
│ + * the License.  You may obtain a copy of the License at
│ + *
│ + *      http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing, software
│ + * distributed under the License is distributed on an "AS IS" BASIS,
│ + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
│ + * See the License for the specific language governing permissions and
│ + * limitations under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.Map;
│ +
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +
│ +/**
│ + * Implement this interface to customize how MockResource objects
│ + * are created by the MockResourceResolver
│ + */
│ +public interface MockResourceFactory {
│ +
│ +    public Resource newMockResource(final String path, 
│ +            final Map<String, Object> properties,
│ +            final ResourceResolver resolver);
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceResolver.java
│ @@ -1,561 +1,561 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.io.Closeable;
│ -import java.util.ArrayList;
│ -import java.util.Collections;
│ -import java.util.Dictionary;
│ -import java.util.HashMap;
│ -import java.util.HashSet;
│ -import java.util.Hashtable;
│ -import java.util.Iterator;
│ -import java.util.LinkedHashMap;
│ -import java.util.List;
│ -import java.util.Map;
│ -import java.util.Map.Entry;
│ -import java.util.Objects;
│ -import java.util.Set;
│ -import java.util.regex.Pattern;
│ -
│ -import javax.servlet.http.HttpServletRequest;
│ -
│ -import org.apache.sling.api.SlingConstants;
│ -import org.apache.sling.api.SlingException;
│ -import org.apache.sling.api.adapter.SlingAdaptable;
│ -import org.apache.sling.api.resource.LoginException;
│ -import org.apache.sling.api.resource.NonExistingResource;
│ -import org.apache.sling.api.resource.PersistenceException;
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ResourceUtil;
│ -import org.apache.sling.api.resource.ValueMap;
│ -import org.jetbrains.annotations.NotNull;
│ -import org.jetbrains.annotations.Nullable;
│ -import org.osgi.service.event.Event;
│ -import org.osgi.service.event.EventAdmin;
│ -
│ -public class MockResourceResolver extends SlingAdaptable implements ResourceResolver {
│ -
│ -    private final Map<String, Map<String, Object>> resources;
│ -
│ -    private final Map<String, Map<String, Object>> temporaryResources = new LinkedHashMap<String, Map<String,Object>>();
│ -
│ -    private final Set<String> deletedResources = new HashSet<String>();
│ -
│ -    private final MockResourceResolverFactoryOptions options;
│ -
│ -    private final MockResourceResolverFactory factory;
│ -
│ -    private final Map<String,Object> attributes;
│ -
│ -    private Map<String,Object> propertyMap;
│ -
│ -    private final List<MockFindResourcesHandler> findResourcesHandlers = new ArrayList<>();
│ -    private final List<MockQueryResourceHandler> queryResourcesHandlers = new ArrayList<>();
│ -
│ -    public MockResourceResolver(final MockResourceResolverFactoryOptions options,
│ -            final MockResourceResolverFactory factory,
│ -            final Map<String, Map<String, Object>> resources) {
│ -        this(options, factory, resources, Collections.<String,Object>emptyMap());
│ -    }
│ -
│ -    public MockResourceResolver(final MockResourceResolverFactoryOptions options,
│ -            final MockResourceResolverFactory factory,
│ -            final Map<String, Map<String, Object>> resources,
│ -            final Map<String,Object> attributes) {
│ -        this.factory = factory;
│ -        this.options = options;
│ -        this.resources = resources;
│ -        this.attributes = attributes;
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("unused")
│ -    public @NotNull Resource resolve(final @NotNull HttpServletRequest request, final @NotNull String absPath) {
│ -        String path = absPath;
│ -        if (path == null) {
│ -            path = "/";
│ -        }
│ -
│ -        // split off query string or fragment that may be appendend to the URL
│ -        String urlRemainder = null;
│ -        int urlRemainderPos = Math.min(path.indexOf('?'), path.indexOf('#'));
│ -        if (urlRemainderPos >= 0) {
│ -          urlRemainder = path.substring(urlRemainderPos);
│ -          path = path.substring(0, urlRemainderPos);
│ -        }
│ -
│ -        // unmangle namespaces
│ -        if (options.isMangleNamespacePrefixes()) {
│ -            path = NamespaceMangler.unmangleNamespaces(path);
│ -        }
│ -
│ -        // build full path again
│ -        path = path + (urlRemainder != null ? urlRemainder : "");
│ -
│ -        Resource resource = this.getResource(path);
│ -        if (resource == null) {
│ -            resource = new NonExistingResource(this, absPath);
│ -        }
│ -        return resource;
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("null")
│ -    public @NotNull Resource resolve(final @NotNull String absPath) {
│ -        return resolve(null, absPath);
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("null")
│ -    public @NotNull String map(final @NotNull String resourcePath) {
│ -        return map(null, resourcePath);
│ -    }
│ -
│ -    @Override
│ -    public String map(final @NotNull HttpServletRequest request, final @NotNull String resourcePath) {
│ -        String path = resourcePath;
│ -
│ -        // split off query string or fragment that may be appendend to the URL
│ -        String urlRemainder = null;
│ -        int urlRemainderPos = Math.min(path.indexOf('?'), path.indexOf('#'));
│ -        if (urlRemainderPos >= 0) {
│ -          urlRemainder = path.substring(urlRemainderPos);
│ -          path = path.substring(0, urlRemainderPos);
│ -        }
│ -
│ -        // mangle namespaces
│ -        if (options.isMangleNamespacePrefixes()) {
│ -            path = NamespaceMangler.mangleNamespaces(path);
│ -        }
│ -
│ -        // build full path again
│ -        return path + (urlRemainder != null ? urlRemainder : "");
│ -    }
│ -
│ -    @Override
│ -    public Resource getResource(final @NotNull String path) {
│ -        Resource resource = getResourceInternal(path);
│ -
│ -        // if not resource found check if this is a reference to a property
│ -        if (resource == null && path != null) {
│ -            String parentPath = ResourceUtil.getParent(path);
│ -            if (parentPath != null) {
│ -                String name = ResourceUtil.getName(path);
│ -                Resource parentResource = getResourceInternal(parentPath);
│ -                if (parentResource!=null) {
│ -                    ValueMap props = ResourceUtil.getValueMap(parentResource);
│ -                    if (props.containsKey(name)) {
│ -                        return new MockPropertyResource(path, props, this);
│ -                    }
│ -                }
│ -            }
│ -        }
│ -
│ -        return resource;
│ -    }
│ -
│ -    private Resource getResourceInternal(final String path) {
│ -        if (path == null) {
│ -            return null;
│ -        }
│ -
│ -        String normalizedPath = ResourceUtil.normalize(path);
│ -        if (normalizedPath == null) {
│ -            return null;
│ -        } else if ( normalizedPath.startsWith("/") ) {
│ -            if ( this.deletedResources.contains(normalizedPath) ) {
│ -                return null;
│ -            }
│ -            final Map<String, Object> tempProps = this.temporaryResources.get(normalizedPath);
│ -            if ( tempProps != null ) {
│ -                return newMockResource(normalizedPath, tempProps, this);
│ -            }
│ -            synchronized ( this.resources ) {
│ -                final Map<String, Object> props = this.resources.get(normalizedPath);
│ -                if ( props != null ) {
│ -                    return newMockResource(normalizedPath, props, this);
│ -                }
│ -            }
│ -        } else {
│ -            for(final String s : this.getSearchPath() ) {
│ -                final Resource rsrc = this.getResource(s + '/' + normalizedPath);
│ -                if ( rsrc != null ) {
│ -                    return rsrc;
│ -                }
│ -            }
│ -        }
│ -        return null;
│ -    }
│ -
│ -    @Override
│ -    public Resource getResource(Resource base, @NotNull String path) {
│ -        if ( path == null || path.length() == 0 ) {
│ -            path = "/";
│ -        }
│ -        if ( path.startsWith("/") ) {
│ -            return getResource(path);
│ -        }
│ -        if ( base.getPath().equals("/") ) {
│ -            return getResource(base.getPath() + path);
│ -        }
│ -        return getResource(base.getPath() + '/' + path);
│ -    }
│ -
│ -    @Override
│ -    public @NotNull String[] getSearchPath() {
│ -        return this.options.getSearchPaths();
│ -    }
│ -
│ -    @Override
│ -    public @NotNull Iterator<Resource> listChildren(final @NotNull Resource parent) {
│ -        final String pathPrefix = "/".equals(parent.getPath()) ? "" : parent.getPath();
│ -        final Pattern childPathMatcher = Pattern.compile("^" + Pattern.quote(pathPrefix) + "/[^/]+$");
│ -        final Map<String, Map<String, Object>> candidates = new LinkedHashMap<String, Map<String,Object>>();
│ -        synchronized ( this.resources ) {
│ -            for(final Map.Entry<String, Map<String, Object>> e : this.resources.entrySet()) {
│ -                if (childPathMatcher.matcher(e.getKey()).matches()) {
│ -                    if ( !this.deletedResources.contains(e.getKey()) ) {
│ -                        candidates.put(e.getKey(), e.getValue());
│ -                    }
│ -                }
│ -            }
│ -            for(final Map.Entry<String, Map<String, Object>> e : this.temporaryResources.entrySet()) {
│ -                if (childPathMatcher.matcher(e.getKey()).matches()) {
│ -                    if ( !this.deletedResources.contains(e.getKey()) ) {
│ -                        candidates.put(e.getKey(), e.getValue());
│ -                    }
│ -                }
│ -            }
│ -        }
│ -        final List<Resource> children = new ArrayList<Resource>();
│ -        for(final Map.Entry<String, Map<String, Object>> e : candidates.entrySet()) {
│ -            children.add(newMockResource(e.getKey(), e.getValue(), this));
│ -        }
│ -        return children.iterator();
│ -    }
│ -
│ -    private Resource newMockResource(final String path,
│ -            final Map<String, Object> properties,
│ -            final ResourceResolver resolver) {
│ -        return this.options.getMockResourceFactory()
│ -                    .newMockResource(path, properties, resolver);
│ -    }
│ -
│ -    @Override
│ -    public @NotNull Iterable<Resource> getChildren(final @NotNull Resource parent) {
│ -        return new Iterable<Resource>() {
│ -            @Override
│ -            public Iterator<Resource> iterator() {
│ -                return listChildren(parent);
│ -            }
│ -        };
│ -    }
│ -
│ -    @Override
│ -    public boolean isLive() {
│ -        return true;
│ -    }
│ -
│ -    @Override
│ -    public void close() {
│ -        clearPropertyMap();
│ -        this.factory.closed(this);
│ -    }
│ -
│ -    private void clearPropertyMap(){
│ -        if (propertyMap != null) {
│ -            for (Entry<String, Object> entry : propertyMap.entrySet()) {
│ -                if (entry.getValue()  instanceof Closeable) {
│ -                    try {
│ -                        ((Closeable) entry.getValue()).close();
│ -                    } catch (Exception e) {
│ -                        // ignore
│ -                    }
│ -                }
│ -            }
│ -            propertyMap.clear();
│ -        }
│ -    }
│ -
│ -    @Override
│ -    public String getUserID() {
│ -        return null;
│ -    }
│ -
│ -    @Override
│ -    public @NotNull Iterator<String> getAttributeNames() {
│ -        return attributes.keySet().iterator();
│ -    }
│ -
│ -    @Override
│ -    public Object getAttribute(final @NotNull String name) {
│ -        return attributes.get(name);
│ -    }
│ -
│ -    @Override
│ -    public void delete(final @NotNull Resource resource) throws PersistenceException {
│ -        this.deletedResources.add(resource.getPath());
│ -        this.temporaryResources.remove(resource.getPath());
│ -        final String prefixPath = resource.getPath() + '/';
│ -        synchronized ( this.resources ) {
│ -            for(final Map.Entry<String, Map<String, Object>> e : this.resources.entrySet()) {
│ -                if (e.getKey().startsWith(prefixPath)) {
│ -                    this.deletedResources.add(e.getKey());
│ -                }
│ -            }
│ -            final Iterator<Map.Entry<String, Map<String, Object>>> i = this.temporaryResources.entrySet().iterator();
│ -            while ( i.hasNext() ) {
│ -                final Map.Entry<String, Map<String, Object>> e = i.next();
│ -                if (e.getKey().startsWith(prefixPath) ) {
│ -                    i.remove();
│ -                }
│ -            }
│ -        }
│ -    }
│ -
│ -    @Override
│ -    public @NotNull Resource create(@NotNull Resource parent, @NotNull String name,
│ -            Map<String, Object> properties) throws PersistenceException {
│ -        final String path = (parent.getPath().equals("/") ? parent.getPath() + name : parent.getPath() + '/' + name);
│ -        if ( this.temporaryResources.containsKey(path) ) {
│ -            throw new PersistenceException("Path already exists: " + path);
│ -        }
│ -        synchronized ( this.resources ) {
│ -            if ( this.resources.containsKey(path) && !this.deletedResources.contains(path) ) {
│ -                throw new PersistenceException("Path already exists: " + path);
│ -            }
│ -        }
│ -        this.deletedResources.remove(path);
│ -        if ( properties == null ) {
│ -            properties = new HashMap<String, Object>();
│ -        }
│ -
│ -        Resource mockResource = newMockResource(path, properties, this);
│ -        this.temporaryResources.put(path, ResourceUtil.getValueMap(mockResource));
│ -        return mockResource;
│ -    }
│ -
│ -    @Override
│ -    public void revert() {
│ -        this.deletedResources.clear();
│ -        this.temporaryResources.clear();
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("deprecation")
│ -    public void commit() throws PersistenceException {
│ -        EventAdmin eventAdmin = this.options.getEventAdmin();
│ -        synchronized ( this.resources ) {
│ -            for(final String path : this.deletedResources ) {
│ -                if ( this.resources.remove(path) != null && eventAdmin != null ) {
│ -                    final Dictionary<String, Object> props = new Hashtable<String, Object>();
│ -                    props.put(SlingConstants.PROPERTY_PATH, path);
│ -                    final Event e = new Event(SlingConstants.TOPIC_RESOURCE_REMOVED, props);
│ -                    eventAdmin.sendEvent(e);
│ -                }
│ -                this.temporaryResources.remove(path);
│ -            }
│ -            for(final String path : this.temporaryResources.keySet() ) {
│ -                final boolean changed = this.resources.containsKey(path);
│ -                this.resources.put(path, this.temporaryResources.get(path));
│ -                if ( eventAdmin != null ) {
│ -                    final Dictionary<String, Object> props = new Hashtable<String, Object>();
│ -                    props.put(SlingConstants.PROPERTY_PATH, path);
│ -                    if ( this.resources.get(path).get(ResourceResolver.PROPERTY_RESOURCE_TYPE) != null ) {
│ -                        props.put(SlingConstants.PROPERTY_RESOURCE_TYPE, this.resources.get(path).get(ResourceResolver.PROPERTY_RESOURCE_TYPE));
│ -                    }
│ -                    final Event e = new Event(changed ? SlingConstants.TOPIC_RESOURCE_CHANGED : SlingConstants.TOPIC_RESOURCE_ADDED, props);
│ -                    eventAdmin.sendEvent(e);
│ -                }
│ -            }
│ -        }
│ -        this.revert();
│ -    }
│ -
│ -    @Override
│ -    public boolean hasChanges() {
│ -        return this.temporaryResources.size() > 0 || this.deletedResources.size() > 0;
│ -    }
│ -
│ -    @Override
│ -    public boolean isResourceType(Resource resource, String resourceType) {
│ -        boolean result = false;
│ -        if ( resource != null && resourceType != null ) {
│ -             // Check if the resource is of the given type. This method first checks the
│ -             // resource type of the resource, then its super resource type and continues
│ -             //  to go up the resource super type hierarchy.
│ -             if (ResourceTypeUtil.areResourceTypesEqual(resourceType, resource.getResourceType(), getSearchPath())) {
│ -                 result = true;
│ -             } else {
│ -                 Set<String> superTypesChecked = new HashSet<>();
│ -                 String superType = this.getParentResourceType(resource);
│ -                 while (!result && superType != null) {
│ -                     if (ResourceTypeUtil.areResourceTypesEqual(resourceType, superType, getSearchPath())) {
│ -                         result = true;
│ -                     } else {
│ -                         superTypesChecked.add(superType);
│ -                         superType = this.getParentResourceType(superType);
│ -                         if (superType != null && superTypesChecked.contains(superType)) {
│ -                             throw new SlingException("Cyclic dependency for resourceSuperType hierarchy detected on resource " + resource.getPath()) {
│ -                                // anonymous class to avoid problem with null cause
│ -                                private static final long serialVersionUID = 1L;
│ -                             };
│ -                         }
│ -                     }
│ -                 }
│ -             }
│ -
│ -        }
│ -        return result;
│ -    }
│ -
│ -    @Override
│ -    public void refresh() {
│ -        // nothing to do
│ -    }
│ -
│ -    public void addChanged(final String path, final Map<String, Object> props) {
│ -        this.temporaryResources.put(path, props);
│ -    }
│ -
│ -    @Override
│ -    public String getParentResourceType(Resource resource) {
│ -        String resourceSuperType = null;
│ -        if ( resource != null ) {
│ -            resourceSuperType = resource.getResourceSuperType();
│ -            if (resourceSuperType == null) {
│ -                resourceSuperType = this.getParentResourceType(resource.getResourceType());
│ -            }
│ -        }
│ -        return resourceSuperType;
│ -    }
│ -
│ -    @Override
│ -    public String getParentResourceType(String resourceType) {
│ -        // normalize resource type to a path string
│ -        final String rtPath = (resourceType == null ? null : ResourceUtil.resourceTypeToPath(resourceType));
│ -        // get the resource type resource and check its super type
│ -        String resourceSuperType = null;
│ -        if ( rtPath != null ) {
│ -            final Resource rtResource = getResource(rtPath);
│ -            if (rtResource != null) {
│ -                resourceSuperType = rtResource.getResourceSuperType();
│ -            }
│ -        }
│ -        return resourceSuperType;
│ -    }
│ -
│ -    @Override
│ -    public boolean hasChildren(@NotNull Resource resource) {
│ -        return this.listChildren(resource).hasNext();
│ -    }
│ -
│ -    @Override
│ -    public Resource getParent(@NotNull Resource child) {
│ -        final String parentPath = ResourceUtil.getParent(child.getPath());
│ -        if (parentPath == null) {
│ -            return null;
│ -        }
│ -        return this.getResource(parentPath);
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("null")
│ -    public @NotNull Iterator<Resource> findResources(final @NotNull String query, final String language) {
│ -        return findResourcesHandlers.stream()
│ -            .map(handler -> handler.findResources(query, language))
│ -            .filter(Objects::nonNull)
│ -            .findFirst()
│ -            .orElse(Collections.emptyIterator());
│ -    }
│ -
│ -    /**
│ -     * Adds a handler that can provide a mocked find resources result. You can add multiple handlers which are called
│ -     * in the order they were added when calling {@link #findResources(String, String)}.
│ -     * The result of the first handler that returns a non-null result is used.
│ -     * If no handler delivers a result, an empty result is returned.
│ -     * @param handler Handler
│ -     */
│ -    public void addFindResourceHandler(@NotNull MockFindResourcesHandler handler) {
│ -        findResourcesHandlers.add(handler);
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("null")
│ -    public @NotNull Iterator<Map<String, Object>> queryResources(@NotNull String query, String language) {
│ -        return queryResourcesHandlers.stream()
│ -                .map(handler -> handler.queryResources(query, language))
│ -                .filter(Objects::nonNull)
│ -                .findFirst()
│ -                .orElse(Collections.emptyIterator());
│ -    }
│ -
│ -    /**
│ -     * Adds a handler that can provide a mocked query resources result. You can add multiple handlers which are called
│ -     * in the order they were added when calling {@link #queryResources(String, String)}.
│ -     * The result of the first handler that returns a non-null result is used.
│ -     * If no handler delivers a result, an empty result is returned.
│ -     * @param handler Handler
│ -     */
│ -    public void addQueryResourceHandler(@NotNull MockQueryResourceHandler handler) {
│ -        queryResourcesHandlers.add(handler);
│ -    }
│ -
│ -    // Sling API 2.24.0
│ -    public @NotNull Map<String, Object> getPropertyMap() {
│ -        if (propertyMap == null) {
│ -            propertyMap = new HashMap<>();
│ -        }
│ -        return propertyMap;
│ -    }
│ -
│ -    // --- unsupported operations ---
│ -
│ -    @Override
│ -    @Deprecated
│ -    public @NotNull Resource resolve(final @NotNull HttpServletRequest request) {
│ -        throw new UnsupportedOperationException();
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceResolver clone(Map<String, Object> authenticationInfo) throws LoginException {
│ -        throw new UnsupportedOperationException();
│ -    }
│ -
│ -    @Override
│ -    public Resource copy(String srcAbsPath, String destAbsPath) throws PersistenceException {
│ -        throw new UnsupportedOperationException();
│ -    }
│ -
│ -    @Override
│ -    public Resource move(String srcAbsPath, String destAbsPath) throws PersistenceException {
│ -        throw new UnsupportedOperationException();
│ -    }
│ -
│ -    // Sling API 2.24.0
│ -    public boolean orderBefore(@NotNull Resource parent, @NotNull String name,
│ -            @Nullable String followingSiblingName) throws UnsupportedOperationException, PersistenceException, IllegalArgumentException {
│ -        throw new UnsupportedOperationException();
│ -    }
│ -
│ -
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.io.Closeable;
│ +import java.util.ArrayList;
│ +import java.util.Collections;
│ +import java.util.Dictionary;
│ +import java.util.HashMap;
│ +import java.util.HashSet;
│ +import java.util.Hashtable;
│ +import java.util.Iterator;
│ +import java.util.LinkedHashMap;
│ +import java.util.List;
│ +import java.util.Map;
│ +import java.util.Map.Entry;
│ +import java.util.Objects;
│ +import java.util.Set;
│ +import java.util.regex.Pattern;
│ +
│ +import javax.servlet.http.HttpServletRequest;
│ +
│ +import org.apache.sling.api.SlingConstants;
│ +import org.apache.sling.api.SlingException;
│ +import org.apache.sling.api.adapter.SlingAdaptable;
│ +import org.apache.sling.api.resource.LoginException;
│ +import org.apache.sling.api.resource.NonExistingResource;
│ +import org.apache.sling.api.resource.PersistenceException;
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ResourceUtil;
│ +import org.apache.sling.api.resource.ValueMap;
│ +import org.jetbrains.annotations.NotNull;
│ +import org.jetbrains.annotations.Nullable;
│ +import org.osgi.service.event.Event;
│ +import org.osgi.service.event.EventAdmin;
│ +
│ +public class MockResourceResolver extends SlingAdaptable implements ResourceResolver {
│ +
│ +    private final Map<String, Map<String, Object>> resources;
│ +
│ +    private final Map<String, Map<String, Object>> temporaryResources = new LinkedHashMap<String, Map<String,Object>>();
│ +
│ +    private final Set<String> deletedResources = new HashSet<String>();
│ +
│ +    private final MockResourceResolverFactoryOptions options;
│ +
│ +    private final MockResourceResolverFactory factory;
│ +
│ +    private final Map<String,Object> attributes;
│ +
│ +    private Map<String,Object> propertyMap;
│ +
│ +    private final List<MockFindResourcesHandler> findResourcesHandlers = new ArrayList<>();
│ +    private final List<MockQueryResourceHandler> queryResourcesHandlers = new ArrayList<>();
│ +
│ +    public MockResourceResolver(final MockResourceResolverFactoryOptions options,
│ +            final MockResourceResolverFactory factory,
│ +            final Map<String, Map<String, Object>> resources) {
│ +        this(options, factory, resources, Collections.<String,Object>emptyMap());
│ +    }
│ +
│ +    public MockResourceResolver(final MockResourceResolverFactoryOptions options,
│ +            final MockResourceResolverFactory factory,
│ +            final Map<String, Map<String, Object>> resources,
│ +            final Map<String,Object> attributes) {
│ +        this.factory = factory;
│ +        this.options = options;
│ +        this.resources = resources;
│ +        this.attributes = attributes;
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("unused")
│ +    public @NotNull Resource resolve(final @NotNull HttpServletRequest request, final @NotNull String absPath) {
│ +        String path = absPath;
│ +        if (path == null) {
│ +            path = "/";
│ +        }
│ +
│ +        // split off query string or fragment that may be appendend to the URL
│ +        String urlRemainder = null;
│ +        int urlRemainderPos = Math.min(path.indexOf('?'), path.indexOf('#'));
│ +        if (urlRemainderPos >= 0) {
│ +          urlRemainder = path.substring(urlRemainderPos);
│ +          path = path.substring(0, urlRemainderPos);
│ +        }
│ +
│ +        // unmangle namespaces
│ +        if (options.isMangleNamespacePrefixes()) {
│ +            path = NamespaceMangler.unmangleNamespaces(path);
│ +        }
│ +
│ +        // build full path again
│ +        path = path + (urlRemainder != null ? urlRemainder : "");
│ +
│ +        Resource resource = this.getResource(path);
│ +        if (resource == null) {
│ +            resource = new NonExistingResource(this, absPath);
│ +        }
│ +        return resource;
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("null")
│ +    public @NotNull Resource resolve(final @NotNull String absPath) {
│ +        return resolve(null, absPath);
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("null")
│ +    public @NotNull String map(final @NotNull String resourcePath) {
│ +        return map(null, resourcePath);
│ +    }
│ +
│ +    @Override
│ +    public String map(final @NotNull HttpServletRequest request, final @NotNull String resourcePath) {
│ +        String path = resourcePath;
│ +
│ +        // split off query string or fragment that may be appendend to the URL
│ +        String urlRemainder = null;
│ +        int urlRemainderPos = Math.min(path.indexOf('?'), path.indexOf('#'));
│ +        if (urlRemainderPos >= 0) {
│ +          urlRemainder = path.substring(urlRemainderPos);
│ +          path = path.substring(0, urlRemainderPos);
│ +        }
│ +
│ +        // mangle namespaces
│ +        if (options.isMangleNamespacePrefixes()) {
│ +            path = NamespaceMangler.mangleNamespaces(path);
│ +        }
│ +
│ +        // build full path again
│ +        return path + (urlRemainder != null ? urlRemainder : "");
│ +    }
│ +
│ +    @Override
│ +    public Resource getResource(final @NotNull String path) {
│ +        Resource resource = getResourceInternal(path);
│ +
│ +        // if not resource found check if this is a reference to a property
│ +        if (resource == null && path != null) {
│ +            String parentPath = ResourceUtil.getParent(path);
│ +            if (parentPath != null) {
│ +                String name = ResourceUtil.getName(path);
│ +                Resource parentResource = getResourceInternal(parentPath);
│ +                if (parentResource!=null) {
│ +                    ValueMap props = ResourceUtil.getValueMap(parentResource);
│ +                    if (props.containsKey(name)) {
│ +                        return new MockPropertyResource(path, props, this);
│ +                    }
│ +                }
│ +            }
│ +        }
│ +
│ +        return resource;
│ +    }
│ +
│ +    private Resource getResourceInternal(final String path) {
│ +        if (path == null) {
│ +            return null;
│ +        }
│ +
│ +        String normalizedPath = ResourceUtil.normalize(path);
│ +        if (normalizedPath == null) {
│ +            return null;
│ +        } else if ( normalizedPath.startsWith("/") ) {
│ +            if ( this.deletedResources.contains(normalizedPath) ) {
│ +                return null;
│ +            }
│ +            final Map<String, Object> tempProps = this.temporaryResources.get(normalizedPath);
│ +            if ( tempProps != null ) {
│ +                return newMockResource(normalizedPath, tempProps, this);
│ +            }
│ +            synchronized ( this.resources ) {
│ +                final Map<String, Object> props = this.resources.get(normalizedPath);
│ +                if ( props != null ) {
│ +                    return newMockResource(normalizedPath, props, this);
│ +                }
│ +            }
│ +        } else {
│ +            for(final String s : this.getSearchPath() ) {
│ +                final Resource rsrc = this.getResource(s + '/' + normalizedPath);
│ +                if ( rsrc != null ) {
│ +                    return rsrc;
│ +                }
│ +            }
│ +        }
│ +        return null;
│ +    }
│ +
│ +    @Override
│ +    public Resource getResource(Resource base, @NotNull String path) {
│ +        if ( path == null || path.length() == 0 ) {
│ +            path = "/";
│ +        }
│ +        if ( path.startsWith("/") ) {
│ +            return getResource(path);
│ +        }
│ +        if ( base.getPath().equals("/") ) {
│ +            return getResource(base.getPath() + path);
│ +        }
│ +        return getResource(base.getPath() + '/' + path);
│ +    }
│ +
│ +    @Override
│ +    public @NotNull String[] getSearchPath() {
│ +        return this.options.getSearchPaths();
│ +    }
│ +
│ +    @Override
│ +    public @NotNull Iterator<Resource> listChildren(final @NotNull Resource parent) {
│ +        final String pathPrefix = "/".equals(parent.getPath()) ? "" : parent.getPath();
│ +        final Pattern childPathMatcher = Pattern.compile("^" + Pattern.quote(pathPrefix) + "/[^/]+$");
│ +        final Map<String, Map<String, Object>> candidates = new LinkedHashMap<String, Map<String,Object>>();
│ +        synchronized ( this.resources ) {
│ +            for(final Map.Entry<String, Map<String, Object>> e : this.resources.entrySet()) {
│ +                if (childPathMatcher.matcher(e.getKey()).matches()) {
│ +                    if ( !this.deletedResources.contains(e.getKey()) ) {
│ +                        candidates.put(e.getKey(), e.getValue());
│ +                    }
│ +                }
│ +            }
│ +            for(final Map.Entry<String, Map<String, Object>> e : this.temporaryResources.entrySet()) {
│ +                if (childPathMatcher.matcher(e.getKey()).matches()) {
│ +                    if ( !this.deletedResources.contains(e.getKey()) ) {
│ +                        candidates.put(e.getKey(), e.getValue());
│ +                    }
│ +                }
│ +            }
│ +        }
│ +        final List<Resource> children = new ArrayList<Resource>();
│ +        for(final Map.Entry<String, Map<String, Object>> e : candidates.entrySet()) {
│ +            children.add(newMockResource(e.getKey(), e.getValue(), this));
│ +        }
│ +        return children.iterator();
│ +    }
│ +
│ +    private Resource newMockResource(final String path,
│ +            final Map<String, Object> properties,
│ +            final ResourceResolver resolver) {
│ +        return this.options.getMockResourceFactory()
│ +                    .newMockResource(path, properties, resolver);
│ +    }
│ +
│ +    @Override
│ +    public @NotNull Iterable<Resource> getChildren(final @NotNull Resource parent) {
│ +        return new Iterable<Resource>() {
│ +            @Override
│ +            public Iterator<Resource> iterator() {
│ +                return listChildren(parent);
│ +            }
│ +        };
│ +    }
│ +
│ +    @Override
│ +    public boolean isLive() {
│ +        return true;
│ +    }
│ +
│ +    @Override
│ +    public void close() {
│ +        clearPropertyMap();
│ +        this.factory.closed(this);
│ +    }
│ +
│ +    private void clearPropertyMap(){
│ +        if (propertyMap != null) {
│ +            for (Entry<String, Object> entry : propertyMap.entrySet()) {
│ +                if (entry.getValue()  instanceof Closeable) {
│ +                    try {
│ +                        ((Closeable) entry.getValue()).close();
│ +                    } catch (Exception e) {
│ +                        // ignore
│ +                    }
│ +                }
│ +            }
│ +            propertyMap.clear();
│ +        }
│ +    }
│ +
│ +    @Override
│ +    public String getUserID() {
│ +        return null;
│ +    }
│ +
│ +    @Override
│ +    public @NotNull Iterator<String> getAttributeNames() {
│ +        return attributes.keySet().iterator();
│ +    }
│ +
│ +    @Override
│ +    public Object getAttribute(final @NotNull String name) {
│ +        return attributes.get(name);
│ +    }
│ +
│ +    @Override
│ +    public void delete(final @NotNull Resource resource) throws PersistenceException {
│ +        this.deletedResources.add(resource.getPath());
│ +        this.temporaryResources.remove(resource.getPath());
│ +        final String prefixPath = resource.getPath() + '/';
│ +        synchronized ( this.resources ) {
│ +            for(final Map.Entry<String, Map<String, Object>> e : this.resources.entrySet()) {
│ +                if (e.getKey().startsWith(prefixPath)) {
│ +                    this.deletedResources.add(e.getKey());
│ +                }
│ +            }
│ +            final Iterator<Map.Entry<String, Map<String, Object>>> i = this.temporaryResources.entrySet().iterator();
│ +            while ( i.hasNext() ) {
│ +                final Map.Entry<String, Map<String, Object>> e = i.next();
│ +                if (e.getKey().startsWith(prefixPath) ) {
│ +                    i.remove();
│ +                }
│ +            }
│ +        }
│ +    }
│ +
│ +    @Override
│ +    public @NotNull Resource create(@NotNull Resource parent, @NotNull String name,
│ +            Map<String, Object> properties) throws PersistenceException {
│ +        final String path = (parent.getPath().equals("/") ? parent.getPath() + name : parent.getPath() + '/' + name);
│ +        if ( this.temporaryResources.containsKey(path) ) {
│ +            throw new PersistenceException("Path already exists: " + path);
│ +        }
│ +        synchronized ( this.resources ) {
│ +            if ( this.resources.containsKey(path) && !this.deletedResources.contains(path) ) {
│ +                throw new PersistenceException("Path already exists: " + path);
│ +            }
│ +        }
│ +        this.deletedResources.remove(path);
│ +        if ( properties == null ) {
│ +            properties = new HashMap<String, Object>();
│ +        }
│ +
│ +        Resource mockResource = newMockResource(path, properties, this);
│ +        this.temporaryResources.put(path, ResourceUtil.getValueMap(mockResource));
│ +        return mockResource;
│ +    }
│ +
│ +    @Override
│ +    public void revert() {
│ +        this.deletedResources.clear();
│ +        this.temporaryResources.clear();
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("deprecation")
│ +    public void commit() throws PersistenceException {
│ +        EventAdmin eventAdmin = this.options.getEventAdmin();
│ +        synchronized ( this.resources ) {
│ +            for(final String path : this.deletedResources ) {
│ +                if ( this.resources.remove(path) != null && eventAdmin != null ) {
│ +                    final Dictionary<String, Object> props = new Hashtable<String, Object>();
│ +                    props.put(SlingConstants.PROPERTY_PATH, path);
│ +                    final Event e = new Event(SlingConstants.TOPIC_RESOURCE_REMOVED, props);
│ +                    eventAdmin.sendEvent(e);
│ +                }
│ +                this.temporaryResources.remove(path);
│ +            }
│ +            for(final String path : this.temporaryResources.keySet() ) {
│ +                final boolean changed = this.resources.containsKey(path);
│ +                this.resources.put(path, this.temporaryResources.get(path));
│ +                if ( eventAdmin != null ) {
│ +                    final Dictionary<String, Object> props = new Hashtable<String, Object>();
│ +                    props.put(SlingConstants.PROPERTY_PATH, path);
│ +                    if ( this.resources.get(path).get(ResourceResolver.PROPERTY_RESOURCE_TYPE) != null ) {
│ +                        props.put(SlingConstants.PROPERTY_RESOURCE_TYPE, this.resources.get(path).get(ResourceResolver.PROPERTY_RESOURCE_TYPE));
│ +                    }
│ +                    final Event e = new Event(changed ? SlingConstants.TOPIC_RESOURCE_CHANGED : SlingConstants.TOPIC_RESOURCE_ADDED, props);
│ +                    eventAdmin.sendEvent(e);
│ +                }
│ +            }
│ +        }
│ +        this.revert();
│ +    }
│ +
│ +    @Override
│ +    public boolean hasChanges() {
│ +        return this.temporaryResources.size() > 0 || this.deletedResources.size() > 0;
│ +    }
│ +
│ +    @Override
│ +    public boolean isResourceType(Resource resource, String resourceType) {
│ +        boolean result = false;
│ +        if ( resource != null && resourceType != null ) {
│ +             // Check if the resource is of the given type. This method first checks the
│ +             // resource type of the resource, then its super resource type and continues
│ +             //  to go up the resource super type hierarchy.
│ +             if (ResourceTypeUtil.areResourceTypesEqual(resourceType, resource.getResourceType(), getSearchPath())) {
│ +                 result = true;
│ +             } else {
│ +                 Set<String> superTypesChecked = new HashSet<>();
│ +                 String superType = this.getParentResourceType(resource);
│ +                 while (!result && superType != null) {
│ +                     if (ResourceTypeUtil.areResourceTypesEqual(resourceType, superType, getSearchPath())) {
│ +                         result = true;
│ +                     } else {
│ +                         superTypesChecked.add(superType);
│ +                         superType = this.getParentResourceType(superType);
│ +                         if (superType != null && superTypesChecked.contains(superType)) {
│ +                             throw new SlingException("Cyclic dependency for resourceSuperType hierarchy detected on resource " + resource.getPath()) {
│ +                                // anonymous class to avoid problem with null cause
│ +                                private static final long serialVersionUID = 1L;
│ +                             };
│ +                         }
│ +                     }
│ +                 }
│ +             }
│ +
│ +        }
│ +        return result;
│ +    }
│ +
│ +    @Override
│ +    public void refresh() {
│ +        // nothing to do
│ +    }
│ +
│ +    public void addChanged(final String path, final Map<String, Object> props) {
│ +        this.temporaryResources.put(path, props);
│ +    }
│ +
│ +    @Override
│ +    public String getParentResourceType(Resource resource) {
│ +        String resourceSuperType = null;
│ +        if ( resource != null ) {
│ +            resourceSuperType = resource.getResourceSuperType();
│ +            if (resourceSuperType == null) {
│ +                resourceSuperType = this.getParentResourceType(resource.getResourceType());
│ +            }
│ +        }
│ +        return resourceSuperType;
│ +    }
│ +
│ +    @Override
│ +    public String getParentResourceType(String resourceType) {
│ +        // normalize resource type to a path string
│ +        final String rtPath = (resourceType == null ? null : ResourceUtil.resourceTypeToPath(resourceType));
│ +        // get the resource type resource and check its super type
│ +        String resourceSuperType = null;
│ +        if ( rtPath != null ) {
│ +            final Resource rtResource = getResource(rtPath);
│ +            if (rtResource != null) {
│ +                resourceSuperType = rtResource.getResourceSuperType();
│ +            }
│ +        }
│ +        return resourceSuperType;
│ +    }
│ +
│ +    @Override
│ +    public boolean hasChildren(@NotNull Resource resource) {
│ +        return this.listChildren(resource).hasNext();
│ +    }
│ +
│ +    @Override
│ +    public Resource getParent(@NotNull Resource child) {
│ +        final String parentPath = ResourceUtil.getParent(child.getPath());
│ +        if (parentPath == null) {
│ +            return null;
│ +        }
│ +        return this.getResource(parentPath);
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("null")
│ +    public @NotNull Iterator<Resource> findResources(final @NotNull String query, final String language) {
│ +        return findResourcesHandlers.stream()
│ +            .map(handler -> handler.findResources(query, language))
│ +            .filter(Objects::nonNull)
│ +            .findFirst()
│ +            .orElse(Collections.emptyIterator());
│ +    }
│ +
│ +    /**
│ +     * Adds a handler that can provide a mocked find resources result. You can add multiple handlers which are called
│ +     * in the order they were added when calling {@link #findResources(String, String)}.
│ +     * The result of the first handler that returns a non-null result is used.
│ +     * If no handler delivers a result, an empty result is returned.
│ +     * @param handler Handler
│ +     */
│ +    public void addFindResourceHandler(@NotNull MockFindResourcesHandler handler) {
│ +        findResourcesHandlers.add(handler);
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("null")
│ +    public @NotNull Iterator<Map<String, Object>> queryResources(@NotNull String query, String language) {
│ +        return queryResourcesHandlers.stream()
│ +                .map(handler -> handler.queryResources(query, language))
│ +                .filter(Objects::nonNull)
│ +                .findFirst()
│ +                .orElse(Collections.emptyIterator());
│ +    }
│ +
│ +    /**
│ +     * Adds a handler that can provide a mocked query resources result. You can add multiple handlers which are called
│ +     * in the order they were added when calling {@link #queryResources(String, String)}.
│ +     * The result of the first handler that returns a non-null result is used.
│ +     * If no handler delivers a result, an empty result is returned.
│ +     * @param handler Handler
│ +     */
│ +    public void addQueryResourceHandler(@NotNull MockQueryResourceHandler handler) {
│ +        queryResourcesHandlers.add(handler);
│ +    }
│ +
│ +    // Sling API 2.24.0
│ +    public @NotNull Map<String, Object> getPropertyMap() {
│ +        if (propertyMap == null) {
│ +            propertyMap = new HashMap<>();
│ +        }
│ +        return propertyMap;
│ +    }
│ +
│ +    // --- unsupported operations ---
│ +
│ +    @Override
│ +    @Deprecated
│ +    public @NotNull Resource resolve(final @NotNull HttpServletRequest request) {
│ +        throw new UnsupportedOperationException();
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceResolver clone(Map<String, Object> authenticationInfo) throws LoginException {
│ +        throw new UnsupportedOperationException();
│ +    }
│ +
│ +    @Override
│ +    public Resource copy(String srcAbsPath, String destAbsPath) throws PersistenceException {
│ +        throw new UnsupportedOperationException();
│ +    }
│ +
│ +    @Override
│ +    public Resource move(String srcAbsPath, String destAbsPath) throws PersistenceException {
│ +        throw new UnsupportedOperationException();
│ +    }
│ +
│ +    // Sling API 2.24.0
│ +    public boolean orderBefore(@NotNull Resource parent, @NotNull String name,
│ +            @Nullable String followingSiblingName) throws UnsupportedOperationException, PersistenceException, IllegalArgumentException {
│ +        throw new UnsupportedOperationException();
│ +    }
│ +
│ +
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceResolverFactory.java
│ @@ -1,137 +1,137 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.Arrays;
│ -import java.util.HashMap;
│ -import java.util.LinkedHashMap;
│ -import java.util.List;
│ -import java.util.Map;
│ -import java.util.Stack;
│ -
│ -import org.apache.sling.api.resource.LoginException;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ResourceResolverFactory;
│ -import org.jetbrains.annotations.NotNull;
│ -import org.jetbrains.annotations.Nullable;
│ -import org.osgi.service.event.EventAdmin;
│ -
│ -/**
│ - * Simple resource resolver factory
│ - */
│ -public class MockResourceResolverFactory implements ResourceResolverFactory {
│ -
│ -    private static final String ROOT_PRIMARY_TYPE="rep:root";
│ -
│ -    /** We use a linked hash map to preserve creation order. */
│ -    private final Map<String, Map<String, Object>> resources = new LinkedHashMap<String, Map<String, Object>>();
│ -
│ -    private final MockResourceResolverFactoryOptions options;
│ -
│ -    /**
│ -     * Create a new resource resolver factory
│ -     * @param eventAdmin All resource events are sent to this event admin
│ -     */
│ -    public MockResourceResolverFactory(@Nullable final EventAdmin eventAdmin) {
│ -        this(new MockResourceResolverFactoryOptions().setEventAdmin(eventAdmin));
│ -    }
│ -
│ -    /**
│ -     * Create a new resource resolver factory.
│ -     */
│ -    public MockResourceResolverFactory() {
│ -        this(new MockResourceResolverFactoryOptions());
│ -    }
│ -
│ -    /**
│ -     * Create a new resource resolver factory.
│ -     * @param options Options
│ -     */
│ -    public MockResourceResolverFactory(@NotNull final MockResourceResolverFactoryOptions options) {
│ -        this.options = options;
│ -        Map<String, Object> props= new HashMap<String,Object>();
│ -        props.put(MockResource.JCR_PRIMARYTYPE, ROOT_PRIMARY_TYPE);
│ -        resources.put("/", props);
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceResolver getResourceResolver(
│ -            final Map<String, Object> authenticationInfo) throws LoginException {
│ -
│ -        // put user name in resolver attributes
│ -        Map<String,Object> attributes = new HashMap<String, Object>();
│ -        if (authenticationInfo!=null) {
│ -            attributes.put(ResourceResolverFactory.USER, authenticationInfo.get(ResourceResolverFactory.USER));
│ -        }
│ -
│ -        final ResourceResolver result = new MockResourceResolver(options, this, resources, attributes);
│ -        Stack<ResourceResolver> resolverStack = resolverStackHolder.get();
│ -        if ( resolverStack == null ) {
│ -            resolverStack = new Stack<ResourceResolver>();
│ -            resolverStackHolder.set(resolverStack);
│ -        }
│ -        resolverStack.push(result);
│ -        return result;
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceResolver getAdministrativeResourceResolver(
│ -            final Map<String, Object> authenticationInfo) throws LoginException {
│ -        return new MockResourceResolver(options, this, resources);
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceResolver getServiceResourceResolver(
│ -            Map<String, Object> authenticationInfo) throws LoginException {
│ -        return new MockResourceResolver(options, this, resources);
│ -    }
│ -
│ -    /**
│ -     * Thread local holding the resource resolver stack
│ -     */
│ -    private ThreadLocal<Stack<ResourceResolver>> resolverStackHolder = new ThreadLocal<Stack<ResourceResolver>>();
│ -
│ -    @Override
│ -    public ResourceResolver getThreadResourceResolver() {
│ -        ResourceResolver result = null;
│ -        final Stack<ResourceResolver> resolverStack = resolverStackHolder.get();
│ -        if ( resolverStack != null && !resolverStack.isEmpty() ) {
│ -            result = resolverStack.peek();
│ -        }
│ -        return result;
│ -    }
│ -
│ -    /**
│ -     * Inform about a closed resource resolver.
│ -     * Make sure to remove it from the current thread context.
│ -     * @param resolver Resource resolver
│ -     */
│ -    public void closed(@NotNull final ResourceResolver resolver) {
│ -        final Stack<ResourceResolver> resolverStack = resolverStackHolder.get();
│ -        if ( resolverStack != null ) {
│ -            resolverStack.remove(resolver);
│ -        }
│ -    }
│ -
│ -    // Sling API 2.24.0
│ -    public @NotNull List<String> getSearchPath() {
│ -        return Arrays.asList(this.options.getSearchPaths());
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.Arrays;
│ +import java.util.HashMap;
│ +import java.util.LinkedHashMap;
│ +import java.util.List;
│ +import java.util.Map;
│ +import java.util.Stack;
│ +
│ +import org.apache.sling.api.resource.LoginException;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ResourceResolverFactory;
│ +import org.jetbrains.annotations.NotNull;
│ +import org.jetbrains.annotations.Nullable;
│ +import org.osgi.service.event.EventAdmin;
│ +
│ +/**
│ + * Simple resource resolver factory
│ + */
│ +public class MockResourceResolverFactory implements ResourceResolverFactory {
│ +
│ +    private static final String ROOT_PRIMARY_TYPE="rep:root";
│ +
│ +    /** We use a linked hash map to preserve creation order. */
│ +    private final Map<String, Map<String, Object>> resources = new LinkedHashMap<String, Map<String, Object>>();
│ +
│ +    private final MockResourceResolverFactoryOptions options;
│ +
│ +    /**
│ +     * Create a new resource resolver factory
│ +     * @param eventAdmin All resource events are sent to this event admin
│ +     */
│ +    public MockResourceResolverFactory(@Nullable final EventAdmin eventAdmin) {
│ +        this(new MockResourceResolverFactoryOptions().setEventAdmin(eventAdmin));
│ +    }
│ +
│ +    /**
│ +     * Create a new resource resolver factory.
│ +     */
│ +    public MockResourceResolverFactory() {
│ +        this(new MockResourceResolverFactoryOptions());
│ +    }
│ +
│ +    /**
│ +     * Create a new resource resolver factory.
│ +     * @param options Options
│ +     */
│ +    public MockResourceResolverFactory(@NotNull final MockResourceResolverFactoryOptions options) {
│ +        this.options = options;
│ +        Map<String, Object> props= new HashMap<String,Object>();
│ +        props.put(MockResource.JCR_PRIMARYTYPE, ROOT_PRIMARY_TYPE);
│ +        resources.put("/", props);
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceResolver getResourceResolver(
│ +            final Map<String, Object> authenticationInfo) throws LoginException {
│ +
│ +        // put user name in resolver attributes
│ +        Map<String,Object> attributes = new HashMap<String, Object>();
│ +        if (authenticationInfo!=null) {
│ +            attributes.put(ResourceResolverFactory.USER, authenticationInfo.get(ResourceResolverFactory.USER));
│ +        }
│ +
│ +        final ResourceResolver result = new MockResourceResolver(options, this, resources, attributes);
│ +        Stack<ResourceResolver> resolverStack = resolverStackHolder.get();
│ +        if ( resolverStack == null ) {
│ +            resolverStack = new Stack<ResourceResolver>();
│ +            resolverStackHolder.set(resolverStack);
│ +        }
│ +        resolverStack.push(result);
│ +        return result;
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceResolver getAdministrativeResourceResolver(
│ +            final Map<String, Object> authenticationInfo) throws LoginException {
│ +        return new MockResourceResolver(options, this, resources);
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceResolver getServiceResourceResolver(
│ +            Map<String, Object> authenticationInfo) throws LoginException {
│ +        return new MockResourceResolver(options, this, resources);
│ +    }
│ +
│ +    /**
│ +     * Thread local holding the resource resolver stack
│ +     */
│ +    private ThreadLocal<Stack<ResourceResolver>> resolverStackHolder = new ThreadLocal<Stack<ResourceResolver>>();
│ +
│ +    @Override
│ +    public ResourceResolver getThreadResourceResolver() {
│ +        ResourceResolver result = null;
│ +        final Stack<ResourceResolver> resolverStack = resolverStackHolder.get();
│ +        if ( resolverStack != null && !resolverStack.isEmpty() ) {
│ +            result = resolverStack.peek();
│ +        }
│ +        return result;
│ +    }
│ +
│ +    /**
│ +     * Inform about a closed resource resolver.
│ +     * Make sure to remove it from the current thread context.
│ +     * @param resolver Resource resolver
│ +     */
│ +    public void closed(@NotNull final ResourceResolver resolver) {
│ +        final Stack<ResourceResolver> resolverStack = resolverStackHolder.get();
│ +        if ( resolverStack != null ) {
│ +            resolverStack.remove(resolver);
│ +        }
│ +    }
│ +
│ +    // Sling API 2.24.0
│ +    public @NotNull List<String> getSearchPath() {
│ +        return Arrays.asList(this.options.getSearchPaths());
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockResourceResolverFactoryOptions.java
│ @@ -1,80 +1,80 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import org.jetbrains.annotations.NotNull;
│ -import org.jetbrains.annotations.Nullable;
│ -import org.osgi.service.event.EventAdmin;
│ -
│ -/**
│ - * Options for the factory
│ - */
│ -public class MockResourceResolverFactoryOptions {
│ -
│ -    private MockResourceFactory mockResourceFactory;
│ -
│ -    private EventAdmin eventAdmin;
│ -
│ -    private String[] searchPaths = new String[] {"/apps/", "/libs/"};
│ -
│ -    private boolean mangleNamespacePrefixes;
│ -
│ -    public @Nullable EventAdmin getEventAdmin() {
│ -        return eventAdmin;
│ -    }
│ -
│ -    public @NotNull MockResourceResolverFactoryOptions setEventAdmin(@Nullable EventAdmin eventAdmin) {
│ -        this.eventAdmin = eventAdmin;
│ -        return this;
│ -    }
│ -
│ -    public String @NotNull [] getSearchPaths() {
│ -        return searchPaths;
│ -    }
│ -
│ -    public @NotNull MockResourceResolverFactoryOptions setSearchPaths(@NotNull String @Nullable [] searchPaths) {
│ -        if ( searchPaths == null ) {
│ -            searchPaths = new String[] {};
│ -        }
│ -        this.searchPaths = searchPaths;
│ -        return this;
│ -    }
│ -
│ -    public boolean isMangleNamespacePrefixes() {
│ -        return mangleNamespacePrefixes;
│ -    }
│ -
│ -    public @NotNull MockResourceResolverFactoryOptions setMangleNamespacePrefixes(boolean mangleNamespacePrefixes) {
│ -        this.mangleNamespacePrefixes = mangleNamespacePrefixes;
│ -        return this;
│ -    }
│ -
│ -    public @NotNull MockResourceFactory getMockResourceFactory() {
│ -        if (mockResourceFactory == null) {
│ -            mockResourceFactory = new DefaultMockResourceFactory();
│ -        }
│ -        return mockResourceFactory;
│ -    }
│ -    
│ -    public @NotNull MockResourceResolverFactoryOptions setMockResourceFactory(MockResourceFactory factory) {
│ -        this.mockResourceFactory = factory;
│ -        return this;
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import org.jetbrains.annotations.NotNull;
│ +import org.jetbrains.annotations.Nullable;
│ +import org.osgi.service.event.EventAdmin;
│ +
│ +/**
│ + * Options for the factory
│ + */
│ +public class MockResourceResolverFactoryOptions {
│ +
│ +    private MockResourceFactory mockResourceFactory;
│ +
│ +    private EventAdmin eventAdmin;
│ +
│ +    private String[] searchPaths = new String[] {"/apps/", "/libs/"};
│ +
│ +    private boolean mangleNamespacePrefixes;
│ +
│ +    public @Nullable EventAdmin getEventAdmin() {
│ +        return eventAdmin;
│ +    }
│ +
│ +    public @NotNull MockResourceResolverFactoryOptions setEventAdmin(@Nullable EventAdmin eventAdmin) {
│ +        this.eventAdmin = eventAdmin;
│ +        return this;
│ +    }
│ +
│ +    public String @NotNull [] getSearchPaths() {
│ +        return searchPaths;
│ +    }
│ +
│ +    public @NotNull MockResourceResolverFactoryOptions setSearchPaths(@NotNull String @Nullable [] searchPaths) {
│ +        if ( searchPaths == null ) {
│ +            searchPaths = new String[] {};
│ +        }
│ +        this.searchPaths = searchPaths;
│ +        return this;
│ +    }
│ +
│ +    public boolean isMangleNamespacePrefixes() {
│ +        return mangleNamespacePrefixes;
│ +    }
│ +
│ +    public @NotNull MockResourceResolverFactoryOptions setMangleNamespacePrefixes(boolean mangleNamespacePrefixes) {
│ +        this.mangleNamespacePrefixes = mangleNamespacePrefixes;
│ +        return this;
│ +    }
│ +
│ +    public @NotNull MockResourceFactory getMockResourceFactory() {
│ +        if (mockResourceFactory == null) {
│ +            mockResourceFactory = new DefaultMockResourceFactory();
│ +        }
│ +        return mockResourceFactory;
│ +    }
│ +    
│ +    public @NotNull MockResourceResolverFactoryOptions setMockResourceFactory(MockResourceFactory factory) {
│ +        this.mockResourceFactory = factory;
│ +        return this;
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/MockValueMap.java
│ @@ -1,112 +1,112 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.io.ByteArrayInputStream;
│ -import java.io.IOException;
│ -import java.io.InputStream;
│ -import java.util.Calendar;
│ -import java.util.Date;
│ -import java.util.HashMap;
│ -import java.util.Map;
│ -
│ -import org.apache.commons.io.IOUtils;
│ -import org.apache.sling.api.resource.ModifiableValueMap;
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.wrappers.DeepReadModifiableValueMapDecorator;
│ -import org.apache.sling.api.wrappers.ValueMapDecorator;
│ -
│ -/**
│ - * ValueMap for mocked resources to mimick JCR-like behavior.
│ - * <p>Implements the following conversions:</p>
│ - * <ul>
│ - * <li>Converts all Date values to Calendar objects internally and vice versa.</li>
│ - * <li>Converts InputStream to byte array and vice versa.</li>
│ - * </ul>
│ - */
│ -public class MockValueMap extends DeepReadModifiableValueMapDecorator implements ModifiableValueMap {
│ -
│ -    public MockValueMap(Resource resource) {
│ -        this(resource, new HashMap<String, Object>());
│ -    }
│ -
│ -    public MockValueMap(Resource resource, Map<String,Object> map) {
│ -        super(resource, new ValueMapDecorator(convertForWriteAll(map)));
│ -    }
│ -
│ -    @SuppressWarnings({ "unchecked", "null", "unused" })
│ -    @Override
│ -    public <T> T get(String name, Class<T> type) {
│ -
│ -        if (type == InputStream.class) {
│ -            // Support conversion from byte array to InputStream
│ -            byte[] data = get(name, byte[].class);
│ -            if (data!=null) {
│ -                return (T)new ByteArrayInputStream(data);
│ -            }
│ -            else {
│ -                return null;
│ -            }
│ -        }
│ -        else if ( type == null ) {
│ -            return (T) super.get(name);
│ -        }
│ -        return super.get(name, type);
│ -    }
│ -
│ -    @Override
│ -    public Object put(String key, Object value) {
│ -        return super.put(key, convertForWrite(value));
│ -    }
│ -
│ -    @SuppressWarnings("unchecked")
│ -    @Override
│ -    public void putAll(Map<? extends String, ?> map) {
│ -        super.putAll((Map<? extends String, ?>)convertForWriteAll((Map<String, Object>)map));
│ -    }
│ -
│ -    private static Object convertForWrite(Object value) {
│ -        if (value instanceof Date) {
│ -            // Store Date values as Calendar values
│ -            Calendar calendar = Calendar.getInstance();
│ -            calendar.setTime((Date)value);
│ -            value = calendar;
│ -        }
│ -        else if (value instanceof InputStream) {
│ -            // Store InputStream values as byte array
│ -            try {
│ -                value = IOUtils.toByteArray((InputStream)value);
│ -            } catch (IOException ex) {
│ -                throw new RuntimeException("Unable to convert input stream to byte array.");
│ -            }
│ -        }
│ -        return value;
│ -    }
│ -
│ -    private static Map<String, Object> convertForWriteAll(Map<String, Object> map) {
│ -        Map<String,Object> newMap = new HashMap<String, Object>();
│ -        if (map != null) {
│ -            for (Map.Entry<String, Object> entry : map.entrySet()) {
│ -                newMap.put(entry.getKey(), convertForWrite(entry.getValue()));
│ -            }
│ -        }
│ -        return newMap;
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.io.ByteArrayInputStream;
│ +import java.io.IOException;
│ +import java.io.InputStream;
│ +import java.util.Calendar;
│ +import java.util.Date;
│ +import java.util.HashMap;
│ +import java.util.Map;
│ +
│ +import org.apache.commons.io.IOUtils;
│ +import org.apache.sling.api.resource.ModifiableValueMap;
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.wrappers.DeepReadModifiableValueMapDecorator;
│ +import org.apache.sling.api.wrappers.ValueMapDecorator;
│ +
│ +/**
│ + * ValueMap for mocked resources to mimick JCR-like behavior.
│ + * <p>Implements the following conversions:</p>
│ + * <ul>
│ + * <li>Converts all Date values to Calendar objects internally and vice versa.</li>
│ + * <li>Converts InputStream to byte array and vice versa.</li>
│ + * </ul>
│ + */
│ +public class MockValueMap extends DeepReadModifiableValueMapDecorator implements ModifiableValueMap {
│ +
│ +    public MockValueMap(Resource resource) {
│ +        this(resource, new HashMap<String, Object>());
│ +    }
│ +
│ +    public MockValueMap(Resource resource, Map<String,Object> map) {
│ +        super(resource, new ValueMapDecorator(convertForWriteAll(map)));
│ +    }
│ +
│ +    @SuppressWarnings({ "unchecked", "null", "unused" })
│ +    @Override
│ +    public <T> T get(String name, Class<T> type) {
│ +
│ +        if (type == InputStream.class) {
│ +            // Support conversion from byte array to InputStream
│ +            byte[] data = get(name, byte[].class);
│ +            if (data!=null) {
│ +                return (T)new ByteArrayInputStream(data);
│ +            }
│ +            else {
│ +                return null;
│ +            }
│ +        }
│ +        else if ( type == null ) {
│ +            return (T) super.get(name);
│ +        }
│ +        return super.get(name, type);
│ +    }
│ +
│ +    @Override
│ +    public Object put(String key, Object value) {
│ +        return super.put(key, convertForWrite(value));
│ +    }
│ +
│ +    @SuppressWarnings("unchecked")
│ +    @Override
│ +    public void putAll(Map<? extends String, ?> map) {
│ +        super.putAll((Map<? extends String, ?>)convertForWriteAll((Map<String, Object>)map));
│ +    }
│ +
│ +    private static Object convertForWrite(Object value) {
│ +        if (value instanceof Date) {
│ +            // Store Date values as Calendar values
│ +            Calendar calendar = Calendar.getInstance();
│ +            calendar.setTime((Date)value);
│ +            value = calendar;
│ +        }
│ +        else if (value instanceof InputStream) {
│ +            // Store InputStream values as byte array
│ +            try {
│ +                value = IOUtils.toByteArray((InputStream)value);
│ +            } catch (IOException ex) {
│ +                throw new RuntimeException("Unable to convert input stream to byte array.");
│ +            }
│ +        }
│ +        return value;
│ +    }
│ +
│ +    private static Map<String, Object> convertForWriteAll(Map<String, Object> map) {
│ +        Map<String,Object> newMap = new HashMap<String, Object>();
│ +        if (map != null) {
│ +            for (Map.Entry<String, Object> entry : map.entrySet()) {
│ +                newMap.put(entry.getKey(), convertForWrite(entry.getValue()));
│ +            }
│ +        }
│ +        return newMap;
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/NamespaceMangler.java
│ @@ -1,80 +1,80 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.regex.Matcher;
│ -import java.util.regex.Pattern;
│ -
│ -final class NamespaceMangler {
│ -
│ -    private static final String MANGLED_NAMESPACE_PREFIX = "_";
│ -    private static final String MANGLED_NAMESPACE_SUFFIX = "_";
│ -    private static final char NAMESPACE_SEPARATOR = ':';
│ -    private static final Pattern NAMESPACE_PATTERN = Pattern.compile("/([^:/]+):");
│ -    private static final Pattern MANGLED_NAMESPACE_PATTERN = Pattern.compile("/_([^_/]+)_");
│ -
│ -    private NamespaceMangler() {
│ -        // static methods only
│ -    }
│ -
│ -    /**
│ -     * Mangle the namespaces in the given path for usage in sling-based URLs.
│ -     * <p>
│ -     * Example: /path/jcr:content to /path/_jcr_content
│ -     * </p>
│ -     * @param path Path to mangle
│ -     * @return Mangled path
│ -     */
│ -    public static String mangleNamespaces(String path) {
│ -        if (path == null) {
│ -            return null;
│ -        }
│ -        Matcher matcher = NAMESPACE_PATTERN.matcher(path);
│ -        StringBuffer sb = new StringBuffer();
│ -        while (matcher.find()) {
│ -            String replacement = "/" + MANGLED_NAMESPACE_PREFIX + matcher.group(1) + MANGLED_NAMESPACE_SUFFIX;
│ -            matcher.appendReplacement(sb, replacement);
│ -        }
│ -        matcher.appendTail(sb);
│ -        return sb.toString();
│ -    }
│ -
│ -    /**
│ -     * Unmangle the namespaces in the given path for usage in sling-based URLs.
│ -     * <p>
│ -     * Example: /path/_jcr_content to /path/jcr:content
│ -     * </p>
│ -     * @param path Path to unmangle
│ -     * @return Unmangled path
│ -     */
│ -    public static String unmangleNamespaces(String path) {
│ -        if (path == null) {
│ -            return null;
│ -        }
│ -        Matcher matcher = MANGLED_NAMESPACE_PATTERN.matcher(path);
│ -        StringBuffer sb = new StringBuffer();
│ -        while (matcher.find()) {
│ -            String replacement = "/" + matcher.group(1) + NAMESPACE_SEPARATOR;
│ -            matcher.appendReplacement(sb, replacement);
│ -        }
│ -        matcher.appendTail(sb);
│ -        return sb.toString();
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.regex.Matcher;
│ +import java.util.regex.Pattern;
│ +
│ +final class NamespaceMangler {
│ +
│ +    private static final String MANGLED_NAMESPACE_PREFIX = "_";
│ +    private static final String MANGLED_NAMESPACE_SUFFIX = "_";
│ +    private static final char NAMESPACE_SEPARATOR = ':';
│ +    private static final Pattern NAMESPACE_PATTERN = Pattern.compile("/([^:/]+):");
│ +    private static final Pattern MANGLED_NAMESPACE_PATTERN = Pattern.compile("/_([^_/]+)_");
│ +
│ +    private NamespaceMangler() {
│ +        // static methods only
│ +    }
│ +
│ +    /**
│ +     * Mangle the namespaces in the given path for usage in sling-based URLs.
│ +     * <p>
│ +     * Example: /path/jcr:content to /path/_jcr_content
│ +     * </p>
│ +     * @param path Path to mangle
│ +     * @return Mangled path
│ +     */
│ +    public static String mangleNamespaces(String path) {
│ +        if (path == null) {
│ +            return null;
│ +        }
│ +        Matcher matcher = NAMESPACE_PATTERN.matcher(path);
│ +        StringBuffer sb = new StringBuffer();
│ +        while (matcher.find()) {
│ +            String replacement = "/" + MANGLED_NAMESPACE_PREFIX + matcher.group(1) + MANGLED_NAMESPACE_SUFFIX;
│ +            matcher.appendReplacement(sb, replacement);
│ +        }
│ +        matcher.appendTail(sb);
│ +        return sb.toString();
│ +    }
│ +
│ +    /**
│ +     * Unmangle the namespaces in the given path for usage in sling-based URLs.
│ +     * <p>
│ +     * Example: /path/_jcr_content to /path/jcr:content
│ +     * </p>
│ +     * @param path Path to unmangle
│ +     * @return Unmangled path
│ +     */
│ +    public static String unmangleNamespaces(String path) {
│ +        if (path == null) {
│ +            return null;
│ +        }
│ +        Matcher matcher = MANGLED_NAMESPACE_PATTERN.matcher(path);
│ +        StringBuffer sb = new StringBuffer();
│ +        while (matcher.find()) {
│ +            String replacement = "/" + matcher.group(1) + NAMESPACE_SEPARATOR;
│ +            matcher.appendReplacement(sb, replacement);
│ +        }
│ +        matcher.appendTail(sb);
│ +        return sb.toString();
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/ReadonlyValueMapDecorator.java
│ @@ -1,113 +1,113 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.Collection;
│ -import java.util.Map;
│ -import java.util.Set;
│ -
│ -import org.apache.sling.api.resource.ValueMap;
│ -import org.jetbrains.annotations.NotNull;
│ -
│ -/**
│ - * Decorator that disallows access to all methods that modify the value map.
│ - */
│ -class ReadonlyValueMapDecorator implements ValueMap {
│ -
│ -    private final ValueMap delegate;
│ -
│ -    public ReadonlyValueMapDecorator(ValueMap base) {
│ -        this.delegate = base;
│ -    }
│ -
│ -    public Object put(String key, Object value) {
│ -        throw new UnsupportedOperationException("ValueMap is read-only.");
│ -    }
│ -
│ -    public Object remove(Object key) {
│ -        throw new UnsupportedOperationException("ValueMap is read-only.");
│ -    }
│ -
│ -    public void putAll(Map<? extends String, ?> t) {
│ -        throw new UnsupportedOperationException("ValueMap is read-only.");
│ -    }
│ -
│ -    public void clear() {
│ -        throw new UnsupportedOperationException("ValueMap is read-only.");
│ -    }
│ -
│ -    @SuppressWarnings("null")
│ -    public <T> T get(@NotNull String name, @NotNull Class<T> type) {
│ -        return delegate.get(name, type);
│ -    }
│ -
│ -    public @NotNull <T> T get(@NotNull String name, @NotNull T defaultValue) {
│ -        return delegate.get(name, defaultValue);
│ -    }
│ -
│ -    public int size() {
│ -        return delegate.size();
│ -    }
│ -
│ -    public boolean isEmpty() {
│ -        return delegate.isEmpty();
│ -    }
│ -
│ -    public boolean containsKey(Object key) {
│ -        return delegate.containsKey(key);
│ -    }
│ -
│ -    public boolean containsValue(Object value) {
│ -        return delegate.containsValue(value);
│ -    }
│ -
│ -    public Object get(Object key) {
│ -        return delegate.get(key);
│ -    }
│ -
│ -    public Set<String> keySet() {
│ -        return delegate.keySet();
│ -    }
│ -
│ -    public Collection<Object> values() {
│ -        return delegate.values();
│ -    }
│ -
│ -    public Set<java.util.Map.Entry<String, Object>> entrySet() {
│ -        return delegate.entrySet();
│ -    }
│ -
│ -    public boolean equals(Object o) {
│ -        return delegate.equals(o);
│ -    }
│ -
│ -    public int hashCode() {
│ -        return delegate.hashCode();
│ -    }
│ -
│ -    ValueMap getDelegate() {
│ -        return delegate;
│ -    }
│ -
│ -    @Override
│ -    public String toString() {
│ -        return delegate.toString();
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.Collection;
│ +import java.util.Map;
│ +import java.util.Set;
│ +
│ +import org.apache.sling.api.resource.ValueMap;
│ +import org.jetbrains.annotations.NotNull;
│ +
│ +/**
│ + * Decorator that disallows access to all methods that modify the value map.
│ + */
│ +class ReadonlyValueMapDecorator implements ValueMap {
│ +
│ +    private final ValueMap delegate;
│ +
│ +    public ReadonlyValueMapDecorator(ValueMap base) {
│ +        this.delegate = base;
│ +    }
│ +
│ +    public Object put(String key, Object value) {
│ +        throw new UnsupportedOperationException("ValueMap is read-only.");
│ +    }
│ +
│ +    public Object remove(Object key) {
│ +        throw new UnsupportedOperationException("ValueMap is read-only.");
│ +    }
│ +
│ +    public void putAll(Map<? extends String, ?> t) {
│ +        throw new UnsupportedOperationException("ValueMap is read-only.");
│ +    }
│ +
│ +    public void clear() {
│ +        throw new UnsupportedOperationException("ValueMap is read-only.");
│ +    }
│ +
│ +    @SuppressWarnings("null")
│ +    public <T> T get(@NotNull String name, @NotNull Class<T> type) {
│ +        return delegate.get(name, type);
│ +    }
│ +
│ +    public @NotNull <T> T get(@NotNull String name, @NotNull T defaultValue) {
│ +        return delegate.get(name, defaultValue);
│ +    }
│ +
│ +    public int size() {
│ +        return delegate.size();
│ +    }
│ +
│ +    public boolean isEmpty() {
│ +        return delegate.isEmpty();
│ +    }
│ +
│ +    public boolean containsKey(Object key) {
│ +        return delegate.containsKey(key);
│ +    }
│ +
│ +    public boolean containsValue(Object value) {
│ +        return delegate.containsValue(value);
│ +    }
│ +
│ +    public Object get(Object key) {
│ +        return delegate.get(key);
│ +    }
│ +
│ +    public Set<String> keySet() {
│ +        return delegate.keySet();
│ +    }
│ +
│ +    public Collection<Object> values() {
│ +        return delegate.values();
│ +    }
│ +
│ +    public Set<java.util.Map.Entry<String, Object>> entrySet() {
│ +        return delegate.entrySet();
│ +    }
│ +
│ +    public boolean equals(Object o) {
│ +        return delegate.equals(o);
│ +    }
│ +
│ +    public int hashCode() {
│ +        return delegate.hashCode();
│ +    }
│ +
│ +    ValueMap getDelegate() {
│ +        return delegate;
│ +    }
│ +
│ +    @Override
│ +    public String toString() {
│ +        return delegate.toString();
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/ResourceTypeUtil.java
│ @@ -1,62 +1,62 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -/**
│ - * Some helper methods for doing comparisons on resource types.
│ - * This class is private the resource resolver bundle.
│ - * Consumers should rely on {@link Resource#isResourceType(String)} or {@link ResourceResolver#isResourceType(Resource, String)} instead.
│ - */
│ -class ResourceTypeUtil {
│ -
│ -    /**
│ -     * Returns <code>true</code> if the given resource type are equal.
│ -     *
│ -     * In case the value of any of the given resource types
│ -     * starts with one of the resource resolver's search paths
│ -     * it is converted to a relative resource type by stripping off
│ -     * the resource resolver's search path before doing the comparison.
│ -     *
│ -     * @param resourceType A resource type
│ -     * @param anotherResourceType Another resource type to compare with {@link resourceType}.
│ -     * @return <code>true</code> if the resource type equals the given resource type.
│ -     */
│ -    public static boolean areResourceTypesEqual(String resourceType, String anotherResourceType, String[] searchPath) {
│ -        return relativizeResourceType(resourceType, searchPath).equals(relativizeResourceType(anotherResourceType, searchPath));
│ -    }
│ -
│ -    /**
│ -     * Makes the given resource type relative by stripping off any prefix which equals one of the given search paths.
│ -     * In case the given resource type does not start with any of the given search paths it is returned unmodified.
│ -     * @param resourceType the resourceType to relativize.
│ -     * @param searchPath the search paths to strip off from the given resource type.
│ -     * @return the relative resource type
│ -     */
│ -    public static String relativizeResourceType(String resourceType, String[] searchPath) {
│ -        if (resourceType.startsWith("/")) {
│ -            for (String prefix : searchPath) {
│ -                if (resourceType.startsWith(prefix)) {
│ -                    return resourceType.substring(prefix.length());
│ -                }
│ -            }
│ -        }
│ -        return resourceType;
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +/**
│ + * Some helper methods for doing comparisons on resource types.
│ + * This class is private the resource resolver bundle.
│ + * Consumers should rely on {@link Resource#isResourceType(String)} or {@link ResourceResolver#isResourceType(Resource, String)} instead.
│ + */
│ +class ResourceTypeUtil {
│ +
│ +    /**
│ +     * Returns <code>true</code> if the given resource type are equal.
│ +     *
│ +     * In case the value of any of the given resource types
│ +     * starts with one of the resource resolver's search paths
│ +     * it is converted to a relative resource type by stripping off
│ +     * the resource resolver's search path before doing the comparison.
│ +     *
│ +     * @param resourceType A resource type
│ +     * @param anotherResourceType Another resource type to compare with {@link resourceType}.
│ +     * @return <code>true</code> if the resource type equals the given resource type.
│ +     */
│ +    public static boolean areResourceTypesEqual(String resourceType, String anotherResourceType, String[] searchPath) {
│ +        return relativizeResourceType(resourceType, searchPath).equals(relativizeResourceType(anotherResourceType, searchPath));
│ +    }
│ +
│ +    /**
│ +     * Makes the given resource type relative by stripping off any prefix which equals one of the given search paths.
│ +     * In case the given resource type does not start with any of the given search paths it is returned unmodified.
│ +     * @param resourceType the resourceType to relativize.
│ +     * @param searchPath the search paths to strip off from the given resource type.
│ +     * @return the relative resource type
│ +     */
│ +    public static String relativizeResourceType(String resourceType, String[] searchPath) {
│ +        if (resourceType.startsWith("/")) {
│ +            for (String prefix : searchPath) {
│ +                if (resourceType.startsWith(prefix)) {
│ +                    return resourceType.substring(prefix.length());
│ +                }
│ +            }
│ +        }
│ +        return resourceType;
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/main/java/org/apache/sling/testing/resourceresolver/package-info.java
│ @@ -1,23 +1,23 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -/**
│ - * Apache Sling Testing Resource Resolver Mock
│ - */
│ -@org.osgi.annotation.versioning.Version("2.2.1")
│ -package org.apache.sling.testing.resourceresolver;
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +/**
│ + * Apache Sling Testing Resource Resolver Mock
│ + */
│ +@org.osgi.annotation.versioning.Version("2.2.1")
│ +package org.apache.sling.testing.resourceresolver;
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/CreateDeleteResourceResolverTest.java
│ @@ -1,138 +1,138 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import static org.junit.Assert.assertEquals;
│ -import static org.junit.Assert.assertNull;
│ -
│ -import java.io.IOException;
│ -import java.util.Map;
│ -
│ -import org.apache.sling.api.resource.LoginException;
│ -import org.apache.sling.api.resource.PersistenceException;
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ResourceUtil;
│ -import org.apache.sling.api.resource.ValueMap;
│ -import org.junit.Before;
│ -import org.junit.Test;
│ -
│ -import com.google.common.collect.ImmutableMap;
│ -
│ -/**
│ - * Tests combinations of create and deletion of resources and conflict detection.
│ - */
│ -public class CreateDeleteResourceResolverTest {
│ -
│ -    private static final Map<String,Object> PROPS1 = ImmutableMap.<String, Object>builder()
│ -            .put("prop1", "value1").build();
│ -    private static final Map<String,Object> PROPS2 = ImmutableMap.<String, Object>builder()
│ -            .put("prop2", "value2").build();
│ -
│ -    private ResourceResolver resourceResolver;
│ -    private Resource testRoot;
│ -
│ -    @Before
│ -    @SuppressWarnings("null")
│ -    public final void setUp() throws IOException, LoginException {
│ -        resourceResolver = new MockResourceResolverFactory().getResourceResolver(null);
│ -        Resource root = resourceResolver.getResource("/");
│ -        testRoot = resourceResolver.create(root, "test", ValueMap.EMPTY);
│ -    }
│ -
│ -    @Test
│ -    public void testCreateDeleteCreate() throws PersistenceException {
│ -        // create new node without commit
│ -        Resource resource = resourceResolver.create(testRoot, "node", PROPS1);
│ -        assertEquals(PROPS1, ResourceUtil.getValueMap(resource));
│ -
│ -        // delete node without commit
│ -        resourceResolver.delete(resource);
│ -        assertNull(resourceResolver.getResource(testRoot.getPath() + "/node"));
│ -
│ -        // create node again with different properties without commit
│ -        resource = resourceResolver.create(testRoot, "node", PROPS2);
│ -        assertEquals(PROPS2, ResourceUtil.getValueMap(resource));
│ -    }
│ -
│ -    @Test
│ -    public void testCreateDeleteCreateCommit() throws PersistenceException {
│ -        // create new node without commit
│ -        Resource resource = resourceResolver.create(testRoot, "node", PROPS1);
│ -        assertEquals(PROPS1, ResourceUtil.getValueMap(resource));
│ -
│ -        // delete node without commit
│ -        resourceResolver.delete(resource);
│ -        assertNull(resourceResolver.getResource(testRoot.getPath() + "/node"));
│ -
│ -        // create node again with different properties with commit
│ -        resource = resourceResolver.create(testRoot, "node", PROPS2);
│ -        assertEquals(PROPS2, ResourceUtil.getValueMap(resource));
│ -        resourceResolver.commit();
│ -    }
│ -
│ -    @Test
│ -    public void testCreateCommitDeleteCreateCommit() throws PersistenceException {
│ -        // create new node with commit
│ -        Resource resource = resourceResolver.create(testRoot, "node", PROPS1);
│ -        assertEquals(PROPS1, ResourceUtil.getValueMap(resource));
│ -        resourceResolver.commit();
│ -
│ -        // delete node without commit
│ -        resourceResolver.delete(resource);
│ -        assertNull(resourceResolver.getResource(testRoot.getPath() + "/node"));
│ -
│ -        // create node again with different properties with commit
│ -        resource = resourceResolver.create(testRoot, "node", PROPS2);
│ -        assertEquals(PROPS2, ResourceUtil.getValueMap(resource));
│ -        resourceResolver.commit();
│ -    }
│ -
│ -    @Test
│ -    public void testCreateCommitDeleteCommitCreateCommit() throws PersistenceException {
│ -        // create new node with commit
│ -        Resource resource = resourceResolver.create(testRoot, "node", PROPS1);
│ -        assertEquals(PROPS1, ResourceUtil.getValueMap(resource));
│ -        resourceResolver.commit();
│ -
│ -        // delete node with commit
│ -        resourceResolver.delete(resource);
│ -        assertNull(resourceResolver.getResource(testRoot.getPath() + "/node"));
│ -        resourceResolver.commit();
│ -
│ -        // create node again with different properties with commit
│ -        resource = resourceResolver.create(testRoot, "node", PROPS2);
│ -        assertEquals(PROPS2, ResourceUtil.getValueMap(resource));
│ -        resourceResolver.commit();
│ -    }
│ -
│ -    @Test(expected=PersistenceException.class)
│ -    public void testCreatePathAlreadyExists() throws PersistenceException {
│ -        resourceResolver.create(testRoot, "node", PROPS1);
│ -        resourceResolver.create(testRoot, "node", PROPS2);
│ -    }
│ -
│ -    @Test(expected=PersistenceException.class)
│ -    public void testCreateCommitPathAlreadyExists() throws PersistenceException {
│ -        resourceResolver.create(testRoot, "node", PROPS1);
│ -        resourceResolver.commit();
│ -        resourceResolver.create(testRoot, "node", PROPS2);
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import static org.junit.Assert.assertEquals;
│ +import static org.junit.Assert.assertNull;
│ +
│ +import java.io.IOException;
│ +import java.util.Map;
│ +
│ +import org.apache.sling.api.resource.LoginException;
│ +import org.apache.sling.api.resource.PersistenceException;
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ResourceUtil;
│ +import org.apache.sling.api.resource.ValueMap;
│ +import org.junit.Before;
│ +import org.junit.Test;
│ +
│ +import com.google.common.collect.ImmutableMap;
│ +
│ +/**
│ + * Tests combinations of create and deletion of resources and conflict detection.
│ + */
│ +public class CreateDeleteResourceResolverTest {
│ +
│ +    private static final Map<String,Object> PROPS1 = ImmutableMap.<String, Object>builder()
│ +            .put("prop1", "value1").build();
│ +    private static final Map<String,Object> PROPS2 = ImmutableMap.<String, Object>builder()
│ +            .put("prop2", "value2").build();
│ +
│ +    private ResourceResolver resourceResolver;
│ +    private Resource testRoot;
│ +
│ +    @Before
│ +    @SuppressWarnings("null")
│ +    public final void setUp() throws IOException, LoginException {
│ +        resourceResolver = new MockResourceResolverFactory().getResourceResolver(null);
│ +        Resource root = resourceResolver.getResource("/");
│ +        testRoot = resourceResolver.create(root, "test", ValueMap.EMPTY);
│ +    }
│ +
│ +    @Test
│ +    public void testCreateDeleteCreate() throws PersistenceException {
│ +        // create new node without commit
│ +        Resource resource = resourceResolver.create(testRoot, "node", PROPS1);
│ +        assertEquals(PROPS1, ResourceUtil.getValueMap(resource));
│ +
│ +        // delete node without commit
│ +        resourceResolver.delete(resource);
│ +        assertNull(resourceResolver.getResource(testRoot.getPath() + "/node"));
│ +
│ +        // create node again with different properties without commit
│ +        resource = resourceResolver.create(testRoot, "node", PROPS2);
│ +        assertEquals(PROPS2, ResourceUtil.getValueMap(resource));
│ +    }
│ +
│ +    @Test
│ +    public void testCreateDeleteCreateCommit() throws PersistenceException {
│ +        // create new node without commit
│ +        Resource resource = resourceResolver.create(testRoot, "node", PROPS1);
│ +        assertEquals(PROPS1, ResourceUtil.getValueMap(resource));
│ +
│ +        // delete node without commit
│ +        resourceResolver.delete(resource);
│ +        assertNull(resourceResolver.getResource(testRoot.getPath() + "/node"));
│ +
│ +        // create node again with different properties with commit
│ +        resource = resourceResolver.create(testRoot, "node", PROPS2);
│ +        assertEquals(PROPS2, ResourceUtil.getValueMap(resource));
│ +        resourceResolver.commit();
│ +    }
│ +
│ +    @Test
│ +    public void testCreateCommitDeleteCreateCommit() throws PersistenceException {
│ +        // create new node with commit
│ +        Resource resource = resourceResolver.create(testRoot, "node", PROPS1);
│ +        assertEquals(PROPS1, ResourceUtil.getValueMap(resource));
│ +        resourceResolver.commit();
│ +
│ +        // delete node without commit
│ +        resourceResolver.delete(resource);
│ +        assertNull(resourceResolver.getResource(testRoot.getPath() + "/node"));
│ +
│ +        // create node again with different properties with commit
│ +        resource = resourceResolver.create(testRoot, "node", PROPS2);
│ +        assertEquals(PROPS2, ResourceUtil.getValueMap(resource));
│ +        resourceResolver.commit();
│ +    }
│ +
│ +    @Test
│ +    public void testCreateCommitDeleteCommitCreateCommit() throws PersistenceException {
│ +        // create new node with commit
│ +        Resource resource = resourceResolver.create(testRoot, "node", PROPS1);
│ +        assertEquals(PROPS1, ResourceUtil.getValueMap(resource));
│ +        resourceResolver.commit();
│ +
│ +        // delete node with commit
│ +        resourceResolver.delete(resource);
│ +        assertNull(resourceResolver.getResource(testRoot.getPath() + "/node"));
│ +        resourceResolver.commit();
│ +
│ +        // create node again with different properties with commit
│ +        resource = resourceResolver.create(testRoot, "node", PROPS2);
│ +        assertEquals(PROPS2, ResourceUtil.getValueMap(resource));
│ +        resourceResolver.commit();
│ +    }
│ +
│ +    @Test(expected=PersistenceException.class)
│ +    public void testCreatePathAlreadyExists() throws PersistenceException {
│ +        resourceResolver.create(testRoot, "node", PROPS1);
│ +        resourceResolver.create(testRoot, "node", PROPS2);
│ +    }
│ +
│ +    @Test(expected=PersistenceException.class)
│ +    public void testCreateCommitPathAlreadyExists() throws PersistenceException {
│ +        resourceResolver.create(testRoot, "node", PROPS1);
│ +        resourceResolver.commit();
│ +        resourceResolver.create(testRoot, "node", PROPS2);
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/FindQueryResourcesTest.java
│ @@ -1,116 +1,116 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import static org.junit.Assert.assertEquals;
│ -import static org.junit.Assert.assertFalse;
│ -
│ -import java.io.IOException;
│ -import java.util.Iterator;
│ -import java.util.List;
│ -import java.util.Map;
│ -
│ -import org.apache.commons.lang3.StringUtils;
│ -import org.apache.sling.api.resource.LoginException;
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.junit.Before;
│ -import org.junit.Test;
│ -
│ -import com.google.common.collect.ImmutableList;
│ -
│ -/**
│ - * Tests finding/querying for resources.
│ - */
│ -@SuppressWarnings("null")
│ -public class FindQueryResourcesTest {
│ -
│ -    private ResourceResolver resourceResolver;
│ -    private Resource resource1;
│ -    private Resource resource2;
│ -
│ -    @Before
│ -    public void setUp() throws IOException, LoginException {
│ -        resourceResolver = new MockResourceResolverFactory().getResourceResolver(null);
│ -
│ -        MockHelper.create(resourceResolver)
│ -            .resource("/resource1").p("prop1", "value1")
│ -            .resource("/resource2").p("prop1", "value2")
│ -            .commit();
│ -        resource1 = resourceResolver.getResource("/resource1");
│ -        resource2 = resourceResolver.getResource("/resource2");
│ -    }
│ -
│ -    @Test
│ -    public void testFindResourcesNoHandler() {
│ -        Iterator<Resource> result = resourceResolver.findResources("any-query", "any-language");
│ -        assertFalse(result.hasNext());
│ -    }
│ -
│ -    @Test
│ -    public void testFindResourcesSingleHandler() {
│ -        List<Resource> expected = ImmutableList.of(resource1, resource2);
│ -        ((MockResourceResolver)resourceResolver).addFindResourceHandler((query, language) -> expected.iterator());
│ -
│ -        assertEquals(expected, ImmutableList.copyOf(resourceResolver.findResources("any-query", "any-language")));
│ -    }
│ -
│ -    @Test
│ -    public void testFindResourcesMultipleHandlers() {
│ -        List<Resource> expected1 = ImmutableList.of(resource1);
│ -        ((MockResourceResolver)resourceResolver).addFindResourceHandler((query, language) ->
│ -            StringUtils.equals(query, "q1") ? expected1.iterator() : null);
│ -
│ -        List<Resource> expected2 = ImmutableList.of(resource2);
│ -        ((MockResourceResolver)resourceResolver).addFindResourceHandler((query, language) ->
│ -            StringUtils.equals(query, "q2") ? expected2.iterator() : null);
│ -
│ -        assertEquals(expected1, ImmutableList.copyOf(resourceResolver.findResources("q1", "any-language")));
│ -        assertEquals(expected2, ImmutableList.copyOf(resourceResolver.findResources("q2", "any-language")));
│ -    }
│ -
│ -    @Test
│ -    public void testQueryResourcesNoHandler() {
│ -        Iterator<Map<String,Object>> result = resourceResolver.queryResources("any-query", "any-language");
│ -        assertFalse(result.hasNext());
│ -    }
│ -
│ -    @Test
│ -    public void testQueryResourcesSingleHandler() {
│ -        List<Map<String,Object>> expected = ImmutableList.of(resource1.getValueMap(), resource2.getValueMap());
│ -        ((MockResourceResolver)resourceResolver).addQueryResourceHandler((query, language) -> expected.iterator());
│ -
│ -        assertEquals(expected, ImmutableList.copyOf(resourceResolver.queryResources("any-query", "any-language")));
│ -    }
│ -
│ -    @Test
│ -    public void testQueryResourcesMultipleHandlers() {
│ -        List<Map<String,Object>> expected1 = ImmutableList.of(resource1.getValueMap());
│ -        ((MockResourceResolver)resourceResolver).addQueryResourceHandler((query, language) ->
│ -            StringUtils.equals(query, "q1") ? expected1.iterator() : null);
│ -
│ -        List<Map<String,Object>> expected2 = ImmutableList.of(resource2.getValueMap());
│ -        ((MockResourceResolver)resourceResolver).addQueryResourceHandler((query, language) ->
│ -            StringUtils.equals(query, "q2") ? expected2.iterator() : null);
│ -
│ -        assertEquals(expected1, ImmutableList.copyOf(resourceResolver.queryResources("q1", "any-language")));
│ -        assertEquals(expected2, ImmutableList.copyOf(resourceResolver.queryResources("q2", "any-language")));
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import static org.junit.Assert.assertEquals;
│ +import static org.junit.Assert.assertFalse;
│ +
│ +import java.io.IOException;
│ +import java.util.Iterator;
│ +import java.util.List;
│ +import java.util.Map;
│ +
│ +import org.apache.commons.lang3.StringUtils;
│ +import org.apache.sling.api.resource.LoginException;
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.junit.Before;
│ +import org.junit.Test;
│ +
│ +import com.google.common.collect.ImmutableList;
│ +
│ +/**
│ + * Tests finding/querying for resources.
│ + */
│ +@SuppressWarnings("null")
│ +public class FindQueryResourcesTest {
│ +
│ +    private ResourceResolver resourceResolver;
│ +    private Resource resource1;
│ +    private Resource resource2;
│ +
│ +    @Before
│ +    public void setUp() throws IOException, LoginException {
│ +        resourceResolver = new MockResourceResolverFactory().getResourceResolver(null);
│ +
│ +        MockHelper.create(resourceResolver)
│ +            .resource("/resource1").p("prop1", "value1")
│ +            .resource("/resource2").p("prop1", "value2")
│ +            .commit();
│ +        resource1 = resourceResolver.getResource("/resource1");
│ +        resource2 = resourceResolver.getResource("/resource2");
│ +    }
│ +
│ +    @Test
│ +    public void testFindResourcesNoHandler() {
│ +        Iterator<Resource> result = resourceResolver.findResources("any-query", "any-language");
│ +        assertFalse(result.hasNext());
│ +    }
│ +
│ +    @Test
│ +    public void testFindResourcesSingleHandler() {
│ +        List<Resource> expected = ImmutableList.of(resource1, resource2);
│ +        ((MockResourceResolver)resourceResolver).addFindResourceHandler((query, language) -> expected.iterator());
│ +
│ +        assertEquals(expected, ImmutableList.copyOf(resourceResolver.findResources("any-query", "any-language")));
│ +    }
│ +
│ +    @Test
│ +    public void testFindResourcesMultipleHandlers() {
│ +        List<Resource> expected1 = ImmutableList.of(resource1);
│ +        ((MockResourceResolver)resourceResolver).addFindResourceHandler((query, language) ->
│ +            StringUtils.equals(query, "q1") ? expected1.iterator() : null);
│ +
│ +        List<Resource> expected2 = ImmutableList.of(resource2);
│ +        ((MockResourceResolver)resourceResolver).addFindResourceHandler((query, language) ->
│ +            StringUtils.equals(query, "q2") ? expected2.iterator() : null);
│ +
│ +        assertEquals(expected1, ImmutableList.copyOf(resourceResolver.findResources("q1", "any-language")));
│ +        assertEquals(expected2, ImmutableList.copyOf(resourceResolver.findResources("q2", "any-language")));
│ +    }
│ +
│ +    @Test
│ +    public void testQueryResourcesNoHandler() {
│ +        Iterator<Map<String,Object>> result = resourceResolver.queryResources("any-query", "any-language");
│ +        assertFalse(result.hasNext());
│ +    }
│ +
│ +    @Test
│ +    public void testQueryResourcesSingleHandler() {
│ +        List<Map<String,Object>> expected = ImmutableList.of(resource1.getValueMap(), resource2.getValueMap());
│ +        ((MockResourceResolver)resourceResolver).addQueryResourceHandler((query, language) -> expected.iterator());
│ +
│ +        assertEquals(expected, ImmutableList.copyOf(resourceResolver.queryResources("any-query", "any-language")));
│ +    }
│ +
│ +    @Test
│ +    public void testQueryResourcesMultipleHandlers() {
│ +        List<Map<String,Object>> expected1 = ImmutableList.of(resource1.getValueMap());
│ +        ((MockResourceResolver)resourceResolver).addQueryResourceHandler((query, language) ->
│ +            StringUtils.equals(query, "q1") ? expected1.iterator() : null);
│ +
│ +        List<Map<String,Object>> expected2 = ImmutableList.of(resource2.getValueMap());
│ +        ((MockResourceResolver)resourceResolver).addQueryResourceHandler((query, language) ->
│ +            StringUtils.equals(query, "q2") ? expected2.iterator() : null);
│ +
│ +        assertEquals(expected1, ImmutableList.copyOf(resourceResolver.queryResources("q1", "any-language")));
│ +        assertEquals(expected2, ImmutableList.copyOf(resourceResolver.queryResources("q2", "any-language")));
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/IsResourceTypeTest.java
│ @@ -1,162 +1,162 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import static org.junit.Assert.assertFalse;
│ -import static org.junit.Assert.assertTrue;
│ -
│ -import java.util.HashMap;
│ -import java.util.Map;
│ -
│ -import org.apache.sling.api.SlingException;
│ -import org.apache.sling.api.resource.LoginException;
│ -import org.apache.sling.api.resource.PersistenceException;
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ResourceUtil;
│ -import org.junit.Before;
│ -import org.junit.Test;
│ -
│ -
│ -public class IsResourceTypeTest {
│ -
│ -    private ResourceResolver resolver;
│ -
│ -    @Before
│ -    public final void setUp() throws LoginException {
│ -        resolver = new MockResourceResolverFactory().getResourceResolver(null);
│ -    }
│ -
│ -    @Test
│ -    public void testIsResourceType() {
│ -        /**
│ -         * prepare resource type hierarchy
│ -         * /types/1
│ -         *  +- /types/2
│ -         *    +- /types/3
│ -         */
│ -        add("/types/1", "/types/component", "/types/2");
│ -        add("/types/2", "/types/component", "/types/3");
│ -        add("/types/3", "/types/component");
│ -
│ -        Resource resourceT1 = add("/resourceT1", "/types/1");
│ -        Resource resourceT2 = add("/resourceT2", "/types/2");
│ -        Resource resourceT3 = add("/resourceT3", "/types/3");
│ -
│ -        assertTrue(resolver.isResourceType(resourceT1, "/types/1"));
│ -        assertTrue(resolver.isResourceType(resourceT1, "/types/2"));
│ -        assertTrue(resolver.isResourceType(resourceT1, "/types/3"));
│ -        assertFalse(resolver.isResourceType(resourceT1, "/types/component"));
│ -        assertFalse(resolver.isResourceType(resourceT1, "/types/unknown"));
│ -
│ -        assertFalse(resolver.isResourceType(resourceT2, "/types/1"));
│ -        assertTrue(resolver.isResourceType(resourceT2, "/types/2"));
│ -        assertTrue(resolver.isResourceType(resourceT2, "/types/3"));
│ -        assertFalse(resolver.isResourceType(resourceT2, "/types/component"));
│ -        assertFalse(resolver.isResourceType(resourceT2, "/types/unknown"));
│ -
│ -        assertFalse(resolver.isResourceType(resourceT3, "/types/1"));
│ -        assertFalse(resolver.isResourceType(resourceT3, "/types/2"));
│ -        assertTrue(resolver.isResourceType(resourceT3, "/types/3"));
│ -        assertFalse(resolver.isResourceType(resourceT3, "/types/component"));
│ -        assertFalse(resolver.isResourceType(resourceT3, "/types/unknown"));
│ -    }
│ -
│ -    /**
│ -     * @see <a href="https://issues.apache.org/jira/browse/SLING-6327">SLING-6327</a>
│ -     */
│ -    @Test
│ -    public void testIsResourceTypeWithMixedAbsoluteAndRelativePaths() {
│ -        Resource resourceT1 = add("/resourceT1", "types/1");
│ -        Resource resourceT2 = add("/resourceT2", "/apps/types/2");
│ -        Resource resourceT3 = add("/resourceT3", "/libs/types/3");
│ -
│ -        assertTrue(resolver.isResourceType(resourceT1, "/libs/types/1"));
│ -        assertTrue(resolver.isResourceType(resourceT1, "/apps/types/1"));
│ -        assertTrue(resolver.isResourceType(resourceT1, "types/1"));
│ -
│ -        assertTrue(resolver.isResourceType(resourceT2, "/apps/types/2"));
│ -        assertTrue(resolver.isResourceType(resourceT2, "types/2"));
│ -        assertTrue(resolver.isResourceType(resourceT2, "/libs/types/2"));
│ -
│ -        assertTrue(resolver.isResourceType(resourceT3, "/apps/types/3"));
│ -        assertTrue(resolver.isResourceType(resourceT3, "types/3"));
│ -        assertTrue(resolver.isResourceType(resourceT3, "/libs/types/3"));
│ -    }
│ -
│ -    @Test(expected=SlingException.class)
│ -    public void testIsResourceCyclicHierarchyDirect() {
│ -        /**
│ -         * prepare resource type hierarchy
│ -         * /types/1  <---+
│ -         *  +- /types/2 -+
│ -         */
│ -        add("/types/1", "/types/component", "/types/2");
│ -        add("/types/2", "/types/component", "/types/1");
│ -
│ -        Resource resource = add("/resourceT1", "/types/1");
│ -
│ -        assertTrue(resolver.isResourceType(resource, "/types/1"));
│ -        assertTrue(resolver.isResourceType(resource, "/types/2"));
│ -
│ -        // this should throw a SlingException when detecting the cyclic hierarchy
│ -        resolver.isResourceType(resource, "/types/unknown");
│ -    }
│ -
│ -    @Test(expected=SlingException.class)
│ -    public void testIsResourceCyclicHierarchyIndirect() {
│ -        /**
│ -         * prepare resource type hierarchy
│ -         * /types/1   <----+
│ -         *  +- /types/2    |
│ -         *    +- /types/3 -+
│ -         */
│ -        add("/types/1", "/types/component", "/types/2");
│ -        add("/types/2", "/types/component", "/types/3");
│ -        add("/types/3", "/types/component", "/types/1");
│ -
│ -        Resource resource = add("/resourceT1", "/types/1");
│ -
│ -        assertTrue(resolver.isResourceType(resource, "/types/1"));
│ -        assertTrue(resolver.isResourceType(resource, "/types/2"));
│ -        assertTrue(resolver.isResourceType(resource, "/types/3"));
│ -
│ -        // this should throw a SlingException when detecting the cyclic hierarchy
│ -        resolver.isResourceType(resource, "/types/unknown");
│ -    }
│ -
│ -    private Resource add(String path, String resourceType) {
│ -        return add(path, resourceType, null);
│ -    }
│ -
│ -    private Resource add(String path, String resourceType, String resourceSuperType) {
│ -        try {
│ -            Map<String, Object> props = new HashMap<>();
│ -            props.put("sling:resourceType", resourceType);
│ -            if (resourceSuperType != null) {
│ -                props.put("sling:resourceSuperType", resourceSuperType);
│ -            }
│ -            return ResourceUtil.getOrCreateResource(resolver, path, props, null, true);
│ -        }
│ -        catch (PersistenceException ex) {
│ -            throw new RuntimeException(ex);
│ -        }
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import static org.junit.Assert.assertFalse;
│ +import static org.junit.Assert.assertTrue;
│ +
│ +import java.util.HashMap;
│ +import java.util.Map;
│ +
│ +import org.apache.sling.api.SlingException;
│ +import org.apache.sling.api.resource.LoginException;
│ +import org.apache.sling.api.resource.PersistenceException;
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ResourceUtil;
│ +import org.junit.Before;
│ +import org.junit.Test;
│ +
│ +
│ +public class IsResourceTypeTest {
│ +
│ +    private ResourceResolver resolver;
│ +
│ +    @Before
│ +    public final void setUp() throws LoginException {
│ +        resolver = new MockResourceResolverFactory().getResourceResolver(null);
│ +    }
│ +
│ +    @Test
│ +    public void testIsResourceType() {
│ +        /**
│ +         * prepare resource type hierarchy
│ +         * /types/1
│ +         *  +- /types/2
│ +         *    +- /types/3
│ +         */
│ +        add("/types/1", "/types/component", "/types/2");
│ +        add("/types/2", "/types/component", "/types/3");
│ +        add("/types/3", "/types/component");
│ +
│ +        Resource resourceT1 = add("/resourceT1", "/types/1");
│ +        Resource resourceT2 = add("/resourceT2", "/types/2");
│ +        Resource resourceT3 = add("/resourceT3", "/types/3");
│ +
│ +        assertTrue(resolver.isResourceType(resourceT1, "/types/1"));
│ +        assertTrue(resolver.isResourceType(resourceT1, "/types/2"));
│ +        assertTrue(resolver.isResourceType(resourceT1, "/types/3"));
│ +        assertFalse(resolver.isResourceType(resourceT1, "/types/component"));
│ +        assertFalse(resolver.isResourceType(resourceT1, "/types/unknown"));
│ +
│ +        assertFalse(resolver.isResourceType(resourceT2, "/types/1"));
│ +        assertTrue(resolver.isResourceType(resourceT2, "/types/2"));
│ +        assertTrue(resolver.isResourceType(resourceT2, "/types/3"));
│ +        assertFalse(resolver.isResourceType(resourceT2, "/types/component"));
│ +        assertFalse(resolver.isResourceType(resourceT2, "/types/unknown"));
│ +
│ +        assertFalse(resolver.isResourceType(resourceT3, "/types/1"));
│ +        assertFalse(resolver.isResourceType(resourceT3, "/types/2"));
│ +        assertTrue(resolver.isResourceType(resourceT3, "/types/3"));
│ +        assertFalse(resolver.isResourceType(resourceT3, "/types/component"));
│ +        assertFalse(resolver.isResourceType(resourceT3, "/types/unknown"));
│ +    }
│ +
│ +    /**
│ +     * @see <a href="https://issues.apache.org/jira/browse/SLING-6327">SLING-6327</a>
│ +     */
│ +    @Test
│ +    public void testIsResourceTypeWithMixedAbsoluteAndRelativePaths() {
│ +        Resource resourceT1 = add("/resourceT1", "types/1");
│ +        Resource resourceT2 = add("/resourceT2", "/apps/types/2");
│ +        Resource resourceT3 = add("/resourceT3", "/libs/types/3");
│ +
│ +        assertTrue(resolver.isResourceType(resourceT1, "/libs/types/1"));
│ +        assertTrue(resolver.isResourceType(resourceT1, "/apps/types/1"));
│ +        assertTrue(resolver.isResourceType(resourceT1, "types/1"));
│ +
│ +        assertTrue(resolver.isResourceType(resourceT2, "/apps/types/2"));
│ +        assertTrue(resolver.isResourceType(resourceT2, "types/2"));
│ +        assertTrue(resolver.isResourceType(resourceT2, "/libs/types/2"));
│ +
│ +        assertTrue(resolver.isResourceType(resourceT3, "/apps/types/3"));
│ +        assertTrue(resolver.isResourceType(resourceT3, "types/3"));
│ +        assertTrue(resolver.isResourceType(resourceT3, "/libs/types/3"));
│ +    }
│ +
│ +    @Test(expected=SlingException.class)
│ +    public void testIsResourceCyclicHierarchyDirect() {
│ +        /**
│ +         * prepare resource type hierarchy
│ +         * /types/1  <---+
│ +         *  +- /types/2 -+
│ +         */
│ +        add("/types/1", "/types/component", "/types/2");
│ +        add("/types/2", "/types/component", "/types/1");
│ +
│ +        Resource resource = add("/resourceT1", "/types/1");
│ +
│ +        assertTrue(resolver.isResourceType(resource, "/types/1"));
│ +        assertTrue(resolver.isResourceType(resource, "/types/2"));
│ +
│ +        // this should throw a SlingException when detecting the cyclic hierarchy
│ +        resolver.isResourceType(resource, "/types/unknown");
│ +    }
│ +
│ +    @Test(expected=SlingException.class)
│ +    public void testIsResourceCyclicHierarchyIndirect() {
│ +        /**
│ +         * prepare resource type hierarchy
│ +         * /types/1   <----+
│ +         *  +- /types/2    |
│ +         *    +- /types/3 -+
│ +         */
│ +        add("/types/1", "/types/component", "/types/2");
│ +        add("/types/2", "/types/component", "/types/3");
│ +        add("/types/3", "/types/component", "/types/1");
│ +
│ +        Resource resource = add("/resourceT1", "/types/1");
│ +
│ +        assertTrue(resolver.isResourceType(resource, "/types/1"));
│ +        assertTrue(resolver.isResourceType(resource, "/types/2"));
│ +        assertTrue(resolver.isResourceType(resource, "/types/3"));
│ +
│ +        // this should throw a SlingException when detecting the cyclic hierarchy
│ +        resolver.isResourceType(resource, "/types/unknown");
│ +    }
│ +
│ +    private Resource add(String path, String resourceType) {
│ +        return add(path, resourceType, null);
│ +    }
│ +
│ +    private Resource add(String path, String resourceType, String resourceSuperType) {
│ +        try {
│ +            Map<String, Object> props = new HashMap<>();
│ +            props.put("sling:resourceType", resourceType);
│ +            if (resourceSuperType != null) {
│ +                props.put("sling:resourceSuperType", resourceSuperType);
│ +            }
│ +            return ResourceUtil.getOrCreateResource(resolver, path, props, null, true);
│ +        }
│ +        catch (PersistenceException ex) {
│ +            throw new RuntimeException(ex);
│ +        }
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/NamespaceManglerTest.java
│ @@ -1,51 +1,51 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import static org.junit.Assert.assertEquals;
│ -
│ -import java.util.Map;
│ -
│ -import org.junit.Test;
│ -
│ -import com.google.common.collect.ImmutableMap;
│ -
│ -public class NamespaceManglerTest {
│ -
│ -    private Map<String, String> TEST_PATHS = ImmutableMap.<String, String>builder()
│ -            .put("/content/aa/bb/content.png", "/content/aa/bb/content.png")
│ -            .put("/content/aa/bb/jcr:content.png", "/content/aa/bb/_jcr_content.png")
│ -            .put("/content/aa/bb/jcr:content/anotherpath/xyz:abc", "/content/aa/bb/_jcr_content/anotherpath/_xyz_abc")
│ -            .build();
│ -
│ -    @Test
│ -    public void testMangleNamespaces() throws Exception {
│ -        for (Map.Entry<String, String> entry : TEST_PATHS.entrySet()) {
│ -            assertEquals(entry.getValue(), NamespaceMangler.mangleNamespaces(entry.getKey()));
│ -        }
│ -    }
│ -
│ -    @Test
│ -    public void testUnmangleNamespaces() throws Exception {
│ -        for (Map.Entry<String, String> entry : TEST_PATHS.entrySet()) {
│ -            assertEquals(entry.getKey(), NamespaceMangler.unmangleNamespaces(entry.getValue()));
│ -        }
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import static org.junit.Assert.assertEquals;
│ +
│ +import java.util.Map;
│ +
│ +import org.junit.Test;
│ +
│ +import com.google.common.collect.ImmutableMap;
│ +
│ +public class NamespaceManglerTest {
│ +
│ +    private Map<String, String> TEST_PATHS = ImmutableMap.<String, String>builder()
│ +            .put("/content/aa/bb/content.png", "/content/aa/bb/content.png")
│ +            .put("/content/aa/bb/jcr:content.png", "/content/aa/bb/_jcr_content.png")
│ +            .put("/content/aa/bb/jcr:content/anotherpath/xyz:abc", "/content/aa/bb/_jcr_content/anotherpath/_xyz_abc")
│ +            .build();
│ +
│ +    @Test
│ +    public void testMangleNamespaces() throws Exception {
│ +        for (Map.Entry<String, String> entry : TEST_PATHS.entrySet()) {
│ +            assertEquals(entry.getValue(), NamespaceMangler.mangleNamespaces(entry.getKey()));
│ +        }
│ +    }
│ +
│ +    @Test
│ +    public void testUnmangleNamespaces() throws Exception {
│ +        for (Map.Entry<String, String> entry : TEST_PATHS.entrySet()) {
│ +            assertEquals(entry.getKey(), NamespaceMangler.unmangleNamespaces(entry.getValue()));
│ +        }
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/NamespaceManglingResourceResolverTest.java
│ @@ -1,57 +1,57 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import static org.junit.Assert.assertEquals;
│ -
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ResourceResolverFactory;
│ -import org.apache.sling.api.resource.ValueMap;
│ -import org.junit.Before;
│ -import org.junit.Test;
│ -
│ -public class NamespaceManglingResourceResolverTest {
│ -
│ -    private ResourceResolver resolver;
│ -
│ -    @Before
│ -    @SuppressWarnings("null")
│ -    public void setUp() throws Exception {
│ -        MockResourceResolverFactoryOptions options = new MockResourceResolverFactoryOptions();
│ -        options.setMangleNamespacePrefixes(true);
│ -        ResourceResolverFactory factory = new MockResourceResolverFactory(options);
│ -        resolver = factory.getResourceResolver(null);
│ -
│ -        Resource res1 = resolver.create(resolver.getResource("/"), "res1", ValueMap.EMPTY);
│ -        Resource content = resolver.create(res1, "jcr:content", ValueMap.EMPTY);
│ -        resolver.create(content, "res2", ValueMap.EMPTY);
│ -    }
│ -
│ -    @Test
│ -    public void testMap() {
│ -        assertEquals("/res1/_jcr_content/res2", resolver.map("/res1/jcr:content/res2"));
│ -    }
│ -
│ -    @Test
│ -    public void testResolve() {
│ -        assertEquals("/res1/jcr:content/res2", resolver.resolve("/res1/_jcr_content/res2").getPath());
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import static org.junit.Assert.assertEquals;
│ +
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ResourceResolverFactory;
│ +import org.apache.sling.api.resource.ValueMap;
│ +import org.junit.Before;
│ +import org.junit.Test;
│ +
│ +public class NamespaceManglingResourceResolverTest {
│ +
│ +    private ResourceResolver resolver;
│ +
│ +    @Before
│ +    @SuppressWarnings("null")
│ +    public void setUp() throws Exception {
│ +        MockResourceResolverFactoryOptions options = new MockResourceResolverFactoryOptions();
│ +        options.setMangleNamespacePrefixes(true);
│ +        ResourceResolverFactory factory = new MockResourceResolverFactory(options);
│ +        resolver = factory.getResourceResolver(null);
│ +
│ +        Resource res1 = resolver.create(resolver.getResource("/"), "res1", ValueMap.EMPTY);
│ +        Resource content = resolver.create(res1, "jcr:content", ValueMap.EMPTY);
│ +        resolver.create(content, "res2", ValueMap.EMPTY);
│ +    }
│ +
│ +    @Test
│ +    public void testMap() {
│ +        assertEquals("/res1/_jcr_content/res2", resolver.map("/res1/jcr:content/res2"));
│ +    }
│ +
│ +    @Test
│ +    public void testResolve() {
│ +        assertEquals("/res1/jcr:content/res2", resolver.resolve("/res1/_jcr_content/res2").getPath());
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/NtFileResourceTest.java
│ @@ -1,97 +1,97 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import static org.apache.sling.testing.resourceresolver.MockResource.JCR_CONTENT;
│ -import static org.apache.sling.testing.resourceresolver.MockResource.JCR_DATA;
│ -import static org.apache.sling.testing.resourceresolver.MockResource.JCR_PRIMARYTYPE;
│ -import static org.apache.sling.testing.resourceresolver.MockResource.NT_FILE;
│ -import static org.apache.sling.testing.resourceresolver.MockResource.NT_RESOURCE;
│ -import static org.junit.Assert.assertArrayEquals;
│ -import static org.junit.Assert.assertNotNull;
│ -
│ -import java.io.ByteArrayInputStream;
│ -import java.io.IOException;
│ -import java.io.InputStream;
│ -
│ -import org.apache.commons.io.IOUtils;
│ -import org.apache.sling.api.resource.LoginException;
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ValueMap;
│ -import org.junit.Before;
│ -import org.junit.Test;
│ -
│ -import com.google.common.collect.ImmutableMap;
│ -
│ -/**
│ - * Implements simple write and read resource and values test.
│ - * Sling CRUD API is used to create the test data.
│ - */
│ -@SuppressWarnings("null")
│ -public class NtFileResourceTest {
│ -
│ -    private static final byte[] BINARY_VALUE = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 };
│ -
│ -    private ResourceResolver resourceResolver;
│ -    private Resource testRoot;
│ -
│ -    @Before
│ -    public final void setUp() throws IOException, LoginException {
│ -        resourceResolver = new MockResourceResolverFactory().getResourceResolver(null);
│ -        Resource root = resourceResolver.getResource("/");
│ -        testRoot = resourceResolver.create(root, "test", ValueMap.EMPTY);
│ -    }
│ -
│ -    @Test
│ -    public void testNtFile() throws IOException {
│ -        Resource file = resourceResolver.create(testRoot, "ntFile", ImmutableMap.<String, Object>builder()
│ -                .put(JCR_PRIMARYTYPE, NT_FILE)
│ -                .build());
│ -        resourceResolver.create(file, JCR_CONTENT, ImmutableMap.<String, Object>builder()
│ -            .put(JCR_PRIMARYTYPE, NT_RESOURCE)
│ -            .put(JCR_DATA, new ByteArrayInputStream(BINARY_VALUE))
│ -            .build());
│ -
│ -        String path = testRoot.getPath() + "/ntFile";
│ -        Resource resource = resourceResolver.getResource(path);
│ -        InputStream is = resource.adaptTo(InputStream.class);
│ -        assertNotNull(is);
│ -
│ -        assertArrayEquals(BINARY_VALUE, IOUtils.toByteArray(is));
│ -        is.close();
│ -    }
│ -
│ -    @Test
│ -    public void testNtResource() throws IOException {
│ -        resourceResolver.create(testRoot, "ntResource", ImmutableMap.<String, Object>builder()
│ -                .put(JCR_PRIMARYTYPE, NT_RESOURCE)
│ -                .put(JCR_DATA, new ByteArrayInputStream(BINARY_VALUE))
│ -                .build());
│ -
│ -        String path = testRoot.getPath() + "/ntResource";
│ -        Resource resource = resourceResolver.getResource(path);
│ -        InputStream is = resource.adaptTo(InputStream.class);
│ -        assertNotNull(is);
│ -
│ -        assertArrayEquals(BINARY_VALUE, IOUtils.toByteArray(is));
│ -        is.close();
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import static org.apache.sling.testing.resourceresolver.MockResource.JCR_CONTENT;
│ +import static org.apache.sling.testing.resourceresolver.MockResource.JCR_DATA;
│ +import static org.apache.sling.testing.resourceresolver.MockResource.JCR_PRIMARYTYPE;
│ +import static org.apache.sling.testing.resourceresolver.MockResource.NT_FILE;
│ +import static org.apache.sling.testing.resourceresolver.MockResource.NT_RESOURCE;
│ +import static org.junit.Assert.assertArrayEquals;
│ +import static org.junit.Assert.assertNotNull;
│ +
│ +import java.io.ByteArrayInputStream;
│ +import java.io.IOException;
│ +import java.io.InputStream;
│ +
│ +import org.apache.commons.io.IOUtils;
│ +import org.apache.sling.api.resource.LoginException;
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ValueMap;
│ +import org.junit.Before;
│ +import org.junit.Test;
│ +
│ +import com.google.common.collect.ImmutableMap;
│ +
│ +/**
│ + * Implements simple write and read resource and values test.
│ + * Sling CRUD API is used to create the test data.
│ + */
│ +@SuppressWarnings("null")
│ +public class NtFileResourceTest {
│ +
│ +    private static final byte[] BINARY_VALUE = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 };
│ +
│ +    private ResourceResolver resourceResolver;
│ +    private Resource testRoot;
│ +
│ +    @Before
│ +    public final void setUp() throws IOException, LoginException {
│ +        resourceResolver = new MockResourceResolverFactory().getResourceResolver(null);
│ +        Resource root = resourceResolver.getResource("/");
│ +        testRoot = resourceResolver.create(root, "test", ValueMap.EMPTY);
│ +    }
│ +
│ +    @Test
│ +    public void testNtFile() throws IOException {
│ +        Resource file = resourceResolver.create(testRoot, "ntFile", ImmutableMap.<String, Object>builder()
│ +                .put(JCR_PRIMARYTYPE, NT_FILE)
│ +                .build());
│ +        resourceResolver.create(file, JCR_CONTENT, ImmutableMap.<String, Object>builder()
│ +            .put(JCR_PRIMARYTYPE, NT_RESOURCE)
│ +            .put(JCR_DATA, new ByteArrayInputStream(BINARY_VALUE))
│ +            .build());
│ +
│ +        String path = testRoot.getPath() + "/ntFile";
│ +        Resource resource = resourceResolver.getResource(path);
│ +        InputStream is = resource.adaptTo(InputStream.class);
│ +        assertNotNull(is);
│ +
│ +        assertArrayEquals(BINARY_VALUE, IOUtils.toByteArray(is));
│ +        is.close();
│ +    }
│ +
│ +    @Test
│ +    public void testNtResource() throws IOException {
│ +        resourceResolver.create(testRoot, "ntResource", ImmutableMap.<String, Object>builder()
│ +                .put(JCR_PRIMARYTYPE, NT_RESOURCE)
│ +                .put(JCR_DATA, new ByteArrayInputStream(BINARY_VALUE))
│ +                .build());
│ +
│ +        String path = testRoot.getPath() + "/ntResource";
│ +        Resource resource = resourceResolver.getResource(path);
│ +        InputStream is = resource.adaptTo(InputStream.class);
│ +        assertNotNull(is);
│ +
│ +        assertArrayEquals(BINARY_VALUE, IOUtils.toByteArray(is));
│ +        is.close();
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/PropertyMapTest.java
│ @@ -1,65 +1,65 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import static org.junit.Assert.assertNotNull;
│ -import static org.junit.Assert.assertTrue;
│ -
│ -import java.io.Closeable;
│ -
│ -import org.junit.Test;
│ -import org.mockito.Mockito;
│ -
│ -public class PropertyMapTest {
│ -
│ -    @Test 
│ -    public void testGetPropertyMap() throws Exception {
│ -        // not having a map must not change the behavior
│ -        MockResourceResolver resolver = (MockResourceResolver) new MockResourceResolverFactory().getResourceResolver(null);
│ -        resolver.close(); // must not throw an exception
│ -
│ -        // use the propertyMap
│ -        resolver = (MockResourceResolver) new MockResourceResolverFactory().getResourceResolver(null);
│ -        Object value1 = new String("value1");
│ -        Closeable value2 = Mockito.spy(new Closeable() {
│ -            @Override
│ -            public void close() {
│ -                // do nothing
│ -            }
│ -        });
│ -        Closeable valueWithException = Mockito.spy(new Closeable() {
│ -            @Override
│ -            public void close() {
│ -                throw new RuntimeException ("RuntimeExceptions in close must be handled");
│ -            }
│ -        });
│ -        assertNotNull(resolver.getPropertyMap());
│ -        resolver.getPropertyMap().put("key1", value1);
│ -        resolver.getPropertyMap().put("key2", value2);
│ -        resolver.getPropertyMap().put("key3", valueWithException);
│ -
│ -        resolver.close();
│ -        assertNotNull(resolver.getPropertyMap());
│ -        assertTrue(resolver.getPropertyMap().isEmpty());
│ -        Mockito.verify(value2,Mockito.times(1)).close();
│ -        Mockito.verify(valueWithException,Mockito.times(1)).close();
│ -
│ -    }
│ -    
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import static org.junit.Assert.assertNotNull;
│ +import static org.junit.Assert.assertTrue;
│ +
│ +import java.io.Closeable;
│ +
│ +import org.junit.Test;
│ +import org.mockito.Mockito;
│ +
│ +public class PropertyMapTest {
│ +
│ +    @Test 
│ +    public void testGetPropertyMap() throws Exception {
│ +        // not having a map must not change the behavior
│ +        MockResourceResolver resolver = (MockResourceResolver) new MockResourceResolverFactory().getResourceResolver(null);
│ +        resolver.close(); // must not throw an exception
│ +
│ +        // use the propertyMap
│ +        resolver = (MockResourceResolver) new MockResourceResolverFactory().getResourceResolver(null);
│ +        Object value1 = new String("value1");
│ +        Closeable value2 = Mockito.spy(new Closeable() {
│ +            @Override
│ +            public void close() {
│ +                // do nothing
│ +            }
│ +        });
│ +        Closeable valueWithException = Mockito.spy(new Closeable() {
│ +            @Override
│ +            public void close() {
│ +                throw new RuntimeException ("RuntimeExceptions in close must be handled");
│ +            }
│ +        });
│ +        assertNotNull(resolver.getPropertyMap());
│ +        resolver.getPropertyMap().put("key1", value1);
│ +        resolver.getPropertyMap().put("key2", value2);
│ +        resolver.getPropertyMap().put("key3", valueWithException);
│ +
│ +        resolver.close();
│ +        assertNotNull(resolver.getPropertyMap());
│ +        assertTrue(resolver.getPropertyMap().isEmpty());
│ +        Mockito.verify(value2,Mockito.times(1)).close();
│ +        Mockito.verify(valueWithException,Mockito.times(1)).close();
│ +
│ +    }
│ +    
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/ResourceResolverLoginTest.java
│ @@ -1,92 +1,92 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import static org.junit.Assert.assertEquals;
│ -import static org.junit.Assert.assertNotNull;
│ -import static org.junit.Assert.assertNull;
│ -
│ -import java.util.Map;
│ -
│ -import org.apache.sling.api.resource.LoginException;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ResourceResolverFactory;
│ -import org.junit.Before;
│ -import org.junit.Test;
│ -
│ -import com.google.common.collect.ImmutableMap;
│ -
│ -/**
│ - * Test different variants of login for resource resolver.
│ - */
│ -public class ResourceResolverLoginTest {
│ -
│ -    private static final Map<String,Object> AUTH_INFO = ImmutableMap.<String, Object>of(
│ -                ResourceResolverFactory.USER, "myUser");
│ -
│ -    private MockResourceResolverFactory factory;
│ -
│ -    @Before
│ -    public void setUp() {
│ -        factory = new MockResourceResolverFactory();
│ -    }
│ -
│ -    @Test
│ -    public void testGetResourceResolverWithoutAuthInfo() throws LoginException {
│ -        ResourceResolver resolver = factory.getResourceResolver(null);
│ -        assertNotNull(resolver);
│ -        assertNull(resolver.getAttribute(ResourceResolverFactory.USER));
│ -    }
│ -
│ -    @Test
│ -    public void testGetResourceResolverWithAuthInfo() throws LoginException {
│ -        ResourceResolver resolver = factory.getResourceResolver(AUTH_INFO);
│ -        assertNotNull(resolver);
│ -        assertEquals("myUser", resolver.getAttribute(ResourceResolverFactory.USER));
│ -    }
│ -
│ -    @Test
│ -    public void testGetAdministrativeResourceResolverWithoutAuthInfo() throws LoginException {
│ -        ResourceResolver resolver = factory.getAdministrativeResourceResolver(null);
│ -        assertNotNull(resolver);
│ -        assertNull(resolver.getAttribute(ResourceResolverFactory.USER));
│ -    }
│ -
│ -    @Test
│ -    public void testGetAdminstrativeResourceResolverWithAuthInfo() throws LoginException {
│ -        ResourceResolver resolver = factory.getAdministrativeResourceResolver(AUTH_INFO);
│ -        assertNotNull(resolver);
│ -        assertNull(resolver.getAttribute(ResourceResolverFactory.USER));
│ -    }
│ -
│ -    @Test
│ -    public void testGetServiceResourceResolverWithoutAuthInfo() throws LoginException {
│ -        ResourceResolver resolver = factory.getServiceResourceResolver(null);
│ -        assertNotNull(resolver);
│ -        assertNull(resolver.getAttribute(ResourceResolverFactory.USER));
│ -    }
│ -
│ -    @Test
│ -    public void testGetServiceResourceResolverWithAuthInfo() throws LoginException {
│ -        ResourceResolver resolver = factory.getServiceResourceResolver(AUTH_INFO);
│ -        assertNotNull(resolver);
│ -        assertNull(resolver.getAttribute(ResourceResolverFactory.USER));
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import static org.junit.Assert.assertEquals;
│ +import static org.junit.Assert.assertNotNull;
│ +import static org.junit.Assert.assertNull;
│ +
│ +import java.util.Map;
│ +
│ +import org.apache.sling.api.resource.LoginException;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ResourceResolverFactory;
│ +import org.junit.Before;
│ +import org.junit.Test;
│ +
│ +import com.google.common.collect.ImmutableMap;
│ +
│ +/**
│ + * Test different variants of login for resource resolver.
│ + */
│ +public class ResourceResolverLoginTest {
│ +
│ +    private static final Map<String,Object> AUTH_INFO = ImmutableMap.<String, Object>of(
│ +                ResourceResolverFactory.USER, "myUser");
│ +
│ +    private MockResourceResolverFactory factory;
│ +
│ +    @Before
│ +    public void setUp() {
│ +        factory = new MockResourceResolverFactory();
│ +    }
│ +
│ +    @Test
│ +    public void testGetResourceResolverWithoutAuthInfo() throws LoginException {
│ +        ResourceResolver resolver = factory.getResourceResolver(null);
│ +        assertNotNull(resolver);
│ +        assertNull(resolver.getAttribute(ResourceResolverFactory.USER));
│ +    }
│ +
│ +    @Test
│ +    public void testGetResourceResolverWithAuthInfo() throws LoginException {
│ +        ResourceResolver resolver = factory.getResourceResolver(AUTH_INFO);
│ +        assertNotNull(resolver);
│ +        assertEquals("myUser", resolver.getAttribute(ResourceResolverFactory.USER));
│ +    }
│ +
│ +    @Test
│ +    public void testGetAdministrativeResourceResolverWithoutAuthInfo() throws LoginException {
│ +        ResourceResolver resolver = factory.getAdministrativeResourceResolver(null);
│ +        assertNotNull(resolver);
│ +        assertNull(resolver.getAttribute(ResourceResolverFactory.USER));
│ +    }
│ +
│ +    @Test
│ +    public void testGetAdminstrativeResourceResolverWithAuthInfo() throws LoginException {
│ +        ResourceResolver resolver = factory.getAdministrativeResourceResolver(AUTH_INFO);
│ +        assertNotNull(resolver);
│ +        assertNull(resolver.getAttribute(ResourceResolverFactory.USER));
│ +    }
│ +
│ +    @Test
│ +    public void testGetServiceResourceResolverWithoutAuthInfo() throws LoginException {
│ +        ResourceResolver resolver = factory.getServiceResourceResolver(null);
│ +        assertNotNull(resolver);
│ +        assertNull(resolver.getAttribute(ResourceResolverFactory.USER));
│ +    }
│ +
│ +    @Test
│ +    public void testGetServiceResourceResolverWithAuthInfo() throws LoginException {
│ +        ResourceResolver resolver = factory.getServiceResourceResolver(AUTH_INFO);
│ +        assertNotNull(resolver);
│ +        assertNull(resolver.getAttribute(ResourceResolverFactory.USER));
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/RootResourceTypeTest.java
│ @@ -1,52 +1,52 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.io.IOException;
│ -
│ -import org.apache.sling.api.resource.LoginException;
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.junit.Assert;
│ -import org.junit.Before;
│ -import org.junit.Test;
│ -
│ -public class RootResourceTypeTest {
│ -
│ -    private ResourceResolver resourceResolver;
│ -
│ -    @Before
│ -    public final void setUp() throws IOException, LoginException {
│ -        resourceResolver = new MockResourceResolverFactory().getResourceResolver(null);
│ -    }
│ -
│ -    @Test
│ -    @SuppressWarnings("null")
│ -    public void testIsResourceResolver() {
│ -        Resource root= resourceResolver.getResource("/");
│ -        Assert.assertTrue(root.isResourceType("rep:root"));
│ -    }
│ -
│ -    @Test
│ -    public void testGetRootParent() {
│ -        Resource rootParent = resourceResolver.getResource("/..");
│ -        Assert.assertNull(rootParent);
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.io.IOException;
│ +
│ +import org.apache.sling.api.resource.LoginException;
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.junit.Assert;
│ +import org.junit.Before;
│ +import org.junit.Test;
│ +
│ +public class RootResourceTypeTest {
│ +
│ +    private ResourceResolver resourceResolver;
│ +
│ +    @Before
│ +    public final void setUp() throws IOException, LoginException {
│ +        resourceResolver = new MockResourceResolverFactory().getResourceResolver(null);
│ +    }
│ +
│ +    @Test
│ +    @SuppressWarnings("null")
│ +    public void testIsResourceResolver() {
│ +        Resource root= resourceResolver.getResource("/");
│ +        Assert.assertTrue(root.isResourceType("rep:root"));
│ +    }
│ +
│ +    @Test
│ +    public void testGetRootParent() {
│ +        Resource rootParent = resourceResolver.getResource("/..");
│ +        Assert.assertNull(rootParent);
│ +    }
│ +
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/SlingCrudResourceResolverTest.java
│ @@ -1,323 +1,323 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import static org.junit.Assert.assertArrayEquals;
│ -import static org.junit.Assert.assertEquals;
│ -import static org.junit.Assert.assertFalse;
│ -import static org.junit.Assert.assertNotNull;
│ -import static org.junit.Assert.assertNull;
│ -import static org.junit.Assert.assertTrue;
│ -
│ -import java.io.ByteArrayInputStream;
│ -import java.io.IOException;
│ -import java.io.InputStream;
│ -import java.math.BigDecimal;
│ -import java.util.Calendar;
│ -import java.util.Date;
│ -import java.util.List;
│ -
│ -import org.apache.commons.io.IOUtils;
│ -import org.apache.jackrabbit.util.ISO8601;
│ -import org.apache.sling.api.resource.LoginException;
│ -import org.apache.sling.api.resource.ModifiableValueMap;
│ -import org.apache.sling.api.resource.NonExistingResource;
│ -import org.apache.sling.api.resource.PersistenceException;
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ResourceUtil;
│ -import org.apache.sling.api.resource.ValueMap;
│ -import org.junit.Before;
│ -import org.junit.Test;
│ -
│ -import com.google.common.collect.ImmutableMap;
│ -import com.google.common.collect.Lists;
│ -
│ -/**
│ - * Implements simple write and read resource and values test.
│ - * Sling CRUD API is used to create the test data.
│ - */
│ -@SuppressWarnings("null")
│ -public class SlingCrudResourceResolverTest {
│ -
│ -    private static final String STRING_VALUE = "value1";
│ -    private static final String[] STRING_ARRAY_VALUE = new String[] { "value1", "value2" };
│ -    private static final int INTEGER_VALUE = 25;
│ -    private static final long LONG_VALUE = 250L;
│ -    private static final double DOUBLE_VALUE = 3.555d;
│ -    private static final BigDecimal BIGDECIMAL_VALUE = new BigDecimal("12345.678");
│ -    private static final boolean BOOLEAN_VALUE = true;
│ -    private static final Date DATE_VALUE = new Date(10000);
│ -    private static final Calendar CALENDAR_VALUE = Calendar.getInstance();
│ -    private static final byte[] BINARY_VALUE = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 };
│ -
│ -    private static final String NT_UNSTRUCTURED = "nt:unstructured";
│ -
│ -    private ResourceResolver resourceResolver;
│ -    private Resource testRoot;
│ -
│ -    @Before
│ -    public final void setUp() throws IOException, LoginException {
│ -        resourceResolver = new MockResourceResolverFactory().getResourceResolver(null);
│ -
│ -        Resource root = resourceResolver.getResource("/");
│ -        testRoot = resourceResolver.create(root, "test", ValueMap.EMPTY);
│ -
│ -        Resource node1 = resourceResolver.create(testRoot, "node1",
│ -            ImmutableMap.<String, Object>builder()
│ -                .put(MockResource.JCR_PRIMARYTYPE, NT_UNSTRUCTURED)
│ -                .put("stringProp", STRING_VALUE)
│ -                .put("stringArrayProp", STRING_ARRAY_VALUE)
│ -                .put("integerProp", INTEGER_VALUE)
│ -                .put("longProp", LONG_VALUE)
│ -                .put("doubleProp", DOUBLE_VALUE)
│ -                .put("booleanProp", BOOLEAN_VALUE)
│ -                .put("bigDecimalProp", BIGDECIMAL_VALUE)
│ -                .put("dateProp", DATE_VALUE)
│ -                .put("calendarProp", CALENDAR_VALUE)
│ -                .put("binaryProp", new ByteArrayInputStream(BINARY_VALUE))
│ -                .build());
│ -
│ -        resourceResolver.create(node1, "node11", ImmutableMap.<String, Object>builder()
│ -                .put("stringProp11", STRING_VALUE)
│ -                .build());
│ -        resourceResolver.create(node1, "node12", ValueMap.EMPTY);
│ -
│ -        resourceResolver.commit();
│ -    }
│ -
│ -    @Test
│ -    public void testSimpleProperties() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -        assertNotNull(resource1);
│ -        assertEquals("node1", resource1.getName());
│ -
│ -        ValueMap props = ResourceUtil.getValueMap(resource1);
│ -        assertEquals(STRING_VALUE, props.get("stringProp", String.class));
│ -        assertArrayEquals(STRING_ARRAY_VALUE, props.get("stringArrayProp", String[].class));
│ -        assertEquals((Integer)INTEGER_VALUE, props.get("integerProp", Integer.class));
│ -        assertEquals((Long)LONG_VALUE, props.get("longProp", Long.class));
│ -        assertEquals(DOUBLE_VALUE, props.get("doubleProp", Double.class), 0.0001);
│ -        assertEquals(BIGDECIMAL_VALUE, props.get("bigDecimalProp", BigDecimal.class));
│ -        assertEquals(BOOLEAN_VALUE, props.get("booleanProp", Boolean.class));
│ -    }
│ -
│ -    @Test
│ -    public void testSimpleProperties_IntegerLongConversion() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -        ValueMap props = ResourceUtil.getValueMap(resource1);
│ -
│ -        assertEquals((Integer)(int)LONG_VALUE, props.get("longProp", Integer.class));
│ -        assertEquals((Long)(long)INTEGER_VALUE, props.get("integerProp", Long.class));
│ -    }
│ -
│ -    @Test
│ -    public void testSimpleProperties_DecimalConversion() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -        ValueMap props = ResourceUtil.getValueMap(resource1);
│ -
│ -        assertEquals(new BigDecimal(DOUBLE_VALUE).doubleValue(), props.get("doubleProp", BigDecimal.class).doubleValue(), 0.0001d);
│ -        assertEquals(BIGDECIMAL_VALUE.doubleValue() , props.get("bigDecimalProp", Double.class), 0.0001d);
│ -    }
│ -
│ -    @Test
│ -    public void testSimpleProperties_DeepPathAccess() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath());
│ -        assertNotNull(resource1);
│ -        assertEquals(testRoot.getName(), resource1.getName());
│ -
│ -        ValueMap props = ResourceUtil.getValueMap(resource1);
│ -        assertEquals(STRING_VALUE, props.get("node1/stringProp", String.class));
│ -        assertArrayEquals(STRING_ARRAY_VALUE, props.get("node1/stringArrayProp", String[].class));
│ -        assertEquals((Integer) INTEGER_VALUE, props.get("node1/integerProp", Integer.class));
│ -        assertEquals((Long)LONG_VALUE, props.get("node1/longProp", Long.class));
│ -        assertEquals(DOUBLE_VALUE, props.get("node1/doubleProp", Double.class), 0.0001);
│ -        assertEquals(BIGDECIMAL_VALUE, props.get("node1/bigDecimalProp", BigDecimal.class));
│ -        assertEquals(BOOLEAN_VALUE, props.get("node1/booleanProp", Boolean.class));
│ -        assertEquals(STRING_VALUE, props.get("node1/node11/stringProp11", String.class));
│ -
│ -        assertTrue(STRING_VALUE, props.containsKey("node1/stringProp"));
│ -        assertFalse(STRING_VALUE, props.containsKey("node1/unknownProp"));
│ -    }
│ -
│ -    @Test
│ -    public void testDateProperty() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -        ValueMap props = ResourceUtil.getValueMap(resource1);
│ -        assertEquals(DATE_VALUE, props.get("dateProp", Date.class));
│ -    }
│ -
│ -    @Test
│ -    public void testDatePropertyToCalendar() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -        ValueMap props = ResourceUtil.getValueMap(resource1);
│ -        Calendar calendarValue = props.get("dateProp", Calendar.class);
│ -        assertNotNull(calendarValue);
│ -        assertEquals(DATE_VALUE, calendarValue.getTime());
│ -    }
│ -
│ -    @Test
│ -    public void testCalendarProperty() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -        ValueMap props = ResourceUtil.getValueMap(resource1);
│ -        assertEquals(CALENDAR_VALUE.getTime(), props.get("calendarProp", Calendar.class).getTime());
│ -    }
│ -
│ -    @Test
│ -    public void testCalendarPropertyToDate() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -        ValueMap props = ResourceUtil.getValueMap(resource1);
│ -        Date dateValue = props.get("calendarProp", Date.class);
│ -        assertNotNull(dateValue);
│ -        assertEquals(CALENDAR_VALUE.getTime(), dateValue);
│ -    }
│ -
│ -    @Test
│ -    public void testStringToCalendarConversion() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -        ModifiableValueMap modProps = resource1.adaptTo(ModifiableValueMap.class);
│ -        modProps.put("dateISO8601String", ISO8601.format(CALENDAR_VALUE));
│ -        resourceResolver.commit();
│ -
│ -        resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -        ValueMap props = ResourceUtil.getValueMap(resource1);
│ -        assertEquals(CALENDAR_VALUE.getTime(), props.get("calendarProp", Calendar.class).getTime());
│ -    }
│ -
│ -    @Test
│ -    public void testListChildren() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -
│ -        List<Resource> children = Lists.newArrayList(resource1.listChildren());
│ -        assertEquals(2, children.size());
│ -        assertEquals("node11", children.get(0).getName());
│ -        assertEquals("node12", children.get(1).getName());
│ -    }
│ -
│ -    @Test
│ -    public void testListChildren_RootNode() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource("/");
│ -
│ -        List<Resource> children = Lists.newArrayList(resource1.listChildren());
│ -        assertEquals(1, children.size());
│ -        assertEquals("test", children.get(0).getName());
│ -
│ -        children = Lists.newArrayList(resource1.getChildren());
│ -        assertEquals(1, children.size());
│ -        assertEquals("test", children.get(0).getName());
│ -    }
│ -
│ -    @Test
│ -    public void testBinaryData() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -
│ -        Resource binaryPropResource = resource1.getChild("binaryProp");
│ -        InputStream is = binaryPropResource.adaptTo(InputStream.class);
│ -        byte[] dataFromResource = IOUtils.toByteArray(is);
│ -        is.close();
│ -        assertArrayEquals(BINARY_VALUE, dataFromResource);
│ -
│ -        // read second time to ensure not the original input stream was returned
│ -        // and this time using another syntax
│ -        InputStream is2 = ResourceUtil.getValueMap(resource1).get("binaryProp", InputStream.class);
│ -        byte[] dataFromResource2 = IOUtils.toByteArray(is2);
│ -        is2.close();
│ -        assertArrayEquals(BINARY_VALUE, dataFromResource2);
│ -    }
│ -
│ -    @Test
│ -    public void testPrimaryTypeResourceType() {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -        assertEquals(NT_UNSTRUCTURED, resource1.getResourceType());
│ -    }
│ -
│ -    @Test
│ -    public void testNormalizePath() {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/./node1");
│ -        assertEquals("node1", resource1.getName());
│ -
│ -        Resource resource11 = resourceResolver.getResource(testRoot.getPath() + "/node1/../node1/node11");
│ -        assertEquals("node11", resource11.getName());
│ -    }
│ -
│ -    @Test
│ -    public void testGetResourceNullPath() {
│ -        Resource resource = resourceResolver.getResource((String)null);
│ -        assertNull(resource);
│ -    }
│ -
│ -    @Test
│ -    public void testGetConvertedToNullType() {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -        Object propValue = ResourceUtil.getValueMap(resource1).get("stringProp", null);
│ -
│ -        assertEquals(STRING_VALUE, propValue);
│ -    }
│ -
│ -    @Test
│ -    public void testGetRootResourceByNullPath() {
│ -        Resource rootResource = this.resourceResolver.resolve((String)null);
│ -        assertNotNull(rootResource);
│ -        assertEquals("/", rootResource.getPath());
│ -    }
│ -
│ -    @Test
│ -    public void testResolveExistingResource() {
│ -        Resource resource = resourceResolver.resolve(testRoot.getPath() + "/node1");
│ -        assertNotNull(resource);
│ -        assertEquals(testRoot.getPath() + "/node1", resource.getPath());
│ -    }
│ -
│ -    @Test
│ -    public void testResolveNonexistingResource() {
│ -        Resource resource = resourceResolver.resolve("/non/existing/path");
│ -        assertTrue(resource instanceof NonExistingResource);
│ -        assertEquals("/non/existing/path", resource.getPath());
│ -    }
│ -
│ -    @Test
│ -    public void testGetParentResourceType() throws PersistenceException {
│ -        Resource r1 = resourceResolver.create(testRoot, "resource1", ImmutableMap.<String, Object>of());
│ -        Resource r2 = resourceResolver.create(testRoot, "resource2", ImmutableMap.<String, Object>of(
│ -                "sling:resourceSuperType", testRoot.getPath() + "/resource1"));
│ -        Resource r3 = resourceResolver.create(testRoot, "resource3", ImmutableMap.<String, Object>of(
│ -                "sling:resourceType", testRoot.getPath() + "/resource2"));
│ -        Resource r4 = resourceResolver.create(testRoot, "resource4", ImmutableMap.<String, Object>of(
│ -                "sling:resourceSuperType", testRoot.getPath() + "/resource2"));
│ -
│ -        assertNull(resourceResolver.getParentResourceType(r1));
│ -        assertEquals(r1.getPath(), resourceResolver.getParentResourceType(r2));
│ -        assertEquals(r1.getPath(), resourceResolver.getParentResourceType(r3));
│ -        assertEquals(r2.getPath(), resourceResolver.getParentResourceType(r4));
│ -        assertEquals(r2.getPath(), resourceResolver.getParentResourceType(r4.getPath()));
│ -    }
│ -
│ -
│ -    @Test
│ -    public void testResourceMetadata() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -        assertEquals(testRoot.getPath() + "/node1", resource1.getResourceMetadata().getResolutionPath());
│ -    }
│ -
│ -    @Test
│ -    public void testResourceWithoutResourceType() throws PersistenceException {
│ -        Resource noResourceType = resourceResolver.create(testRoot, "/noResourceType", ImmutableMap.<String, Object>of());
│ -        assertNotNull(noResourceType.getResourceType());
│ -    }
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import static org.junit.Assert.assertArrayEquals;
│ +import static org.junit.Assert.assertEquals;
│ +import static org.junit.Assert.assertFalse;
│ +import static org.junit.Assert.assertNotNull;
│ +import static org.junit.Assert.assertNull;
│ +import static org.junit.Assert.assertTrue;
│ +
│ +import java.io.ByteArrayInputStream;
│ +import java.io.IOException;
│ +import java.io.InputStream;
│ +import java.math.BigDecimal;
│ +import java.util.Calendar;
│ +import java.util.Date;
│ +import java.util.List;
│ +
│ +import org.apache.commons.io.IOUtils;
│ +import org.apache.jackrabbit.util.ISO8601;
│ +import org.apache.sling.api.resource.LoginException;
│ +import org.apache.sling.api.resource.ModifiableValueMap;
│ +import org.apache.sling.api.resource.NonExistingResource;
│ +import org.apache.sling.api.resource.PersistenceException;
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ResourceUtil;
│ +import org.apache.sling.api.resource.ValueMap;
│ +import org.junit.Before;
│ +import org.junit.Test;
│ +
│ +import com.google.common.collect.ImmutableMap;
│ +import com.google.common.collect.Lists;
│ +
│ +/**
│ + * Implements simple write and read resource and values test.
│ + * Sling CRUD API is used to create the test data.
│ + */
│ +@SuppressWarnings("null")
│ +public class SlingCrudResourceResolverTest {
│ +
│ +    private static final String STRING_VALUE = "value1";
│ +    private static final String[] STRING_ARRAY_VALUE = new String[] { "value1", "value2" };
│ +    private static final int INTEGER_VALUE = 25;
│ +    private static final long LONG_VALUE = 250L;
│ +    private static final double DOUBLE_VALUE = 3.555d;
│ +    private static final BigDecimal BIGDECIMAL_VALUE = new BigDecimal("12345.678");
│ +    private static final boolean BOOLEAN_VALUE = true;
│ +    private static final Date DATE_VALUE = new Date(10000);
│ +    private static final Calendar CALENDAR_VALUE = Calendar.getInstance();
│ +    private static final byte[] BINARY_VALUE = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06 };
│ +
│ +    private static final String NT_UNSTRUCTURED = "nt:unstructured";
│ +
│ +    private ResourceResolver resourceResolver;
│ +    private Resource testRoot;
│ +
│ +    @Before
│ +    public final void setUp() throws IOException, LoginException {
│ +        resourceResolver = new MockResourceResolverFactory().getResourceResolver(null);
│ +
│ +        Resource root = resourceResolver.getResource("/");
│ +        testRoot = resourceResolver.create(root, "test", ValueMap.EMPTY);
│ +
│ +        Resource node1 = resourceResolver.create(testRoot, "node1",
│ +            ImmutableMap.<String, Object>builder()
│ +                .put(MockResource.JCR_PRIMARYTYPE, NT_UNSTRUCTURED)
│ +                .put("stringProp", STRING_VALUE)
│ +                .put("stringArrayProp", STRING_ARRAY_VALUE)
│ +                .put("integerProp", INTEGER_VALUE)
│ +                .put("longProp", LONG_VALUE)
│ +                .put("doubleProp", DOUBLE_VALUE)
│ +                .put("booleanProp", BOOLEAN_VALUE)
│ +                .put("bigDecimalProp", BIGDECIMAL_VALUE)
│ +                .put("dateProp", DATE_VALUE)
│ +                .put("calendarProp", CALENDAR_VALUE)
│ +                .put("binaryProp", new ByteArrayInputStream(BINARY_VALUE))
│ +                .build());
│ +
│ +        resourceResolver.create(node1, "node11", ImmutableMap.<String, Object>builder()
│ +                .put("stringProp11", STRING_VALUE)
│ +                .build());
│ +        resourceResolver.create(node1, "node12", ValueMap.EMPTY);
│ +
│ +        resourceResolver.commit();
│ +    }
│ +
│ +    @Test
│ +    public void testSimpleProperties() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +        assertNotNull(resource1);
│ +        assertEquals("node1", resource1.getName());
│ +
│ +        ValueMap props = ResourceUtil.getValueMap(resource1);
│ +        assertEquals(STRING_VALUE, props.get("stringProp", String.class));
│ +        assertArrayEquals(STRING_ARRAY_VALUE, props.get("stringArrayProp", String[].class));
│ +        assertEquals((Integer)INTEGER_VALUE, props.get("integerProp", Integer.class));
│ +        assertEquals((Long)LONG_VALUE, props.get("longProp", Long.class));
│ +        assertEquals(DOUBLE_VALUE, props.get("doubleProp", Double.class), 0.0001);
│ +        assertEquals(BIGDECIMAL_VALUE, props.get("bigDecimalProp", BigDecimal.class));
│ +        assertEquals(BOOLEAN_VALUE, props.get("booleanProp", Boolean.class));
│ +    }
│ +
│ +    @Test
│ +    public void testSimpleProperties_IntegerLongConversion() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +        ValueMap props = ResourceUtil.getValueMap(resource1);
│ +
│ +        assertEquals((Integer)(int)LONG_VALUE, props.get("longProp", Integer.class));
│ +        assertEquals((Long)(long)INTEGER_VALUE, props.get("integerProp", Long.class));
│ +    }
│ +
│ +    @Test
│ +    public void testSimpleProperties_DecimalConversion() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +        ValueMap props = ResourceUtil.getValueMap(resource1);
│ +
│ +        assertEquals(new BigDecimal(DOUBLE_VALUE).doubleValue(), props.get("doubleProp", BigDecimal.class).doubleValue(), 0.0001d);
│ +        assertEquals(BIGDECIMAL_VALUE.doubleValue() , props.get("bigDecimalProp", Double.class), 0.0001d);
│ +    }
│ +
│ +    @Test
│ +    public void testSimpleProperties_DeepPathAccess() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath());
│ +        assertNotNull(resource1);
│ +        assertEquals(testRoot.getName(), resource1.getName());
│ +
│ +        ValueMap props = ResourceUtil.getValueMap(resource1);
│ +        assertEquals(STRING_VALUE, props.get("node1/stringProp", String.class));
│ +        assertArrayEquals(STRING_ARRAY_VALUE, props.get("node1/stringArrayProp", String[].class));
│ +        assertEquals((Integer) INTEGER_VALUE, props.get("node1/integerProp", Integer.class));
│ +        assertEquals((Long)LONG_VALUE, props.get("node1/longProp", Long.class));
│ +        assertEquals(DOUBLE_VALUE, props.get("node1/doubleProp", Double.class), 0.0001);
│ +        assertEquals(BIGDECIMAL_VALUE, props.get("node1/bigDecimalProp", BigDecimal.class));
│ +        assertEquals(BOOLEAN_VALUE, props.get("node1/booleanProp", Boolean.class));
│ +        assertEquals(STRING_VALUE, props.get("node1/node11/stringProp11", String.class));
│ +
│ +        assertTrue(STRING_VALUE, props.containsKey("node1/stringProp"));
│ +        assertFalse(STRING_VALUE, props.containsKey("node1/unknownProp"));
│ +    }
│ +
│ +    @Test
│ +    public void testDateProperty() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +        ValueMap props = ResourceUtil.getValueMap(resource1);
│ +        assertEquals(DATE_VALUE, props.get("dateProp", Date.class));
│ +    }
│ +
│ +    @Test
│ +    public void testDatePropertyToCalendar() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +        ValueMap props = ResourceUtil.getValueMap(resource1);
│ +        Calendar calendarValue = props.get("dateProp", Calendar.class);
│ +        assertNotNull(calendarValue);
│ +        assertEquals(DATE_VALUE, calendarValue.getTime());
│ +    }
│ +
│ +    @Test
│ +    public void testCalendarProperty() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +        ValueMap props = ResourceUtil.getValueMap(resource1);
│ +        assertEquals(CALENDAR_VALUE.getTime(), props.get("calendarProp", Calendar.class).getTime());
│ +    }
│ +
│ +    @Test
│ +    public void testCalendarPropertyToDate() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +        ValueMap props = ResourceUtil.getValueMap(resource1);
│ +        Date dateValue = props.get("calendarProp", Date.class);
│ +        assertNotNull(dateValue);
│ +        assertEquals(CALENDAR_VALUE.getTime(), dateValue);
│ +    }
│ +
│ +    @Test
│ +    public void testStringToCalendarConversion() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +        ModifiableValueMap modProps = resource1.adaptTo(ModifiableValueMap.class);
│ +        modProps.put("dateISO8601String", ISO8601.format(CALENDAR_VALUE));
│ +        resourceResolver.commit();
│ +
│ +        resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +        ValueMap props = ResourceUtil.getValueMap(resource1);
│ +        assertEquals(CALENDAR_VALUE.getTime(), props.get("calendarProp", Calendar.class).getTime());
│ +    }
│ +
│ +    @Test
│ +    public void testListChildren() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +
│ +        List<Resource> children = Lists.newArrayList(resource1.listChildren());
│ +        assertEquals(2, children.size());
│ +        assertEquals("node11", children.get(0).getName());
│ +        assertEquals("node12", children.get(1).getName());
│ +    }
│ +
│ +    @Test
│ +    public void testListChildren_RootNode() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource("/");
│ +
│ +        List<Resource> children = Lists.newArrayList(resource1.listChildren());
│ +        assertEquals(1, children.size());
│ +        assertEquals("test", children.get(0).getName());
│ +
│ +        children = Lists.newArrayList(resource1.getChildren());
│ +        assertEquals(1, children.size());
│ +        assertEquals("test", children.get(0).getName());
│ +    }
│ +
│ +    @Test
│ +    public void testBinaryData() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +
│ +        Resource binaryPropResource = resource1.getChild("binaryProp");
│ +        InputStream is = binaryPropResource.adaptTo(InputStream.class);
│ +        byte[] dataFromResource = IOUtils.toByteArray(is);
│ +        is.close();
│ +        assertArrayEquals(BINARY_VALUE, dataFromResource);
│ +
│ +        // read second time to ensure not the original input stream was returned
│ +        // and this time using another syntax
│ +        InputStream is2 = ResourceUtil.getValueMap(resource1).get("binaryProp", InputStream.class);
│ +        byte[] dataFromResource2 = IOUtils.toByteArray(is2);
│ +        is2.close();
│ +        assertArrayEquals(BINARY_VALUE, dataFromResource2);
│ +    }
│ +
│ +    @Test
│ +    public void testPrimaryTypeResourceType() {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +        assertEquals(NT_UNSTRUCTURED, resource1.getResourceType());
│ +    }
│ +
│ +    @Test
│ +    public void testNormalizePath() {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/./node1");
│ +        assertEquals("node1", resource1.getName());
│ +
│ +        Resource resource11 = resourceResolver.getResource(testRoot.getPath() + "/node1/../node1/node11");
│ +        assertEquals("node11", resource11.getName());
│ +    }
│ +
│ +    @Test
│ +    public void testGetResourceNullPath() {
│ +        Resource resource = resourceResolver.getResource((String)null);
│ +        assertNull(resource);
│ +    }
│ +
│ +    @Test
│ +    public void testGetConvertedToNullType() {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +        Object propValue = ResourceUtil.getValueMap(resource1).get("stringProp", null);
│ +
│ +        assertEquals(STRING_VALUE, propValue);
│ +    }
│ +
│ +    @Test
│ +    public void testGetRootResourceByNullPath() {
│ +        Resource rootResource = this.resourceResolver.resolve((String)null);
│ +        assertNotNull(rootResource);
│ +        assertEquals("/", rootResource.getPath());
│ +    }
│ +
│ +    @Test
│ +    public void testResolveExistingResource() {
│ +        Resource resource = resourceResolver.resolve(testRoot.getPath() + "/node1");
│ +        assertNotNull(resource);
│ +        assertEquals(testRoot.getPath() + "/node1", resource.getPath());
│ +    }
│ +
│ +    @Test
│ +    public void testResolveNonexistingResource() {
│ +        Resource resource = resourceResolver.resolve("/non/existing/path");
│ +        assertTrue(resource instanceof NonExistingResource);
│ +        assertEquals("/non/existing/path", resource.getPath());
│ +    }
│ +
│ +    @Test
│ +    public void testGetParentResourceType() throws PersistenceException {
│ +        Resource r1 = resourceResolver.create(testRoot, "resource1", ImmutableMap.<String, Object>of());
│ +        Resource r2 = resourceResolver.create(testRoot, "resource2", ImmutableMap.<String, Object>of(
│ +                "sling:resourceSuperType", testRoot.getPath() + "/resource1"));
│ +        Resource r3 = resourceResolver.create(testRoot, "resource3", ImmutableMap.<String, Object>of(
│ +                "sling:resourceType", testRoot.getPath() + "/resource2"));
│ +        Resource r4 = resourceResolver.create(testRoot, "resource4", ImmutableMap.<String, Object>of(
│ +                "sling:resourceSuperType", testRoot.getPath() + "/resource2"));
│ +
│ +        assertNull(resourceResolver.getParentResourceType(r1));
│ +        assertEquals(r1.getPath(), resourceResolver.getParentResourceType(r2));
│ +        assertEquals(r1.getPath(), resourceResolver.getParentResourceType(r3));
│ +        assertEquals(r2.getPath(), resourceResolver.getParentResourceType(r4));
│ +        assertEquals(r2.getPath(), resourceResolver.getParentResourceType(r4.getPath()));
│ +    }
│ +
│ +
│ +    @Test
│ +    public void testResourceMetadata() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +        assertEquals(testRoot.getPath() + "/node1", resource1.getResourceMetadata().getResolutionPath());
│ +    }
│ +
│ +    @Test
│ +    public void testResourceWithoutResourceType() throws PersistenceException {
│ +        Resource noResourceType = resourceResolver.create(testRoot, "/noResourceType", ImmutableMap.<String, Object>of());
│ +        assertNotNull(noResourceType.getResourceType());
│ +    }
│ +}
├── org.apache.sling.testing.resourceresolver-mock-1.3.0/src/test/java/org/apache/sling/testing/resourceresolver/ValueMapTest.java
│ @@ -1,108 +1,108 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import static org.junit.Assert.assertEquals;
│ -import static org.junit.Assert.assertTrue;
│ -
│ -import java.io.IOException;
│ -import java.util.Map;
│ -
│ -import org.apache.sling.api.resource.LoginException;
│ -import org.apache.sling.api.resource.ModifiableValueMap;
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ValueMap;
│ -import org.junit.Before;
│ -import org.junit.Test;
│ -
│ -import com.google.common.collect.ImmutableMap;
│ -
│ -/**
│ - * Test different ValueMap variants.
│ - */
│ -@SuppressWarnings("null")
│ -public class ValueMapTest {
│ -
│ -    private ResourceResolver resourceResolver;
│ -    private Resource testRoot;
│ -
│ -    @Before
│ -    public final void setUp() throws IOException, LoginException {
│ -        resourceResolver = new MockResourceResolverFactory().getResourceResolver(null);
│ -
│ -        Resource root = resourceResolver.getResource("/");
│ -        testRoot = resourceResolver.create(root, "test", ValueMap.EMPTY);
│ -
│ -        resourceResolver.create(testRoot, "node1",
│ -            ImmutableMap.<String, Object>builder()
│ -                .put("prop1", "value1")
│ -                .build());
│ -    }
│ -
│ -    @SuppressWarnings("unchecked")
│ -    @Test
│ -    public void testMap() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -
│ -        Map<String, Object> map = resource1.adaptTo(Map.class);
│ -        assertTrue(map instanceof ValueMap && !(map instanceof ModifiableValueMap));
│ -
│ -        assertEquals("value1", map.get("prop1"));
│ -    }
│ -
│ -    @SuppressWarnings("unchecked")
│ -    @Test(expected = UnsupportedOperationException.class)
│ -    public void testMap_Readonly() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -
│ -        Map<String, Object> map = resource1.adaptTo(Map.class);
│ -        map.put("prop1", "value2");
│ -    }
│ -
│ -    @Test
│ -    public void testValueMap() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -
│ -        ValueMap map = resource1.adaptTo(ValueMap.class);
│ -        assertTrue(map instanceof ValueMap && !(map instanceof ModifiableValueMap));
│ -
│ -        assertEquals("value1", map.get("prop1"));
│ -    }
│ -
│ -    @Test(expected = UnsupportedOperationException.class)
│ -    public void testValueMapMap_Readonly() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -
│ -        ValueMap map = resource1.adaptTo(ValueMap.class);
│ -        map.put("prop1", "value2");
│ -    }
│ -
│ -    @Test
│ -    public void testModifiableValueMap() throws IOException {
│ -        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ -
│ -        ValueMap map = resource1.adaptTo(ModifiableValueMap.class);
│ -        assertTrue(map instanceof ValueMap && map instanceof ModifiableValueMap);
│ -
│ -        assertEquals("value1", map.get("prop1"));
│ -        map.put("prop1", "value2");
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import static org.junit.Assert.assertEquals;
│ +import static org.junit.Assert.assertTrue;
│ +
│ +import java.io.IOException;
│ +import java.util.Map;
│ +
│ +import org.apache.sling.api.resource.LoginException;
│ +import org.apache.sling.api.resource.ModifiableValueMap;
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ValueMap;
│ +import org.junit.Before;
│ +import org.junit.Test;
│ +
│ +import com.google.common.collect.ImmutableMap;
│ +
│ +/**
│ + * Test different ValueMap variants.
│ + */
│ +@SuppressWarnings("null")
│ +public class ValueMapTest {
│ +
│ +    private ResourceResolver resourceResolver;
│ +    private Resource testRoot;
│ +
│ +    @Before
│ +    public final void setUp() throws IOException, LoginException {
│ +        resourceResolver = new MockResourceResolverFactory().getResourceResolver(null);
│ +
│ +        Resource root = resourceResolver.getResource("/");
│ +        testRoot = resourceResolver.create(root, "test", ValueMap.EMPTY);
│ +
│ +        resourceResolver.create(testRoot, "node1",
│ +            ImmutableMap.<String, Object>builder()
│ +                .put("prop1", "value1")
│ +                .build());
│ +    }
│ +
│ +    @SuppressWarnings("unchecked")
│ +    @Test
│ +    public void testMap() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +
│ +        Map<String, Object> map = resource1.adaptTo(Map.class);
│ +        assertTrue(map instanceof ValueMap && !(map instanceof ModifiableValueMap));
│ +
│ +        assertEquals("value1", map.get("prop1"));
│ +    }
│ +
│ +    @SuppressWarnings("unchecked")
│ +    @Test(expected = UnsupportedOperationException.class)
│ +    public void testMap_Readonly() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +
│ +        Map<String, Object> map = resource1.adaptTo(Map.class);
│ +        map.put("prop1", "value2");
│ +    }
│ +
│ +    @Test
│ +    public void testValueMap() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +
│ +        ValueMap map = resource1.adaptTo(ValueMap.class);
│ +        assertTrue(map instanceof ValueMap && !(map instanceof ModifiableValueMap));
│ +
│ +        assertEquals("value1", map.get("prop1"));
│ +    }
│ +
│ +    @Test(expected = UnsupportedOperationException.class)
│ +    public void testValueMapMap_Readonly() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +
│ +        ValueMap map = resource1.adaptTo(ValueMap.class);
│ +        map.put("prop1", "value2");
│ +    }
│ +
│ +    @Test
│ +    public void testModifiableValueMap() throws IOException {
│ +        Resource resource1 = resourceResolver.getResource(testRoot.getPath() + "/node1");
│ +
│ +        ValueMap map = resource1.adaptTo(ModifiableValueMap.class);
│ +        assertTrue(map instanceof ValueMap && map instanceof ModifiableValueMap);
│ +
│ +        assertEquals("value1", map.get("prop1"));
│ +        map.put("prop1", "value2");
│ +    }
│ +
│ +}

4 / 4 target/reference/org.apache.sling.testing.resourceresolver-mock-1.3.0-sources.jar target/org.apache.sling.testing.resourceresolver-mock-1.3.0-sources.jar
--- target/reference/org.apache.sling.testing.resourceresolver-mock-1.3.0-sources.jar
+++ target/org.apache.sling.testing.resourceresolver-mock-1.3.0-sources.jar
├── zipinfo {}
│ @@ -1,33 +1,33 @@
│ -Zip file size: 31240 bytes, number of entries: 31
│ +Zip file size: 31421 bytes, number of entries: 31
│  -rw-r--r--  2.0 unx       64 b- defN 22-May-05 16:21 META-INF/MANIFEST.MF
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 META-INF/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org/apache/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org/apache/sling/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org/apache/sling/testing/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 org/apache/sling/testing/resourceresolver/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 META-INF/maven/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 META-INF/maven/org.apache.sling/
│  drwxr-xr-x  2.0 unx        0 b- stor 22-May-05 16:21 META-INF/maven/org.apache.sling/org.apache.sling.testing.resourceresolver-mock/
│  -rw-r--r--  2.0 unx      783 b- defN 22-May-05 16:21 META-INF/DEPENDENCIES
│  -rw-r--r--  2.0 unx    11358 b- defN 22-May-05 16:21 META-INF/LICENSE
│  -rw-r--r--  2.0 unx      298 b- defN 22-May-05 16:21 META-INF/NOTICE
│ --rw-r--r--  2.0 unx     2755 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/DateUtils.java
│ --rw-r--r--  2.0 unx     1380 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/DefaultMockResourceFactory.java
│ --rw-r--r--  2.0 unx     1468 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockFindResourcesHandler.java
│ --rw-r--r--  2.0 unx     4519 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockHelper.java
│ --rw-r--r--  2.0 unx     2582 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockPropertyResource.java
│ --rw-r--r--  2.0 unx     1448 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockQueryResourceHandler.java
│ --rw-r--r--  2.0 unx     5238 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockResource.java
│ --rw-r--r--  2.0 unx     1293 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockResourceFactory.java
│ --rw-r--r--  2.0 unx    21467 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockResourceResolver.java
│ --rw-r--r--  2.0 unx     5017 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockResourceResolverFactory.java
│ --rw-r--r--  2.0 unx     2614 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockResourceResolverFactoryOptions.java
│ --rw-r--r--  2.0 unx     3921 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockValueMap.java
│ --rw-r--r--  2.0 unx     2855 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/NamespaceMangler.java
│ --rw-r--r--  2.0 unx     3047 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/ReadonlyValueMapDecorator.java
│ --rw-r--r--  2.0 unx     2816 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/ResourceTypeUtil.java
│ --rw-r--r--  2.0 unx      963 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/package-info.java
│ --rw-r--r--  2.0 unx     7248 b- defN 22-May-05 16:21 META-INF/maven/org.apache.sling/org.apache.sling.testing.resourceresolver-mock/pom.xml
│ +-rw-r--r--  2.0 unx     2854 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/DateUtils.java
│ +-rw-r--r--  2.0 unx     1417 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/DefaultMockResourceFactory.java
│ +-rw-r--r--  2.0 unx     1509 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockFindResourcesHandler.java
│ +-rw-r--r--  2.0 unx     4652 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockHelper.java
│ +-rw-r--r--  2.0 unx     2667 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockPropertyResource.java
│ +-rw-r--r--  2.0 unx     1489 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockQueryResourceHandler.java
│ +-rw-r--r--  2.0 unx     5386 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockResource.java
│ +-rw-r--r--  2.0 unx     1327 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockResourceFactory.java
│ +-rw-r--r--  2.0 unx    22028 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockResourceResolver.java
│ +-rw-r--r--  2.0 unx     5154 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockResourceResolverFactory.java
│ +-rw-r--r--  2.0 unx     2694 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockResourceResolverFactoryOptions.java
│ +-rw-r--r--  2.0 unx     4033 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/MockValueMap.java
│ +-rw-r--r--  2.0 unx     2935 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/NamespaceMangler.java
│ +-rw-r--r--  2.0 unx     3160 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/ReadonlyValueMapDecorator.java
│ +-rw-r--r--  2.0 unx     2878 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/ResourceTypeUtil.java
│ +-rw-r--r--  2.0 unx      986 b- defN 22-May-05 16:21 org/apache/sling/testing/resourceresolver/package-info.java
│ +-rw-r--r--  2.0 unx     7442 b- defN 22-May-05 16:21 META-INF/maven/org.apache.sling/org.apache.sling.testing.resourceresolver-mock/pom.xml
│  -rw-r--r--  2.0 unx      100 b- defN 22-May-05 16:21 META-INF/maven/org.apache.sling/org.apache.sling.testing.resourceresolver-mock/pom.properties
│ -31 files, 83234 bytes uncompressed, 25776 bytes compressed:  69.0%
│ +31 files, 85214 bytes uncompressed, 25957 bytes compressed:  69.5%
├── org/apache/sling/testing/resourceresolver/DateUtils.java
│ @@ -1,99 +1,99 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.Calendar;
│ -import java.util.Date;
│ -
│ -import org.apache.jackrabbit.util.ISO8601;
│ -
│ -/**
│ - * This is copied from org.apache.sling.api.wrappers.impl.DateUtils
│ - * to avoid dependency to latest Sling API.
│ - * This can be removed when Sling API 2.17.0 or higher is referenced.
│ - */
│ -final class DateUtils {
│ -
│ -    private DateUtils() {
│ -        // static methods only
│ -    }
│ -
│ -    /**
│ -     * @param date Date value
│ -     * @return Calendar value or null
│ -     */
│ -    public static Calendar toCalendar(Date input) {
│ -        if (input == null) {
│ -            return null;
│ -        }
│ -        Calendar result = Calendar.getInstance();
│ -        result.setTime(input);
│ -        return result;
│ -    }
│ -
│ -    /**
│ -     * @param calendar Calendar value
│ -     * @return Date value or null
│ -     */
│ -    public static Date toDate(Calendar input) {
│ -        if (input == null) {
│ -            return null;
│ -        }
│ -        return input.getTime();
│ -    }
│ -
│ -    /**
│ -     * @param input Date value
│ -     * @return ISO8601 string representation or null
│ -     */
│ -    public static String dateToString(Date input) {
│ -        return calendarToString(toCalendar(input));
│ -    }
│ -
│ -    /**
│ -     * @param input Calendar value
│ -     * @return ISO8601 string representation or null
│ -     */
│ -    public static String calendarToString(Calendar input) {
│ -        if (input == null) {
│ -            return null;
│ -        }
│ -        return ISO8601.format(input);
│ -    }
│ -
│ -    /**
│ -     * @param input ISO8601 string representation
│ -     * @return Date value or null
│ -     */
│ -    public static Date dateFromString(String input) {
│ -        return toDate(calendarFromString(input));
│ -    }
│ -
│ -    /**
│ -     * @param input ISO8601 string representation
│ -     * @return Calendar value or null
│ -     */
│ -    public static Calendar calendarFromString(String input) {
│ -        if (input == null) {
│ -            return null;
│ -        }
│ -        return ISO8601.parse(input);
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.Calendar;
│ +import java.util.Date;
│ +
│ +import org.apache.jackrabbit.util.ISO8601;
│ +
│ +/**
│ + * This is copied from org.apache.sling.api.wrappers.impl.DateUtils
│ + * to avoid dependency to latest Sling API.
│ + * This can be removed when Sling API 2.17.0 or higher is referenced.
│ + */
│ +final class DateUtils {
│ +
│ +    private DateUtils() {
│ +        // static methods only
│ +    }
│ +
│ +    /**
│ +     * @param date Date value
│ +     * @return Calendar value or null
│ +     */
│ +    public static Calendar toCalendar(Date input) {
│ +        if (input == null) {
│ +            return null;
│ +        }
│ +        Calendar result = Calendar.getInstance();
│ +        result.setTime(input);
│ +        return result;
│ +    }
│ +
│ +    /**
│ +     * @param calendar Calendar value
│ +     * @return Date value or null
│ +     */
│ +    public static Date toDate(Calendar input) {
│ +        if (input == null) {
│ +            return null;
│ +        }
│ +        return input.getTime();
│ +    }
│ +
│ +    /**
│ +     * @param input Date value
│ +     * @return ISO8601 string representation or null
│ +     */
│ +    public static String dateToString(Date input) {
│ +        return calendarToString(toCalendar(input));
│ +    }
│ +
│ +    /**
│ +     * @param input Calendar value
│ +     * @return ISO8601 string representation or null
│ +     */
│ +    public static String calendarToString(Calendar input) {
│ +        if (input == null) {
│ +            return null;
│ +        }
│ +        return ISO8601.format(input);
│ +    }
│ +
│ +    /**
│ +     * @param input ISO8601 string representation
│ +     * @return Date value or null
│ +     */
│ +    public static Date dateFromString(String input) {
│ +        return toDate(calendarFromString(input));
│ +    }
│ +
│ +    /**
│ +     * @param input ISO8601 string representation
│ +     * @return Calendar value or null
│ +     */
│ +    public static Calendar calendarFromString(String input) {
│ +        if (input == null) {
│ +            return null;
│ +        }
│ +        return ISO8601.parse(input);
│ +    }
│ +
│ +}
├── org/apache/sling/testing/resourceresolver/DefaultMockResourceFactory.java
│ @@ -1,37 +1,37 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one or more
│ - * contributor license agreements.  See the NOTICE file distributed with
│ - * this work for additional information regarding copyright ownership.
│ - * The ASF licenses this file to You under the Apache License, Version 2.0
│ - * (the "License"); you may not use this file except in compliance with
│ - * the License.  You may obtain a copy of the License at
│ - *
│ - *      http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing, software
│ - * distributed under the License is distributed on an "AS IS" BASIS,
│ - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
│ - * See the License for the specific language governing permissions and
│ - * limitations under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.Map;
│ -
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -
│ -/**
│ - * Default factory implementation that always returns a MockResource
│ - * object
│ - */
│ -public class DefaultMockResourceFactory implements MockResourceFactory {
│ -
│ -    @Override
│ -    public Resource newMockResource(final String path, 
│ -            final Map<String, Object> properties, 
│ -            final ResourceResolver resolver) {
│ -        return new MockResource(path, properties, resolver);
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one or more
│ + * contributor license agreements.  See the NOTICE file distributed with
│ + * this work for additional information regarding copyright ownership.
│ + * The ASF licenses this file to You under the Apache License, Version 2.0
│ + * (the "License"); you may not use this file except in compliance with
│ + * the License.  You may obtain a copy of the License at
│ + *
│ + *      http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing, software
│ + * distributed under the License is distributed on an "AS IS" BASIS,
│ + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
│ + * See the License for the specific language governing permissions and
│ + * limitations under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.Map;
│ +
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +
│ +/**
│ + * Default factory implementation that always returns a MockResource
│ + * object
│ + */
│ +public class DefaultMockResourceFactory implements MockResourceFactory {
│ +
│ +    @Override
│ +    public Resource newMockResource(final String path, 
│ +            final Map<String, Object> properties, 
│ +            final ResourceResolver resolver) {
│ +        return new MockResource(path, properties, resolver);
│ +    }
│ +
│ +}
├── org/apache/sling/testing/resourceresolver/MockFindResourcesHandler.java
│ @@ -1,41 +1,41 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.Iterator;
│ -
│ -import org.apache.sling.api.resource.Resource;
│ -import org.jetbrains.annotations.NotNull;
│ -import org.jetbrains.annotations.Nullable;
│ -import org.osgi.annotation.versioning.ConsumerType;
│ -
│ -/**
│ - * Can provide a result when finding resources using a certain query/language.
│ - */
│ -@ConsumerType
│ -public interface MockFindResourcesHandler {
│ -
│ -    /**
│ -     * @param query Query
│ -     * @param language Language
│ -     * @return Returns a non-null value if a mocked result is available
│ -     */
│ -    @Nullable Iterator<Resource> findResources(final @NotNull String query, final String language);
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.Iterator;
│ +
│ +import org.apache.sling.api.resource.Resource;
│ +import org.jetbrains.annotations.NotNull;
│ +import org.jetbrains.annotations.Nullable;
│ +import org.osgi.annotation.versioning.ConsumerType;
│ +
│ +/**
│ + * Can provide a result when finding resources using a certain query/language.
│ + */
│ +@ConsumerType
│ +public interface MockFindResourcesHandler {
│ +
│ +    /**
│ +     * @param query Query
│ +     * @param language Language
│ +     * @return Returns a non-null value if a mocked result is available
│ +     */
│ +    @Nullable Iterator<Resource> findResources(final @NotNull String query, final String language);
│ +
│ +}
├── org/apache/sling/testing/resourceresolver/MockHelper.java
│ @@ -1,133 +1,133 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.HashMap;
│ -import java.util.Map;
│ -import java.util.Stack;
│ -
│ -import org.apache.sling.api.resource.PersistenceException;
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ResourceUtil;
│ -import org.jetbrains.annotations.NotNull;
│ -import org.jetbrains.annotations.Nullable;
│ -
│ -/**
│ - * Helper class to create resources:
│ - *
│ - * MockHelper.create(resolver).resource("/libs").p("prop", "value")
│ - *                              .resource("sub").p("sub", "hello")
│ - *                              .resource(".sameLevel")
│ - *                            .resource("/apps").p("foo", "baa").commit()
│ - *
│ - */
│ -public class MockHelper {
│ -
│ -    private final ResourceResolver resolver;
│ -
│ -    private final Stack<Description> stack = new Stack<Description>();
│ -
│ -    private MockHelper(final ResourceResolver r) {
│ -        this.resolver = r;
│ -    }
│ -
│ -
│ -    /**
│ -     * Create a new helper
│ -     * @param resolver Resource resolver
│ -     * @return this
│ -     */
│ -    public static @NotNull MockHelper create(@NotNull final ResourceResolver resolver) {
│ -        return new MockHelper(resolver);
│ -    }
│ -
│ -    /**
│ -     * Add a new resource.
│ -     * If the path is relative, this resource is added as a child to the previous resource.
│ -     * If the path is relative and starts with a dot, this resource is added as a peer to the previous resource.
│ -     * @param path Resource path
│ -     * @return this
│ -     */
│ -    public @NotNull MockHelper resource(@NotNull final String path) {
│ -        final String fullPath;
│ -        if ( path.startsWith("/") ) {
│ -            fullPath = path;
│ -        } else if ( path.startsWith(".") ) {
│ -            final Description d = this.stack.peek();
│ -            fullPath = ResourceUtil.normalize(d.path + "/../" + path.substring(1));
│ -        } else {
│ -            final Description d = this.stack.peek();
│ -            fullPath = d.path + "/" + path;
│ -        }
│ -        final Description d = new Description();
│ -        d.path = fullPath;
│ -        this.stack.push(d);
│ -
│ -        return this;
│ -    }
│ -
│ -    /**
│ -     * Add a property to the current resource
│ -     * @param name Property name
│ -     * @param value Property value
│ -     * @return this
│ -     */
│ -    public @NotNull MockHelper p(@NotNull final String name, @Nullable final Object value) {
│ -        final Description d = this.stack.peek();
│ -        d.properties.put(name, value);
│ -
│ -        return this;
│ -    }
│ -
│ -    /**
│ -     * Finish building and add all resources to the resource tree.
│ -     * @throws PersistenceException Persistence exception
│ -     */
│ -    public void add() throws PersistenceException {
│ -        for(int i=0; i<this.stack.size(); i++) {
│ -            final Description d = this.stack.get(i);
│ -            this.create(d.path, d.properties);
│ -        }
│ -        this.stack.clear();
│ -    }
│ -
│ -    /**
│ -     * Finish building, add all resources to the resource tree and commit changes.
│ -     * @throws PersistenceException Persistence exception
│ -     */
│ -    public void commit() throws PersistenceException {
│ -        this.add();
│ -        this.resolver.commit();
│ -    }
│ -
│ -    @SuppressWarnings("null")
│ -    private void create(@NotNull final String path, @NotNull final Map<String, Object> properties) throws PersistenceException {
│ -        final String parentPath = ResourceUtil.getParent(path);
│ -        final String name = ResourceUtil.getName(path);
│ -
│ -        final Resource parent = this.resolver.getResource(parentPath);
│ -        this.resolver.create(parent, name, properties);
│ -    }
│ -
│ -    private static final class Description {
│ -        public String path;
│ -        public Map<String, Object> properties = new HashMap<String, Object>();
│ -    }
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.HashMap;
│ +import java.util.Map;
│ +import java.util.Stack;
│ +
│ +import org.apache.sling.api.resource.PersistenceException;
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ResourceUtil;
│ +import org.jetbrains.annotations.NotNull;
│ +import org.jetbrains.annotations.Nullable;
│ +
│ +/**
│ + * Helper class to create resources:
│ + *
│ + * MockHelper.create(resolver).resource("/libs").p("prop", "value")
│ + *                              .resource("sub").p("sub", "hello")
│ + *                              .resource(".sameLevel")
│ + *                            .resource("/apps").p("foo", "baa").commit()
│ + *
│ + */
│ +public class MockHelper {
│ +
│ +    private final ResourceResolver resolver;
│ +
│ +    private final Stack<Description> stack = new Stack<Description>();
│ +
│ +    private MockHelper(final ResourceResolver r) {
│ +        this.resolver = r;
│ +    }
│ +
│ +
│ +    /**
│ +     * Create a new helper
│ +     * @param resolver Resource resolver
│ +     * @return this
│ +     */
│ +    public static @NotNull MockHelper create(@NotNull final ResourceResolver resolver) {
│ +        return new MockHelper(resolver);
│ +    }
│ +
│ +    /**
│ +     * Add a new resource.
│ +     * If the path is relative, this resource is added as a child to the previous resource.
│ +     * If the path is relative and starts with a dot, this resource is added as a peer to the previous resource.
│ +     * @param path Resource path
│ +     * @return this
│ +     */
│ +    public @NotNull MockHelper resource(@NotNull final String path) {
│ +        final String fullPath;
│ +        if ( path.startsWith("/") ) {
│ +            fullPath = path;
│ +        } else if ( path.startsWith(".") ) {
│ +            final Description d = this.stack.peek();
│ +            fullPath = ResourceUtil.normalize(d.path + "/../" + path.substring(1));
│ +        } else {
│ +            final Description d = this.stack.peek();
│ +            fullPath = d.path + "/" + path;
│ +        }
│ +        final Description d = new Description();
│ +        d.path = fullPath;
│ +        this.stack.push(d);
│ +
│ +        return this;
│ +    }
│ +
│ +    /**
│ +     * Add a property to the current resource
│ +     * @param name Property name
│ +     * @param value Property value
│ +     * @return this
│ +     */
│ +    public @NotNull MockHelper p(@NotNull final String name, @Nullable final Object value) {
│ +        final Description d = this.stack.peek();
│ +        d.properties.put(name, value);
│ +
│ +        return this;
│ +    }
│ +
│ +    /**
│ +     * Finish building and add all resources to the resource tree.
│ +     * @throws PersistenceException Persistence exception
│ +     */
│ +    public void add() throws PersistenceException {
│ +        for(int i=0; i<this.stack.size(); i++) {
│ +            final Description d = this.stack.get(i);
│ +            this.create(d.path, d.properties);
│ +        }
│ +        this.stack.clear();
│ +    }
│ +
│ +    /**
│ +     * Finish building, add all resources to the resource tree and commit changes.
│ +     * @throws PersistenceException Persistence exception
│ +     */
│ +    public void commit() throws PersistenceException {
│ +        this.add();
│ +        this.resolver.commit();
│ +    }
│ +
│ +    @SuppressWarnings("null")
│ +    private void create(@NotNull final String path, @NotNull final Map<String, Object> properties) throws PersistenceException {
│ +        final String parentPath = ResourceUtil.getParent(path);
│ +        final String name = ResourceUtil.getName(path);
│ +
│ +        final Resource parent = this.resolver.getResource(parentPath);
│ +        this.resolver.create(parent, name, properties);
│ +    }
│ +
│ +    private static final class Description {
│ +        public String path;
│ +        public Map<String, Object> properties = new HashMap<String, Object>();
│ +    }
│ +}
├── org/apache/sling/testing/resourceresolver/MockPropertyResource.java
│ @@ -1,85 +1,85 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import org.apache.sling.api.resource.AbstractResource;
│ -import org.apache.sling.api.resource.ResourceMetadata;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ResourceUtil;
│ -import org.apache.sling.api.resource.ValueMap;
│ -import org.jetbrains.annotations.NotNull;
│ -
│ -/**
│ - * Resource that wraps a property value.
│ - */
│ -class MockPropertyResource extends AbstractResource {
│ -
│ -    private final String path;
│ -    private final ValueMap props;
│ -    private final String key;
│ -    private final ResourceResolver resolver;
│ -    private final ResourceMetadata rm = new ResourceMetadata();
│ -
│ -    public MockPropertyResource(final String path,
│ -            final ValueMap props,
│ -            final ResourceResolver resolver) {
│ -        this.path = path;
│ -        this.props = props;
│ -        this.key = ResourceUtil.getName(path);
│ -        this.resolver = resolver;
│ -    }
│ -
│ -    @Override
│ -    public @NotNull String getPath() {
│ -        return this.path;
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("null")
│ -    public @NotNull String getResourceType() {
│ -        // TODO: we should return a resource type here!
│ -        return null;
│ -    }
│ -
│ -    @Override
│ -    public String getResourceSuperType() {
│ -        return null;
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceMetadata getResourceMetadata() {
│ -        return rm;
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceResolver getResourceResolver() {
│ -        return this.resolver;
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("null")
│ -    public <AdapterType> AdapterType adaptTo(Class<AdapterType> type) {
│ -        AdapterType value = props.get(key, type);
│ -        if (value!=null) {
│ -            return value;
│ -        }
│ -        return super.adaptTo(type);
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import org.apache.sling.api.resource.AbstractResource;
│ +import org.apache.sling.api.resource.ResourceMetadata;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ResourceUtil;
│ +import org.apache.sling.api.resource.ValueMap;
│ +import org.jetbrains.annotations.NotNull;
│ +
│ +/**
│ + * Resource that wraps a property value.
│ + */
│ +class MockPropertyResource extends AbstractResource {
│ +
│ +    private final String path;
│ +    private final ValueMap props;
│ +    private final String key;
│ +    private final ResourceResolver resolver;
│ +    private final ResourceMetadata rm = new ResourceMetadata();
│ +
│ +    public MockPropertyResource(final String path,
│ +            final ValueMap props,
│ +            final ResourceResolver resolver) {
│ +        this.path = path;
│ +        this.props = props;
│ +        this.key = ResourceUtil.getName(path);
│ +        this.resolver = resolver;
│ +    }
│ +
│ +    @Override
│ +    public @NotNull String getPath() {
│ +        return this.path;
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("null")
│ +    public @NotNull String getResourceType() {
│ +        // TODO: we should return a resource type here!
│ +        return null;
│ +    }
│ +
│ +    @Override
│ +    public String getResourceSuperType() {
│ +        return null;
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceMetadata getResourceMetadata() {
│ +        return rm;
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceResolver getResourceResolver() {
│ +        return this.resolver;
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("null")
│ +    public <AdapterType> AdapterType adaptTo(Class<AdapterType> type) {
│ +        AdapterType value = props.get(key, type);
│ +        if (value!=null) {
│ +            return value;
│ +        }
│ +        return super.adaptTo(type);
│ +    }
│ +
│ +}
├── org/apache/sling/testing/resourceresolver/MockQueryResourceHandler.java
│ @@ -1,41 +1,41 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.Iterator;
│ -import java.util.Map;
│ -
│ -import org.jetbrains.annotations.NotNull;
│ -import org.jetbrains.annotations.Nullable;
│ -import org.osgi.annotation.versioning.ConsumerType;
│ -
│ -/**
│ - * Can provide a result when querying for resources using a certain query/language.
│ - */
│ -@ConsumerType
│ -public interface MockQueryResourceHandler {
│ -
│ -    /**
│ -     * @param query Query
│ -     * @param language Language
│ -     * @return Returns a non-null value if a mocked result is available
│ -     */
│ -    @Nullable Iterator<Map<String, Object>> queryResources(@NotNull String query, String language);
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.Iterator;
│ +import java.util.Map;
│ +
│ +import org.jetbrains.annotations.NotNull;
│ +import org.jetbrains.annotations.Nullable;
│ +import org.osgi.annotation.versioning.ConsumerType;
│ +
│ +/**
│ + * Can provide a result when querying for resources using a certain query/language.
│ + */
│ +@ConsumerType
│ +public interface MockQueryResourceHandler {
│ +
│ +    /**
│ +     * @param query Query
│ +     * @param language Language
│ +     * @return Returns a non-null value if a mocked result is available
│ +     */
│ +    @Nullable Iterator<Map<String, Object>> queryResources(@NotNull String query, String language);
│ +
│ +}
├── org/apache/sling/testing/resourceresolver/MockResource.java
│ @@ -1,148 +1,148 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.io.InputStream;
│ -import java.util.Map;
│ -
│ -import org.apache.sling.api.resource.AbstractResource;
│ -import org.apache.sling.api.resource.ModifiableValueMap;
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceMetadata;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ResourceUtil;
│ -import org.apache.sling.api.resource.ValueMap;
│ -import org.jetbrains.annotations.NotNull;
│ -
│ -public class MockResource extends AbstractResource {
│ -
│ -    private final String path;
│ -
│ -    private final ValueMap props;
│ -
│ -    private final ResourceMetadata rm = new ResourceMetadata();
│ -
│ -    private final ResourceResolver resolver;
│ -
│ -    static final String JCR_PRIMARYTYPE = "jcr:primaryType";
│ -    static final String JCR_CONTENT = "jcr:content";
│ -    static final String JCR_DATA = "jcr:data";
│ -    static final String NT_RESOURCE = "nt:resource";
│ -    static final String NT_FILE = "nt:file";
│ -    static final String NT_UNSTRUCTURED = "nt:unstructured";
│ -
│ -    public MockResource(final String path,
│ -            final Map<String, Object> props,
│ -            final ResourceResolver resolver) {
│ -        this.resolver = resolver;
│ -        this.path = path;
│ -        rm.setResolutionPath(path);
│ -        if (props instanceof MockValueMap) {
│ -            this.props = (MockValueMap)props;
│ -        }
│ -        else if (props instanceof ReadonlyValueMapDecorator &&  ((ReadonlyValueMapDecorator)props).getDelegate() instanceof MockValueMap) {
│ -            this.props = ((ReadonlyValueMapDecorator)props).getDelegate();
│ -        }
│ -        else {
│ -            this.props = new MockValueMap(this, props);
│ -        }
│ -    }
│ -
│ -    @Override
│ -    public @NotNull String getPath() {
│ -        return this.path;
│ -    }
│ -
│ -    @Override
│ -    public @NotNull String getResourceType() {
│ -        String resourceType = this.props.get(ResourceResolver.PROPERTY_RESOURCE_TYPE, String.class);
│ -        if (resourceType == null) {
│ -            // fallback to jcr:primaryType if not resouce type exists (to mimick JCR resource behavior)
│ -            resourceType = this.props.get(JCR_PRIMARYTYPE, String.class);
│ -        }
│ -        if (resourceType == null) {
│ -            // fallback to nt:unstructured if no other resource type can be detected
│ -            resourceType = NT_UNSTRUCTURED;
│ -        }
│ -        return resourceType;
│ -    }
│ -
│ -    @Override
│ -    public String getResourceSuperType() {
│ -        return this.props.get("sling:resourceSuperType", String.class);
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceMetadata getResourceMetadata() {
│ -        return rm;
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceResolver getResourceResolver() {
│ -        return this.resolver;
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings({ "unchecked", "null" })
│ -    public <AdapterType> AdapterType adaptTo(final Class<AdapterType> type) {
│ -        if ( type == ValueMap.class || type == Map.class ) {
│ -            return (AdapterType)new ReadonlyValueMapDecorator(this.props);
│ -        }
│ -        else if ( type == ModifiableValueMap.class ) {
│ -            ((MockResourceResolver)this.resolver).addChanged(this.path, this.props);
│ -            return (AdapterType)this.props;
│ -        }
│ -        else if ( type == InputStream.class ) {
│ -            InputStream is = getFileResourceInputStream();
│ -            if (is != null) {
│ -                return (AdapterType)is;
│ -            }
│ -        }
│ -        return super.adaptTo(type);
│ -    }
│ -
│ -    /**
│ -     * Emulate feature of JCR resource implementation that allows adapting to InputStream for nt:file and nt:resource nodes.
│ -     * @return InputStream or null if adaption not possible.
│ -     */
│ -    private InputStream getFileResourceInputStream() {
│ -        String resourceType = getResourceType();
│ -        if (NT_RESOURCE.equals(resourceType)) {
│ -            return getValueMap().get(JCR_DATA, InputStream.class);
│ -        }
│ -        else if (NT_FILE.equals(resourceType)) {
│ -            Resource contentResource = getChild(JCR_CONTENT);
│ -            if (contentResource != null) {
│ -                return ResourceUtil.getValueMap(contentResource).get(JCR_DATA, InputStream.class);
│ -            }
│ -        }
│ -        return null;
│ -    }
│ -
│ -    @Override
│ -    public ValueMap getValueMap() {
│ -        return this.adaptTo(ValueMap.class);
│ -    }
│ -
│ -    @Override
│ -    public String toString() {
│ -        return "MockResource [path=" + path + ", props=" + props + "]";
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.io.InputStream;
│ +import java.util.Map;
│ +
│ +import org.apache.sling.api.resource.AbstractResource;
│ +import org.apache.sling.api.resource.ModifiableValueMap;
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceMetadata;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ResourceUtil;
│ +import org.apache.sling.api.resource.ValueMap;
│ +import org.jetbrains.annotations.NotNull;
│ +
│ +public class MockResource extends AbstractResource {
│ +
│ +    private final String path;
│ +
│ +    private final ValueMap props;
│ +
│ +    private final ResourceMetadata rm = new ResourceMetadata();
│ +
│ +    private final ResourceResolver resolver;
│ +
│ +    static final String JCR_PRIMARYTYPE = "jcr:primaryType";
│ +    static final String JCR_CONTENT = "jcr:content";
│ +    static final String JCR_DATA = "jcr:data";
│ +    static final String NT_RESOURCE = "nt:resource";
│ +    static final String NT_FILE = "nt:file";
│ +    static final String NT_UNSTRUCTURED = "nt:unstructured";
│ +
│ +    public MockResource(final String path,
│ +            final Map<String, Object> props,
│ +            final ResourceResolver resolver) {
│ +        this.resolver = resolver;
│ +        this.path = path;
│ +        rm.setResolutionPath(path);
│ +        if (props instanceof MockValueMap) {
│ +            this.props = (MockValueMap)props;
│ +        }
│ +        else if (props instanceof ReadonlyValueMapDecorator &&  ((ReadonlyValueMapDecorator)props).getDelegate() instanceof MockValueMap) {
│ +            this.props = ((ReadonlyValueMapDecorator)props).getDelegate();
│ +        }
│ +        else {
│ +            this.props = new MockValueMap(this, props);
│ +        }
│ +    }
│ +
│ +    @Override
│ +    public @NotNull String getPath() {
│ +        return this.path;
│ +    }
│ +
│ +    @Override
│ +    public @NotNull String getResourceType() {
│ +        String resourceType = this.props.get(ResourceResolver.PROPERTY_RESOURCE_TYPE, String.class);
│ +        if (resourceType == null) {
│ +            // fallback to jcr:primaryType if not resouce type exists (to mimick JCR resource behavior)
│ +            resourceType = this.props.get(JCR_PRIMARYTYPE, String.class);
│ +        }
│ +        if (resourceType == null) {
│ +            // fallback to nt:unstructured if no other resource type can be detected
│ +            resourceType = NT_UNSTRUCTURED;
│ +        }
│ +        return resourceType;
│ +    }
│ +
│ +    @Override
│ +    public String getResourceSuperType() {
│ +        return this.props.get("sling:resourceSuperType", String.class);
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceMetadata getResourceMetadata() {
│ +        return rm;
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceResolver getResourceResolver() {
│ +        return this.resolver;
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings({ "unchecked", "null" })
│ +    public <AdapterType> AdapterType adaptTo(final Class<AdapterType> type) {
│ +        if ( type == ValueMap.class || type == Map.class ) {
│ +            return (AdapterType)new ReadonlyValueMapDecorator(this.props);
│ +        }
│ +        else if ( type == ModifiableValueMap.class ) {
│ +            ((MockResourceResolver)this.resolver).addChanged(this.path, this.props);
│ +            return (AdapterType)this.props;
│ +        }
│ +        else if ( type == InputStream.class ) {
│ +            InputStream is = getFileResourceInputStream();
│ +            if (is != null) {
│ +                return (AdapterType)is;
│ +            }
│ +        }
│ +        return super.adaptTo(type);
│ +    }
│ +
│ +    /**
│ +     * Emulate feature of JCR resource implementation that allows adapting to InputStream for nt:file and nt:resource nodes.
│ +     * @return InputStream or null if adaption not possible.
│ +     */
│ +    private InputStream getFileResourceInputStream() {
│ +        String resourceType = getResourceType();
│ +        if (NT_RESOURCE.equals(resourceType)) {
│ +            return getValueMap().get(JCR_DATA, InputStream.class);
│ +        }
│ +        else if (NT_FILE.equals(resourceType)) {
│ +            Resource contentResource = getChild(JCR_CONTENT);
│ +            if (contentResource != null) {
│ +                return ResourceUtil.getValueMap(contentResource).get(JCR_DATA, InputStream.class);
│ +            }
│ +        }
│ +        return null;
│ +    }
│ +
│ +    @Override
│ +    public ValueMap getValueMap() {
│ +        return this.adaptTo(ValueMap.class);
│ +    }
│ +
│ +    @Override
│ +    public String toString() {
│ +        return "MockResource [path=" + path + ", props=" + props + "]";
│ +    }
│ +
│ +}
├── org/apache/sling/testing/resourceresolver/MockResourceFactory.java
│ @@ -1,34 +1,34 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one or more
│ - * contributor license agreements.  See the NOTICE file distributed with
│ - * this work for additional information regarding copyright ownership.
│ - * The ASF licenses this file to You under the Apache License, Version 2.0
│ - * (the "License"); you may not use this file except in compliance with
│ - * the License.  You may obtain a copy of the License at
│ - *
│ - *      http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing, software
│ - * distributed under the License is distributed on an "AS IS" BASIS,
│ - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
│ - * See the License for the specific language governing permissions and
│ - * limitations under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.Map;
│ -
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -
│ -/**
│ - * Implement this interface to customize how MockResource objects
│ - * are created by the MockResourceResolver
│ - */
│ -public interface MockResourceFactory {
│ -
│ -    public Resource newMockResource(final String path, 
│ -            final Map<String, Object> properties,
│ -            final ResourceResolver resolver);
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one or more
│ + * contributor license agreements.  See the NOTICE file distributed with
│ + * this work for additional information regarding copyright ownership.
│ + * The ASF licenses this file to You under the Apache License, Version 2.0
│ + * (the "License"); you may not use this file except in compliance with
│ + * the License.  You may obtain a copy of the License at
│ + *
│ + *      http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing, software
│ + * distributed under the License is distributed on an "AS IS" BASIS,
│ + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
│ + * See the License for the specific language governing permissions and
│ + * limitations under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.Map;
│ +
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +
│ +/**
│ + * Implement this interface to customize how MockResource objects
│ + * are created by the MockResourceResolver
│ + */
│ +public interface MockResourceFactory {
│ +
│ +    public Resource newMockResource(final String path, 
│ +            final Map<String, Object> properties,
│ +            final ResourceResolver resolver);
│ +
│ +}
├── org/apache/sling/testing/resourceresolver/MockResourceResolver.java
│ @@ -1,561 +1,561 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.io.Closeable;
│ -import java.util.ArrayList;
│ -import java.util.Collections;
│ -import java.util.Dictionary;
│ -import java.util.HashMap;
│ -import java.util.HashSet;
│ -import java.util.Hashtable;
│ -import java.util.Iterator;
│ -import java.util.LinkedHashMap;
│ -import java.util.List;
│ -import java.util.Map;
│ -import java.util.Map.Entry;
│ -import java.util.Objects;
│ -import java.util.Set;
│ -import java.util.regex.Pattern;
│ -
│ -import javax.servlet.http.HttpServletRequest;
│ -
│ -import org.apache.sling.api.SlingConstants;
│ -import org.apache.sling.api.SlingException;
│ -import org.apache.sling.api.adapter.SlingAdaptable;
│ -import org.apache.sling.api.resource.LoginException;
│ -import org.apache.sling.api.resource.NonExistingResource;
│ -import org.apache.sling.api.resource.PersistenceException;
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ResourceUtil;
│ -import org.apache.sling.api.resource.ValueMap;
│ -import org.jetbrains.annotations.NotNull;
│ -import org.jetbrains.annotations.Nullable;
│ -import org.osgi.service.event.Event;
│ -import org.osgi.service.event.EventAdmin;
│ -
│ -public class MockResourceResolver extends SlingAdaptable implements ResourceResolver {
│ -
│ -    private final Map<String, Map<String, Object>> resources;
│ -
│ -    private final Map<String, Map<String, Object>> temporaryResources = new LinkedHashMap<String, Map<String,Object>>();
│ -
│ -    private final Set<String> deletedResources = new HashSet<String>();
│ -
│ -    private final MockResourceResolverFactoryOptions options;
│ -
│ -    private final MockResourceResolverFactory factory;
│ -
│ -    private final Map<String,Object> attributes;
│ -
│ -    private Map<String,Object> propertyMap;
│ -
│ -    private final List<MockFindResourcesHandler> findResourcesHandlers = new ArrayList<>();
│ -    private final List<MockQueryResourceHandler> queryResourcesHandlers = new ArrayList<>();
│ -
│ -    public MockResourceResolver(final MockResourceResolverFactoryOptions options,
│ -            final MockResourceResolverFactory factory,
│ -            final Map<String, Map<String, Object>> resources) {
│ -        this(options, factory, resources, Collections.<String,Object>emptyMap());
│ -    }
│ -
│ -    public MockResourceResolver(final MockResourceResolverFactoryOptions options,
│ -            final MockResourceResolverFactory factory,
│ -            final Map<String, Map<String, Object>> resources,
│ -            final Map<String,Object> attributes) {
│ -        this.factory = factory;
│ -        this.options = options;
│ -        this.resources = resources;
│ -        this.attributes = attributes;
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("unused")
│ -    public @NotNull Resource resolve(final @NotNull HttpServletRequest request, final @NotNull String absPath) {
│ -        String path = absPath;
│ -        if (path == null) {
│ -            path = "/";
│ -        }
│ -
│ -        // split off query string or fragment that may be appendend to the URL
│ -        String urlRemainder = null;
│ -        int urlRemainderPos = Math.min(path.indexOf('?'), path.indexOf('#'));
│ -        if (urlRemainderPos >= 0) {
│ -          urlRemainder = path.substring(urlRemainderPos);
│ -          path = path.substring(0, urlRemainderPos);
│ -        }
│ -
│ -        // unmangle namespaces
│ -        if (options.isMangleNamespacePrefixes()) {
│ -            path = NamespaceMangler.unmangleNamespaces(path);
│ -        }
│ -
│ -        // build full path again
│ -        path = path + (urlRemainder != null ? urlRemainder : "");
│ -
│ -        Resource resource = this.getResource(path);
│ -        if (resource == null) {
│ -            resource = new NonExistingResource(this, absPath);
│ -        }
│ -        return resource;
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("null")
│ -    public @NotNull Resource resolve(final @NotNull String absPath) {
│ -        return resolve(null, absPath);
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("null")
│ -    public @NotNull String map(final @NotNull String resourcePath) {
│ -        return map(null, resourcePath);
│ -    }
│ -
│ -    @Override
│ -    public String map(final @NotNull HttpServletRequest request, final @NotNull String resourcePath) {
│ -        String path = resourcePath;
│ -
│ -        // split off query string or fragment that may be appendend to the URL
│ -        String urlRemainder = null;
│ -        int urlRemainderPos = Math.min(path.indexOf('?'), path.indexOf('#'));
│ -        if (urlRemainderPos >= 0) {
│ -          urlRemainder = path.substring(urlRemainderPos);
│ -          path = path.substring(0, urlRemainderPos);
│ -        }
│ -
│ -        // mangle namespaces
│ -        if (options.isMangleNamespacePrefixes()) {
│ -            path = NamespaceMangler.mangleNamespaces(path);
│ -        }
│ -
│ -        // build full path again
│ -        return path + (urlRemainder != null ? urlRemainder : "");
│ -    }
│ -
│ -    @Override
│ -    public Resource getResource(final @NotNull String path) {
│ -        Resource resource = getResourceInternal(path);
│ -
│ -        // if not resource found check if this is a reference to a property
│ -        if (resource == null && path != null) {
│ -            String parentPath = ResourceUtil.getParent(path);
│ -            if (parentPath != null) {
│ -                String name = ResourceUtil.getName(path);
│ -                Resource parentResource = getResourceInternal(parentPath);
│ -                if (parentResource!=null) {
│ -                    ValueMap props = ResourceUtil.getValueMap(parentResource);
│ -                    if (props.containsKey(name)) {
│ -                        return new MockPropertyResource(path, props, this);
│ -                    }
│ -                }
│ -            }
│ -        }
│ -
│ -        return resource;
│ -    }
│ -
│ -    private Resource getResourceInternal(final String path) {
│ -        if (path == null) {
│ -            return null;
│ -        }
│ -
│ -        String normalizedPath = ResourceUtil.normalize(path);
│ -        if (normalizedPath == null) {
│ -            return null;
│ -        } else if ( normalizedPath.startsWith("/") ) {
│ -            if ( this.deletedResources.contains(normalizedPath) ) {
│ -                return null;
│ -            }
│ -            final Map<String, Object> tempProps = this.temporaryResources.get(normalizedPath);
│ -            if ( tempProps != null ) {
│ -                return newMockResource(normalizedPath, tempProps, this);
│ -            }
│ -            synchronized ( this.resources ) {
│ -                final Map<String, Object> props = this.resources.get(normalizedPath);
│ -                if ( props != null ) {
│ -                    return newMockResource(normalizedPath, props, this);
│ -                }
│ -            }
│ -        } else {
│ -            for(final String s : this.getSearchPath() ) {
│ -                final Resource rsrc = this.getResource(s + '/' + normalizedPath);
│ -                if ( rsrc != null ) {
│ -                    return rsrc;
│ -                }
│ -            }
│ -        }
│ -        return null;
│ -    }
│ -
│ -    @Override
│ -    public Resource getResource(Resource base, @NotNull String path) {
│ -        if ( path == null || path.length() == 0 ) {
│ -            path = "/";
│ -        }
│ -        if ( path.startsWith("/") ) {
│ -            return getResource(path);
│ -        }
│ -        if ( base.getPath().equals("/") ) {
│ -            return getResource(base.getPath() + path);
│ -        }
│ -        return getResource(base.getPath() + '/' + path);
│ -    }
│ -
│ -    @Override
│ -    public @NotNull String[] getSearchPath() {
│ -        return this.options.getSearchPaths();
│ -    }
│ -
│ -    @Override
│ -    public @NotNull Iterator<Resource> listChildren(final @NotNull Resource parent) {
│ -        final String pathPrefix = "/".equals(parent.getPath()) ? "" : parent.getPath();
│ -        final Pattern childPathMatcher = Pattern.compile("^" + Pattern.quote(pathPrefix) + "/[^/]+$");
│ -        final Map<String, Map<String, Object>> candidates = new LinkedHashMap<String, Map<String,Object>>();
│ -        synchronized ( this.resources ) {
│ -            for(final Map.Entry<String, Map<String, Object>> e : this.resources.entrySet()) {
│ -                if (childPathMatcher.matcher(e.getKey()).matches()) {
│ -                    if ( !this.deletedResources.contains(e.getKey()) ) {
│ -                        candidates.put(e.getKey(), e.getValue());
│ -                    }
│ -                }
│ -            }
│ -            for(final Map.Entry<String, Map<String, Object>> e : this.temporaryResources.entrySet()) {
│ -                if (childPathMatcher.matcher(e.getKey()).matches()) {
│ -                    if ( !this.deletedResources.contains(e.getKey()) ) {
│ -                        candidates.put(e.getKey(), e.getValue());
│ -                    }
│ -                }
│ -            }
│ -        }
│ -        final List<Resource> children = new ArrayList<Resource>();
│ -        for(final Map.Entry<String, Map<String, Object>> e : candidates.entrySet()) {
│ -            children.add(newMockResource(e.getKey(), e.getValue(), this));
│ -        }
│ -        return children.iterator();
│ -    }
│ -
│ -    private Resource newMockResource(final String path,
│ -            final Map<String, Object> properties,
│ -            final ResourceResolver resolver) {
│ -        return this.options.getMockResourceFactory()
│ -                    .newMockResource(path, properties, resolver);
│ -    }
│ -
│ -    @Override
│ -    public @NotNull Iterable<Resource> getChildren(final @NotNull Resource parent) {
│ -        return new Iterable<Resource>() {
│ -            @Override
│ -            public Iterator<Resource> iterator() {
│ -                return listChildren(parent);
│ -            }
│ -        };
│ -    }
│ -
│ -    @Override
│ -    public boolean isLive() {
│ -        return true;
│ -    }
│ -
│ -    @Override
│ -    public void close() {
│ -        clearPropertyMap();
│ -        this.factory.closed(this);
│ -    }
│ -
│ -    private void clearPropertyMap(){
│ -        if (propertyMap != null) {
│ -            for (Entry<String, Object> entry : propertyMap.entrySet()) {
│ -                if (entry.getValue()  instanceof Closeable) {
│ -                    try {
│ -                        ((Closeable) entry.getValue()).close();
│ -                    } catch (Exception e) {
│ -                        // ignore
│ -                    }
│ -                }
│ -            }
│ -            propertyMap.clear();
│ -        }
│ -    }
│ -
│ -    @Override
│ -    public String getUserID() {
│ -        return null;
│ -    }
│ -
│ -    @Override
│ -    public @NotNull Iterator<String> getAttributeNames() {
│ -        return attributes.keySet().iterator();
│ -    }
│ -
│ -    @Override
│ -    public Object getAttribute(final @NotNull String name) {
│ -        return attributes.get(name);
│ -    }
│ -
│ -    @Override
│ -    public void delete(final @NotNull Resource resource) throws PersistenceException {
│ -        this.deletedResources.add(resource.getPath());
│ -        this.temporaryResources.remove(resource.getPath());
│ -        final String prefixPath = resource.getPath() + '/';
│ -        synchronized ( this.resources ) {
│ -            for(final Map.Entry<String, Map<String, Object>> e : this.resources.entrySet()) {
│ -                if (e.getKey().startsWith(prefixPath)) {
│ -                    this.deletedResources.add(e.getKey());
│ -                }
│ -            }
│ -            final Iterator<Map.Entry<String, Map<String, Object>>> i = this.temporaryResources.entrySet().iterator();
│ -            while ( i.hasNext() ) {
│ -                final Map.Entry<String, Map<String, Object>> e = i.next();
│ -                if (e.getKey().startsWith(prefixPath) ) {
│ -                    i.remove();
│ -                }
│ -            }
│ -        }
│ -    }
│ -
│ -    @Override
│ -    public @NotNull Resource create(@NotNull Resource parent, @NotNull String name,
│ -            Map<String, Object> properties) throws PersistenceException {
│ -        final String path = (parent.getPath().equals("/") ? parent.getPath() + name : parent.getPath() + '/' + name);
│ -        if ( this.temporaryResources.containsKey(path) ) {
│ -            throw new PersistenceException("Path already exists: " + path);
│ -        }
│ -        synchronized ( this.resources ) {
│ -            if ( this.resources.containsKey(path) && !this.deletedResources.contains(path) ) {
│ -                throw new PersistenceException("Path already exists: " + path);
│ -            }
│ -        }
│ -        this.deletedResources.remove(path);
│ -        if ( properties == null ) {
│ -            properties = new HashMap<String, Object>();
│ -        }
│ -
│ -        Resource mockResource = newMockResource(path, properties, this);
│ -        this.temporaryResources.put(path, ResourceUtil.getValueMap(mockResource));
│ -        return mockResource;
│ -    }
│ -
│ -    @Override
│ -    public void revert() {
│ -        this.deletedResources.clear();
│ -        this.temporaryResources.clear();
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("deprecation")
│ -    public void commit() throws PersistenceException {
│ -        EventAdmin eventAdmin = this.options.getEventAdmin();
│ -        synchronized ( this.resources ) {
│ -            for(final String path : this.deletedResources ) {
│ -                if ( this.resources.remove(path) != null && eventAdmin != null ) {
│ -                    final Dictionary<String, Object> props = new Hashtable<String, Object>();
│ -                    props.put(SlingConstants.PROPERTY_PATH, path);
│ -                    final Event e = new Event(SlingConstants.TOPIC_RESOURCE_REMOVED, props);
│ -                    eventAdmin.sendEvent(e);
│ -                }
│ -                this.temporaryResources.remove(path);
│ -            }
│ -            for(final String path : this.temporaryResources.keySet() ) {
│ -                final boolean changed = this.resources.containsKey(path);
│ -                this.resources.put(path, this.temporaryResources.get(path));
│ -                if ( eventAdmin != null ) {
│ -                    final Dictionary<String, Object> props = new Hashtable<String, Object>();
│ -                    props.put(SlingConstants.PROPERTY_PATH, path);
│ -                    if ( this.resources.get(path).get(ResourceResolver.PROPERTY_RESOURCE_TYPE) != null ) {
│ -                        props.put(SlingConstants.PROPERTY_RESOURCE_TYPE, this.resources.get(path).get(ResourceResolver.PROPERTY_RESOURCE_TYPE));
│ -                    }
│ -                    final Event e = new Event(changed ? SlingConstants.TOPIC_RESOURCE_CHANGED : SlingConstants.TOPIC_RESOURCE_ADDED, props);
│ -                    eventAdmin.sendEvent(e);
│ -                }
│ -            }
│ -        }
│ -        this.revert();
│ -    }
│ -
│ -    @Override
│ -    public boolean hasChanges() {
│ -        return this.temporaryResources.size() > 0 || this.deletedResources.size() > 0;
│ -    }
│ -
│ -    @Override
│ -    public boolean isResourceType(Resource resource, String resourceType) {
│ -        boolean result = false;
│ -        if ( resource != null && resourceType != null ) {
│ -             // Check if the resource is of the given type. This method first checks the
│ -             // resource type of the resource, then its super resource type and continues
│ -             //  to go up the resource super type hierarchy.
│ -             if (ResourceTypeUtil.areResourceTypesEqual(resourceType, resource.getResourceType(), getSearchPath())) {
│ -                 result = true;
│ -             } else {
│ -                 Set<String> superTypesChecked = new HashSet<>();
│ -                 String superType = this.getParentResourceType(resource);
│ -                 while (!result && superType != null) {
│ -                     if (ResourceTypeUtil.areResourceTypesEqual(resourceType, superType, getSearchPath())) {
│ -                         result = true;
│ -                     } else {
│ -                         superTypesChecked.add(superType);
│ -                         superType = this.getParentResourceType(superType);
│ -                         if (superType != null && superTypesChecked.contains(superType)) {
│ -                             throw new SlingException("Cyclic dependency for resourceSuperType hierarchy detected on resource " + resource.getPath()) {
│ -                                // anonymous class to avoid problem with null cause
│ -                                private static final long serialVersionUID = 1L;
│ -                             };
│ -                         }
│ -                     }
│ -                 }
│ -             }
│ -
│ -        }
│ -        return result;
│ -    }
│ -
│ -    @Override
│ -    public void refresh() {
│ -        // nothing to do
│ -    }
│ -
│ -    public void addChanged(final String path, final Map<String, Object> props) {
│ -        this.temporaryResources.put(path, props);
│ -    }
│ -
│ -    @Override
│ -    public String getParentResourceType(Resource resource) {
│ -        String resourceSuperType = null;
│ -        if ( resource != null ) {
│ -            resourceSuperType = resource.getResourceSuperType();
│ -            if (resourceSuperType == null) {
│ -                resourceSuperType = this.getParentResourceType(resource.getResourceType());
│ -            }
│ -        }
│ -        return resourceSuperType;
│ -    }
│ -
│ -    @Override
│ -    public String getParentResourceType(String resourceType) {
│ -        // normalize resource type to a path string
│ -        final String rtPath = (resourceType == null ? null : ResourceUtil.resourceTypeToPath(resourceType));
│ -        // get the resource type resource and check its super type
│ -        String resourceSuperType = null;
│ -        if ( rtPath != null ) {
│ -            final Resource rtResource = getResource(rtPath);
│ -            if (rtResource != null) {
│ -                resourceSuperType = rtResource.getResourceSuperType();
│ -            }
│ -        }
│ -        return resourceSuperType;
│ -    }
│ -
│ -    @Override
│ -    public boolean hasChildren(@NotNull Resource resource) {
│ -        return this.listChildren(resource).hasNext();
│ -    }
│ -
│ -    @Override
│ -    public Resource getParent(@NotNull Resource child) {
│ -        final String parentPath = ResourceUtil.getParent(child.getPath());
│ -        if (parentPath == null) {
│ -            return null;
│ -        }
│ -        return this.getResource(parentPath);
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("null")
│ -    public @NotNull Iterator<Resource> findResources(final @NotNull String query, final String language) {
│ -        return findResourcesHandlers.stream()
│ -            .map(handler -> handler.findResources(query, language))
│ -            .filter(Objects::nonNull)
│ -            .findFirst()
│ -            .orElse(Collections.emptyIterator());
│ -    }
│ -
│ -    /**
│ -     * Adds a handler that can provide a mocked find resources result. You can add multiple handlers which are called
│ -     * in the order they were added when calling {@link #findResources(String, String)}.
│ -     * The result of the first handler that returns a non-null result is used.
│ -     * If no handler delivers a result, an empty result is returned.
│ -     * @param handler Handler
│ -     */
│ -    public void addFindResourceHandler(@NotNull MockFindResourcesHandler handler) {
│ -        findResourcesHandlers.add(handler);
│ -    }
│ -
│ -    @Override
│ -    @SuppressWarnings("null")
│ -    public @NotNull Iterator<Map<String, Object>> queryResources(@NotNull String query, String language) {
│ -        return queryResourcesHandlers.stream()
│ -                .map(handler -> handler.queryResources(query, language))
│ -                .filter(Objects::nonNull)
│ -                .findFirst()
│ -                .orElse(Collections.emptyIterator());
│ -    }
│ -
│ -    /**
│ -     * Adds a handler that can provide a mocked query resources result. You can add multiple handlers which are called
│ -     * in the order they were added when calling {@link #queryResources(String, String)}.
│ -     * The result of the first handler that returns a non-null result is used.
│ -     * If no handler delivers a result, an empty result is returned.
│ -     * @param handler Handler
│ -     */
│ -    public void addQueryResourceHandler(@NotNull MockQueryResourceHandler handler) {
│ -        queryResourcesHandlers.add(handler);
│ -    }
│ -
│ -    // Sling API 2.24.0
│ -    public @NotNull Map<String, Object> getPropertyMap() {
│ -        if (propertyMap == null) {
│ -            propertyMap = new HashMap<>();
│ -        }
│ -        return propertyMap;
│ -    }
│ -
│ -    // --- unsupported operations ---
│ -
│ -    @Override
│ -    @Deprecated
│ -    public @NotNull Resource resolve(final @NotNull HttpServletRequest request) {
│ -        throw new UnsupportedOperationException();
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceResolver clone(Map<String, Object> authenticationInfo) throws LoginException {
│ -        throw new UnsupportedOperationException();
│ -    }
│ -
│ -    @Override
│ -    public Resource copy(String srcAbsPath, String destAbsPath) throws PersistenceException {
│ -        throw new UnsupportedOperationException();
│ -    }
│ -
│ -    @Override
│ -    public Resource move(String srcAbsPath, String destAbsPath) throws PersistenceException {
│ -        throw new UnsupportedOperationException();
│ -    }
│ -
│ -    // Sling API 2.24.0
│ -    public boolean orderBefore(@NotNull Resource parent, @NotNull String name,
│ -            @Nullable String followingSiblingName) throws UnsupportedOperationException, PersistenceException, IllegalArgumentException {
│ -        throw new UnsupportedOperationException();
│ -    }
│ -
│ -
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.io.Closeable;
│ +import java.util.ArrayList;
│ +import java.util.Collections;
│ +import java.util.Dictionary;
│ +import java.util.HashMap;
│ +import java.util.HashSet;
│ +import java.util.Hashtable;
│ +import java.util.Iterator;
│ +import java.util.LinkedHashMap;
│ +import java.util.List;
│ +import java.util.Map;
│ +import java.util.Map.Entry;
│ +import java.util.Objects;
│ +import java.util.Set;
│ +import java.util.regex.Pattern;
│ +
│ +import javax.servlet.http.HttpServletRequest;
│ +
│ +import org.apache.sling.api.SlingConstants;
│ +import org.apache.sling.api.SlingException;
│ +import org.apache.sling.api.adapter.SlingAdaptable;
│ +import org.apache.sling.api.resource.LoginException;
│ +import org.apache.sling.api.resource.NonExistingResource;
│ +import org.apache.sling.api.resource.PersistenceException;
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ResourceUtil;
│ +import org.apache.sling.api.resource.ValueMap;
│ +import org.jetbrains.annotations.NotNull;
│ +import org.jetbrains.annotations.Nullable;
│ +import org.osgi.service.event.Event;
│ +import org.osgi.service.event.EventAdmin;
│ +
│ +public class MockResourceResolver extends SlingAdaptable implements ResourceResolver {
│ +
│ +    private final Map<String, Map<String, Object>> resources;
│ +
│ +    private final Map<String, Map<String, Object>> temporaryResources = new LinkedHashMap<String, Map<String,Object>>();
│ +
│ +    private final Set<String> deletedResources = new HashSet<String>();
│ +
│ +    private final MockResourceResolverFactoryOptions options;
│ +
│ +    private final MockResourceResolverFactory factory;
│ +
│ +    private final Map<String,Object> attributes;
│ +
│ +    private Map<String,Object> propertyMap;
│ +
│ +    private final List<MockFindResourcesHandler> findResourcesHandlers = new ArrayList<>();
│ +    private final List<MockQueryResourceHandler> queryResourcesHandlers = new ArrayList<>();
│ +
│ +    public MockResourceResolver(final MockResourceResolverFactoryOptions options,
│ +            final MockResourceResolverFactory factory,
│ +            final Map<String, Map<String, Object>> resources) {
│ +        this(options, factory, resources, Collections.<String,Object>emptyMap());
│ +    }
│ +
│ +    public MockResourceResolver(final MockResourceResolverFactoryOptions options,
│ +            final MockResourceResolverFactory factory,
│ +            final Map<String, Map<String, Object>> resources,
│ +            final Map<String,Object> attributes) {
│ +        this.factory = factory;
│ +        this.options = options;
│ +        this.resources = resources;
│ +        this.attributes = attributes;
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("unused")
│ +    public @NotNull Resource resolve(final @NotNull HttpServletRequest request, final @NotNull String absPath) {
│ +        String path = absPath;
│ +        if (path == null) {
│ +            path = "/";
│ +        }
│ +
│ +        // split off query string or fragment that may be appendend to the URL
│ +        String urlRemainder = null;
│ +        int urlRemainderPos = Math.min(path.indexOf('?'), path.indexOf('#'));
│ +        if (urlRemainderPos >= 0) {
│ +          urlRemainder = path.substring(urlRemainderPos);
│ +          path = path.substring(0, urlRemainderPos);
│ +        }
│ +
│ +        // unmangle namespaces
│ +        if (options.isMangleNamespacePrefixes()) {
│ +            path = NamespaceMangler.unmangleNamespaces(path);
│ +        }
│ +
│ +        // build full path again
│ +        path = path + (urlRemainder != null ? urlRemainder : "");
│ +
│ +        Resource resource = this.getResource(path);
│ +        if (resource == null) {
│ +            resource = new NonExistingResource(this, absPath);
│ +        }
│ +        return resource;
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("null")
│ +    public @NotNull Resource resolve(final @NotNull String absPath) {
│ +        return resolve(null, absPath);
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("null")
│ +    public @NotNull String map(final @NotNull String resourcePath) {
│ +        return map(null, resourcePath);
│ +    }
│ +
│ +    @Override
│ +    public String map(final @NotNull HttpServletRequest request, final @NotNull String resourcePath) {
│ +        String path = resourcePath;
│ +
│ +        // split off query string or fragment that may be appendend to the URL
│ +        String urlRemainder = null;
│ +        int urlRemainderPos = Math.min(path.indexOf('?'), path.indexOf('#'));
│ +        if (urlRemainderPos >= 0) {
│ +          urlRemainder = path.substring(urlRemainderPos);
│ +          path = path.substring(0, urlRemainderPos);
│ +        }
│ +
│ +        // mangle namespaces
│ +        if (options.isMangleNamespacePrefixes()) {
│ +            path = NamespaceMangler.mangleNamespaces(path);
│ +        }
│ +
│ +        // build full path again
│ +        return path + (urlRemainder != null ? urlRemainder : "");
│ +    }
│ +
│ +    @Override
│ +    public Resource getResource(final @NotNull String path) {
│ +        Resource resource = getResourceInternal(path);
│ +
│ +        // if not resource found check if this is a reference to a property
│ +        if (resource == null && path != null) {
│ +            String parentPath = ResourceUtil.getParent(path);
│ +            if (parentPath != null) {
│ +                String name = ResourceUtil.getName(path);
│ +                Resource parentResource = getResourceInternal(parentPath);
│ +                if (parentResource!=null) {
│ +                    ValueMap props = ResourceUtil.getValueMap(parentResource);
│ +                    if (props.containsKey(name)) {
│ +                        return new MockPropertyResource(path, props, this);
│ +                    }
│ +                }
│ +            }
│ +        }
│ +
│ +        return resource;
│ +    }
│ +
│ +    private Resource getResourceInternal(final String path) {
│ +        if (path == null) {
│ +            return null;
│ +        }
│ +
│ +        String normalizedPath = ResourceUtil.normalize(path);
│ +        if (normalizedPath == null) {
│ +            return null;
│ +        } else if ( normalizedPath.startsWith("/") ) {
│ +            if ( this.deletedResources.contains(normalizedPath) ) {
│ +                return null;
│ +            }
│ +            final Map<String, Object> tempProps = this.temporaryResources.get(normalizedPath);
│ +            if ( tempProps != null ) {
│ +                return newMockResource(normalizedPath, tempProps, this);
│ +            }
│ +            synchronized ( this.resources ) {
│ +                final Map<String, Object> props = this.resources.get(normalizedPath);
│ +                if ( props != null ) {
│ +                    return newMockResource(normalizedPath, props, this);
│ +                }
│ +            }
│ +        } else {
│ +            for(final String s : this.getSearchPath() ) {
│ +                final Resource rsrc = this.getResource(s + '/' + normalizedPath);
│ +                if ( rsrc != null ) {
│ +                    return rsrc;
│ +                }
│ +            }
│ +        }
│ +        return null;
│ +    }
│ +
│ +    @Override
│ +    public Resource getResource(Resource base, @NotNull String path) {
│ +        if ( path == null || path.length() == 0 ) {
│ +            path = "/";
│ +        }
│ +        if ( path.startsWith("/") ) {
│ +            return getResource(path);
│ +        }
│ +        if ( base.getPath().equals("/") ) {
│ +            return getResource(base.getPath() + path);
│ +        }
│ +        return getResource(base.getPath() + '/' + path);
│ +    }
│ +
│ +    @Override
│ +    public @NotNull String[] getSearchPath() {
│ +        return this.options.getSearchPaths();
│ +    }
│ +
│ +    @Override
│ +    public @NotNull Iterator<Resource> listChildren(final @NotNull Resource parent) {
│ +        final String pathPrefix = "/".equals(parent.getPath()) ? "" : parent.getPath();
│ +        final Pattern childPathMatcher = Pattern.compile("^" + Pattern.quote(pathPrefix) + "/[^/]+$");
│ +        final Map<String, Map<String, Object>> candidates = new LinkedHashMap<String, Map<String,Object>>();
│ +        synchronized ( this.resources ) {
│ +            for(final Map.Entry<String, Map<String, Object>> e : this.resources.entrySet()) {
│ +                if (childPathMatcher.matcher(e.getKey()).matches()) {
│ +                    if ( !this.deletedResources.contains(e.getKey()) ) {
│ +                        candidates.put(e.getKey(), e.getValue());
│ +                    }
│ +                }
│ +            }
│ +            for(final Map.Entry<String, Map<String, Object>> e : this.temporaryResources.entrySet()) {
│ +                if (childPathMatcher.matcher(e.getKey()).matches()) {
│ +                    if ( !this.deletedResources.contains(e.getKey()) ) {
│ +                        candidates.put(e.getKey(), e.getValue());
│ +                    }
│ +                }
│ +            }
│ +        }
│ +        final List<Resource> children = new ArrayList<Resource>();
│ +        for(final Map.Entry<String, Map<String, Object>> e : candidates.entrySet()) {
│ +            children.add(newMockResource(e.getKey(), e.getValue(), this));
│ +        }
│ +        return children.iterator();
│ +    }
│ +
│ +    private Resource newMockResource(final String path,
│ +            final Map<String, Object> properties,
│ +            final ResourceResolver resolver) {
│ +        return this.options.getMockResourceFactory()
│ +                    .newMockResource(path, properties, resolver);
│ +    }
│ +
│ +    @Override
│ +    public @NotNull Iterable<Resource> getChildren(final @NotNull Resource parent) {
│ +        return new Iterable<Resource>() {
│ +            @Override
│ +            public Iterator<Resource> iterator() {
│ +                return listChildren(parent);
│ +            }
│ +        };
│ +    }
│ +
│ +    @Override
│ +    public boolean isLive() {
│ +        return true;
│ +    }
│ +
│ +    @Override
│ +    public void close() {
│ +        clearPropertyMap();
│ +        this.factory.closed(this);
│ +    }
│ +
│ +    private void clearPropertyMap(){
│ +        if (propertyMap != null) {
│ +            for (Entry<String, Object> entry : propertyMap.entrySet()) {
│ +                if (entry.getValue()  instanceof Closeable) {
│ +                    try {
│ +                        ((Closeable) entry.getValue()).close();
│ +                    } catch (Exception e) {
│ +                        // ignore
│ +                    }
│ +                }
│ +            }
│ +            propertyMap.clear();
│ +        }
│ +    }
│ +
│ +    @Override
│ +    public String getUserID() {
│ +        return null;
│ +    }
│ +
│ +    @Override
│ +    public @NotNull Iterator<String> getAttributeNames() {
│ +        return attributes.keySet().iterator();
│ +    }
│ +
│ +    @Override
│ +    public Object getAttribute(final @NotNull String name) {
│ +        return attributes.get(name);
│ +    }
│ +
│ +    @Override
│ +    public void delete(final @NotNull Resource resource) throws PersistenceException {
│ +        this.deletedResources.add(resource.getPath());
│ +        this.temporaryResources.remove(resource.getPath());
│ +        final String prefixPath = resource.getPath() + '/';
│ +        synchronized ( this.resources ) {
│ +            for(final Map.Entry<String, Map<String, Object>> e : this.resources.entrySet()) {
│ +                if (e.getKey().startsWith(prefixPath)) {
│ +                    this.deletedResources.add(e.getKey());
│ +                }
│ +            }
│ +            final Iterator<Map.Entry<String, Map<String, Object>>> i = this.temporaryResources.entrySet().iterator();
│ +            while ( i.hasNext() ) {
│ +                final Map.Entry<String, Map<String, Object>> e = i.next();
│ +                if (e.getKey().startsWith(prefixPath) ) {
│ +                    i.remove();
│ +                }
│ +            }
│ +        }
│ +    }
│ +
│ +    @Override
│ +    public @NotNull Resource create(@NotNull Resource parent, @NotNull String name,
│ +            Map<String, Object> properties) throws PersistenceException {
│ +        final String path = (parent.getPath().equals("/") ? parent.getPath() + name : parent.getPath() + '/' + name);
│ +        if ( this.temporaryResources.containsKey(path) ) {
│ +            throw new PersistenceException("Path already exists: " + path);
│ +        }
│ +        synchronized ( this.resources ) {
│ +            if ( this.resources.containsKey(path) && !this.deletedResources.contains(path) ) {
│ +                throw new PersistenceException("Path already exists: " + path);
│ +            }
│ +        }
│ +        this.deletedResources.remove(path);
│ +        if ( properties == null ) {
│ +            properties = new HashMap<String, Object>();
│ +        }
│ +
│ +        Resource mockResource = newMockResource(path, properties, this);
│ +        this.temporaryResources.put(path, ResourceUtil.getValueMap(mockResource));
│ +        return mockResource;
│ +    }
│ +
│ +    @Override
│ +    public void revert() {
│ +        this.deletedResources.clear();
│ +        this.temporaryResources.clear();
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("deprecation")
│ +    public void commit() throws PersistenceException {
│ +        EventAdmin eventAdmin = this.options.getEventAdmin();
│ +        synchronized ( this.resources ) {
│ +            for(final String path : this.deletedResources ) {
│ +                if ( this.resources.remove(path) != null && eventAdmin != null ) {
│ +                    final Dictionary<String, Object> props = new Hashtable<String, Object>();
│ +                    props.put(SlingConstants.PROPERTY_PATH, path);
│ +                    final Event e = new Event(SlingConstants.TOPIC_RESOURCE_REMOVED, props);
│ +                    eventAdmin.sendEvent(e);
│ +                }
│ +                this.temporaryResources.remove(path);
│ +            }
│ +            for(final String path : this.temporaryResources.keySet() ) {
│ +                final boolean changed = this.resources.containsKey(path);
│ +                this.resources.put(path, this.temporaryResources.get(path));
│ +                if ( eventAdmin != null ) {
│ +                    final Dictionary<String, Object> props = new Hashtable<String, Object>();
│ +                    props.put(SlingConstants.PROPERTY_PATH, path);
│ +                    if ( this.resources.get(path).get(ResourceResolver.PROPERTY_RESOURCE_TYPE) != null ) {
│ +                        props.put(SlingConstants.PROPERTY_RESOURCE_TYPE, this.resources.get(path).get(ResourceResolver.PROPERTY_RESOURCE_TYPE));
│ +                    }
│ +                    final Event e = new Event(changed ? SlingConstants.TOPIC_RESOURCE_CHANGED : SlingConstants.TOPIC_RESOURCE_ADDED, props);
│ +                    eventAdmin.sendEvent(e);
│ +                }
│ +            }
│ +        }
│ +        this.revert();
│ +    }
│ +
│ +    @Override
│ +    public boolean hasChanges() {
│ +        return this.temporaryResources.size() > 0 || this.deletedResources.size() > 0;
│ +    }
│ +
│ +    @Override
│ +    public boolean isResourceType(Resource resource, String resourceType) {
│ +        boolean result = false;
│ +        if ( resource != null && resourceType != null ) {
│ +             // Check if the resource is of the given type. This method first checks the
│ +             // resource type of the resource, then its super resource type and continues
│ +             //  to go up the resource super type hierarchy.
│ +             if (ResourceTypeUtil.areResourceTypesEqual(resourceType, resource.getResourceType(), getSearchPath())) {
│ +                 result = true;
│ +             } else {
│ +                 Set<String> superTypesChecked = new HashSet<>();
│ +                 String superType = this.getParentResourceType(resource);
│ +                 while (!result && superType != null) {
│ +                     if (ResourceTypeUtil.areResourceTypesEqual(resourceType, superType, getSearchPath())) {
│ +                         result = true;
│ +                     } else {
│ +                         superTypesChecked.add(superType);
│ +                         superType = this.getParentResourceType(superType);
│ +                         if (superType != null && superTypesChecked.contains(superType)) {
│ +                             throw new SlingException("Cyclic dependency for resourceSuperType hierarchy detected on resource " + resource.getPath()) {
│ +                                // anonymous class to avoid problem with null cause
│ +                                private static final long serialVersionUID = 1L;
│ +                             };
│ +                         }
│ +                     }
│ +                 }
│ +             }
│ +
│ +        }
│ +        return result;
│ +    }
│ +
│ +    @Override
│ +    public void refresh() {
│ +        // nothing to do
│ +    }
│ +
│ +    public void addChanged(final String path, final Map<String, Object> props) {
│ +        this.temporaryResources.put(path, props);
│ +    }
│ +
│ +    @Override
│ +    public String getParentResourceType(Resource resource) {
│ +        String resourceSuperType = null;
│ +        if ( resource != null ) {
│ +            resourceSuperType = resource.getResourceSuperType();
│ +            if (resourceSuperType == null) {
│ +                resourceSuperType = this.getParentResourceType(resource.getResourceType());
│ +            }
│ +        }
│ +        return resourceSuperType;
│ +    }
│ +
│ +    @Override
│ +    public String getParentResourceType(String resourceType) {
│ +        // normalize resource type to a path string
│ +        final String rtPath = (resourceType == null ? null : ResourceUtil.resourceTypeToPath(resourceType));
│ +        // get the resource type resource and check its super type
│ +        String resourceSuperType = null;
│ +        if ( rtPath != null ) {
│ +            final Resource rtResource = getResource(rtPath);
│ +            if (rtResource != null) {
│ +                resourceSuperType = rtResource.getResourceSuperType();
│ +            }
│ +        }
│ +        return resourceSuperType;
│ +    }
│ +
│ +    @Override
│ +    public boolean hasChildren(@NotNull Resource resource) {
│ +        return this.listChildren(resource).hasNext();
│ +    }
│ +
│ +    @Override
│ +    public Resource getParent(@NotNull Resource child) {
│ +        final String parentPath = ResourceUtil.getParent(child.getPath());
│ +        if (parentPath == null) {
│ +            return null;
│ +        }
│ +        return this.getResource(parentPath);
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("null")
│ +    public @NotNull Iterator<Resource> findResources(final @NotNull String query, final String language) {
│ +        return findResourcesHandlers.stream()
│ +            .map(handler -> handler.findResources(query, language))
│ +            .filter(Objects::nonNull)
│ +            .findFirst()
│ +            .orElse(Collections.emptyIterator());
│ +    }
│ +
│ +    /**
│ +     * Adds a handler that can provide a mocked find resources result. You can add multiple handlers which are called
│ +     * in the order they were added when calling {@link #findResources(String, String)}.
│ +     * The result of the first handler that returns a non-null result is used.
│ +     * If no handler delivers a result, an empty result is returned.
│ +     * @param handler Handler
│ +     */
│ +    public void addFindResourceHandler(@NotNull MockFindResourcesHandler handler) {
│ +        findResourcesHandlers.add(handler);
│ +    }
│ +
│ +    @Override
│ +    @SuppressWarnings("null")
│ +    public @NotNull Iterator<Map<String, Object>> queryResources(@NotNull String query, String language) {
│ +        return queryResourcesHandlers.stream()
│ +                .map(handler -> handler.queryResources(query, language))
│ +                .filter(Objects::nonNull)
│ +                .findFirst()
│ +                .orElse(Collections.emptyIterator());
│ +    }
│ +
│ +    /**
│ +     * Adds a handler that can provide a mocked query resources result. You can add multiple handlers which are called
│ +     * in the order they were added when calling {@link #queryResources(String, String)}.
│ +     * The result of the first handler that returns a non-null result is used.
│ +     * If no handler delivers a result, an empty result is returned.
│ +     * @param handler Handler
│ +     */
│ +    public void addQueryResourceHandler(@NotNull MockQueryResourceHandler handler) {
│ +        queryResourcesHandlers.add(handler);
│ +    }
│ +
│ +    // Sling API 2.24.0
│ +    public @NotNull Map<String, Object> getPropertyMap() {
│ +        if (propertyMap == null) {
│ +            propertyMap = new HashMap<>();
│ +        }
│ +        return propertyMap;
│ +    }
│ +
│ +    // --- unsupported operations ---
│ +
│ +    @Override
│ +    @Deprecated
│ +    public @NotNull Resource resolve(final @NotNull HttpServletRequest request) {
│ +        throw new UnsupportedOperationException();
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceResolver clone(Map<String, Object> authenticationInfo) throws LoginException {
│ +        throw new UnsupportedOperationException();
│ +    }
│ +
│ +    @Override
│ +    public Resource copy(String srcAbsPath, String destAbsPath) throws PersistenceException {
│ +        throw new UnsupportedOperationException();
│ +    }
│ +
│ +    @Override
│ +    public Resource move(String srcAbsPath, String destAbsPath) throws PersistenceException {
│ +        throw new UnsupportedOperationException();
│ +    }
│ +
│ +    // Sling API 2.24.0
│ +    public boolean orderBefore(@NotNull Resource parent, @NotNull String name,
│ +            @Nullable String followingSiblingName) throws UnsupportedOperationException, PersistenceException, IllegalArgumentException {
│ +        throw new UnsupportedOperationException();
│ +    }
│ +
│ +
│ +
│ +}
├── org/apache/sling/testing/resourceresolver/MockResourceResolverFactory.java
│ @@ -1,137 +1,137 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.Arrays;
│ -import java.util.HashMap;
│ -import java.util.LinkedHashMap;
│ -import java.util.List;
│ -import java.util.Map;
│ -import java.util.Stack;
│ -
│ -import org.apache.sling.api.resource.LoginException;
│ -import org.apache.sling.api.resource.ResourceResolver;
│ -import org.apache.sling.api.resource.ResourceResolverFactory;
│ -import org.jetbrains.annotations.NotNull;
│ -import org.jetbrains.annotations.Nullable;
│ -import org.osgi.service.event.EventAdmin;
│ -
│ -/**
│ - * Simple resource resolver factory
│ - */
│ -public class MockResourceResolverFactory implements ResourceResolverFactory {
│ -
│ -    private static final String ROOT_PRIMARY_TYPE="rep:root";
│ -
│ -    /** We use a linked hash map to preserve creation order. */
│ -    private final Map<String, Map<String, Object>> resources = new LinkedHashMap<String, Map<String, Object>>();
│ -
│ -    private final MockResourceResolverFactoryOptions options;
│ -
│ -    /**
│ -     * Create a new resource resolver factory
│ -     * @param eventAdmin All resource events are sent to this event admin
│ -     */
│ -    public MockResourceResolverFactory(@Nullable final EventAdmin eventAdmin) {
│ -        this(new MockResourceResolverFactoryOptions().setEventAdmin(eventAdmin));
│ -    }
│ -
│ -    /**
│ -     * Create a new resource resolver factory.
│ -     */
│ -    public MockResourceResolverFactory() {
│ -        this(new MockResourceResolverFactoryOptions());
│ -    }
│ -
│ -    /**
│ -     * Create a new resource resolver factory.
│ -     * @param options Options
│ -     */
│ -    public MockResourceResolverFactory(@NotNull final MockResourceResolverFactoryOptions options) {
│ -        this.options = options;
│ -        Map<String, Object> props= new HashMap<String,Object>();
│ -        props.put(MockResource.JCR_PRIMARYTYPE, ROOT_PRIMARY_TYPE);
│ -        resources.put("/", props);
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceResolver getResourceResolver(
│ -            final Map<String, Object> authenticationInfo) throws LoginException {
│ -
│ -        // put user name in resolver attributes
│ -        Map<String,Object> attributes = new HashMap<String, Object>();
│ -        if (authenticationInfo!=null) {
│ -            attributes.put(ResourceResolverFactory.USER, authenticationInfo.get(ResourceResolverFactory.USER));
│ -        }
│ -
│ -        final ResourceResolver result = new MockResourceResolver(options, this, resources, attributes);
│ -        Stack<ResourceResolver> resolverStack = resolverStackHolder.get();
│ -        if ( resolverStack == null ) {
│ -            resolverStack = new Stack<ResourceResolver>();
│ -            resolverStackHolder.set(resolverStack);
│ -        }
│ -        resolverStack.push(result);
│ -        return result;
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceResolver getAdministrativeResourceResolver(
│ -            final Map<String, Object> authenticationInfo) throws LoginException {
│ -        return new MockResourceResolver(options, this, resources);
│ -    }
│ -
│ -    @Override
│ -    public @NotNull ResourceResolver getServiceResourceResolver(
│ -            Map<String, Object> authenticationInfo) throws LoginException {
│ -        return new MockResourceResolver(options, this, resources);
│ -    }
│ -
│ -    /**
│ -     * Thread local holding the resource resolver stack
│ -     */
│ -    private ThreadLocal<Stack<ResourceResolver>> resolverStackHolder = new ThreadLocal<Stack<ResourceResolver>>();
│ -
│ -    @Override
│ -    public ResourceResolver getThreadResourceResolver() {
│ -        ResourceResolver result = null;
│ -        final Stack<ResourceResolver> resolverStack = resolverStackHolder.get();
│ -        if ( resolverStack != null && !resolverStack.isEmpty() ) {
│ -            result = resolverStack.peek();
│ -        }
│ -        return result;
│ -    }
│ -
│ -    /**
│ -     * Inform about a closed resource resolver.
│ -     * Make sure to remove it from the current thread context.
│ -     * @param resolver Resource resolver
│ -     */
│ -    public void closed(@NotNull final ResourceResolver resolver) {
│ -        final Stack<ResourceResolver> resolverStack = resolverStackHolder.get();
│ -        if ( resolverStack != null ) {
│ -            resolverStack.remove(resolver);
│ -        }
│ -    }
│ -
│ -    // Sling API 2.24.0
│ -    public @NotNull List<String> getSearchPath() {
│ -        return Arrays.asList(this.options.getSearchPaths());
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.Arrays;
│ +import java.util.HashMap;
│ +import java.util.LinkedHashMap;
│ +import java.util.List;
│ +import java.util.Map;
│ +import java.util.Stack;
│ +
│ +import org.apache.sling.api.resource.LoginException;
│ +import org.apache.sling.api.resource.ResourceResolver;
│ +import org.apache.sling.api.resource.ResourceResolverFactory;
│ +import org.jetbrains.annotations.NotNull;
│ +import org.jetbrains.annotations.Nullable;
│ +import org.osgi.service.event.EventAdmin;
│ +
│ +/**
│ + * Simple resource resolver factory
│ + */
│ +public class MockResourceResolverFactory implements ResourceResolverFactory {
│ +
│ +    private static final String ROOT_PRIMARY_TYPE="rep:root";
│ +
│ +    /** We use a linked hash map to preserve creation order. */
│ +    private final Map<String, Map<String, Object>> resources = new LinkedHashMap<String, Map<String, Object>>();
│ +
│ +    private final MockResourceResolverFactoryOptions options;
│ +
│ +    /**
│ +     * Create a new resource resolver factory
│ +     * @param eventAdmin All resource events are sent to this event admin
│ +     */
│ +    public MockResourceResolverFactory(@Nullable final EventAdmin eventAdmin) {
│ +        this(new MockResourceResolverFactoryOptions().setEventAdmin(eventAdmin));
│ +    }
│ +
│ +    /**
│ +     * Create a new resource resolver factory.
│ +     */
│ +    public MockResourceResolverFactory() {
│ +        this(new MockResourceResolverFactoryOptions());
│ +    }
│ +
│ +    /**
│ +     * Create a new resource resolver factory.
│ +     * @param options Options
│ +     */
│ +    public MockResourceResolverFactory(@NotNull final MockResourceResolverFactoryOptions options) {
│ +        this.options = options;
│ +        Map<String, Object> props= new HashMap<String,Object>();
│ +        props.put(MockResource.JCR_PRIMARYTYPE, ROOT_PRIMARY_TYPE);
│ +        resources.put("/", props);
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceResolver getResourceResolver(
│ +            final Map<String, Object> authenticationInfo) throws LoginException {
│ +
│ +        // put user name in resolver attributes
│ +        Map<String,Object> attributes = new HashMap<String, Object>();
│ +        if (authenticationInfo!=null) {
│ +            attributes.put(ResourceResolverFactory.USER, authenticationInfo.get(ResourceResolverFactory.USER));
│ +        }
│ +
│ +        final ResourceResolver result = new MockResourceResolver(options, this, resources, attributes);
│ +        Stack<ResourceResolver> resolverStack = resolverStackHolder.get();
│ +        if ( resolverStack == null ) {
│ +            resolverStack = new Stack<ResourceResolver>();
│ +            resolverStackHolder.set(resolverStack);
│ +        }
│ +        resolverStack.push(result);
│ +        return result;
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceResolver getAdministrativeResourceResolver(
│ +            final Map<String, Object> authenticationInfo) throws LoginException {
│ +        return new MockResourceResolver(options, this, resources);
│ +    }
│ +
│ +    @Override
│ +    public @NotNull ResourceResolver getServiceResourceResolver(
│ +            Map<String, Object> authenticationInfo) throws LoginException {
│ +        return new MockResourceResolver(options, this, resources);
│ +    }
│ +
│ +    /**
│ +     * Thread local holding the resource resolver stack
│ +     */
│ +    private ThreadLocal<Stack<ResourceResolver>> resolverStackHolder = new ThreadLocal<Stack<ResourceResolver>>();
│ +
│ +    @Override
│ +    public ResourceResolver getThreadResourceResolver() {
│ +        ResourceResolver result = null;
│ +        final Stack<ResourceResolver> resolverStack = resolverStackHolder.get();
│ +        if ( resolverStack != null && !resolverStack.isEmpty() ) {
│ +            result = resolverStack.peek();
│ +        }
│ +        return result;
│ +    }
│ +
│ +    /**
│ +     * Inform about a closed resource resolver.
│ +     * Make sure to remove it from the current thread context.
│ +     * @param resolver Resource resolver
│ +     */
│ +    public void closed(@NotNull final ResourceResolver resolver) {
│ +        final Stack<ResourceResolver> resolverStack = resolverStackHolder.get();
│ +        if ( resolverStack != null ) {
│ +            resolverStack.remove(resolver);
│ +        }
│ +    }
│ +
│ +    // Sling API 2.24.0
│ +    public @NotNull List<String> getSearchPath() {
│ +        return Arrays.asList(this.options.getSearchPaths());
│ +    }
│ +
│ +}
├── org/apache/sling/testing/resourceresolver/MockResourceResolverFactoryOptions.java
│ @@ -1,80 +1,80 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import org.jetbrains.annotations.NotNull;
│ -import org.jetbrains.annotations.Nullable;
│ -import org.osgi.service.event.EventAdmin;
│ -
│ -/**
│ - * Options for the factory
│ - */
│ -public class MockResourceResolverFactoryOptions {
│ -
│ -    private MockResourceFactory mockResourceFactory;
│ -
│ -    private EventAdmin eventAdmin;
│ -
│ -    private String[] searchPaths = new String[] {"/apps/", "/libs/"};
│ -
│ -    private boolean mangleNamespacePrefixes;
│ -
│ -    public @Nullable EventAdmin getEventAdmin() {
│ -        return eventAdmin;
│ -    }
│ -
│ -    public @NotNull MockResourceResolverFactoryOptions setEventAdmin(@Nullable EventAdmin eventAdmin) {
│ -        this.eventAdmin = eventAdmin;
│ -        return this;
│ -    }
│ -
│ -    public String @NotNull [] getSearchPaths() {
│ -        return searchPaths;
│ -    }
│ -
│ -    public @NotNull MockResourceResolverFactoryOptions setSearchPaths(@NotNull String @Nullable [] searchPaths) {
│ -        if ( searchPaths == null ) {
│ -            searchPaths = new String[] {};
│ -        }
│ -        this.searchPaths = searchPaths;
│ -        return this;
│ -    }
│ -
│ -    public boolean isMangleNamespacePrefixes() {
│ -        return mangleNamespacePrefixes;
│ -    }
│ -
│ -    public @NotNull MockResourceResolverFactoryOptions setMangleNamespacePrefixes(boolean mangleNamespacePrefixes) {
│ -        this.mangleNamespacePrefixes = mangleNamespacePrefixes;
│ -        return this;
│ -    }
│ -
│ -    public @NotNull MockResourceFactory getMockResourceFactory() {
│ -        if (mockResourceFactory == null) {
│ -            mockResourceFactory = new DefaultMockResourceFactory();
│ -        }
│ -        return mockResourceFactory;
│ -    }
│ -    
│ -    public @NotNull MockResourceResolverFactoryOptions setMockResourceFactory(MockResourceFactory factory) {
│ -        this.mockResourceFactory = factory;
│ -        return this;
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import org.jetbrains.annotations.NotNull;
│ +import org.jetbrains.annotations.Nullable;
│ +import org.osgi.service.event.EventAdmin;
│ +
│ +/**
│ + * Options for the factory
│ + */
│ +public class MockResourceResolverFactoryOptions {
│ +
│ +    private MockResourceFactory mockResourceFactory;
│ +
│ +    private EventAdmin eventAdmin;
│ +
│ +    private String[] searchPaths = new String[] {"/apps/", "/libs/"};
│ +
│ +    private boolean mangleNamespacePrefixes;
│ +
│ +    public @Nullable EventAdmin getEventAdmin() {
│ +        return eventAdmin;
│ +    }
│ +
│ +    public @NotNull MockResourceResolverFactoryOptions setEventAdmin(@Nullable EventAdmin eventAdmin) {
│ +        this.eventAdmin = eventAdmin;
│ +        return this;
│ +    }
│ +
│ +    public String @NotNull [] getSearchPaths() {
│ +        return searchPaths;
│ +    }
│ +
│ +    public @NotNull MockResourceResolverFactoryOptions setSearchPaths(@NotNull String @Nullable [] searchPaths) {
│ +        if ( searchPaths == null ) {
│ +            searchPaths = new String[] {};
│ +        }
│ +        this.searchPaths = searchPaths;
│ +        return this;
│ +    }
│ +
│ +    public boolean isMangleNamespacePrefixes() {
│ +        return mangleNamespacePrefixes;
│ +    }
│ +
│ +    public @NotNull MockResourceResolverFactoryOptions setMangleNamespacePrefixes(boolean mangleNamespacePrefixes) {
│ +        this.mangleNamespacePrefixes = mangleNamespacePrefixes;
│ +        return this;
│ +    }
│ +
│ +    public @NotNull MockResourceFactory getMockResourceFactory() {
│ +        if (mockResourceFactory == null) {
│ +            mockResourceFactory = new DefaultMockResourceFactory();
│ +        }
│ +        return mockResourceFactory;
│ +    }
│ +    
│ +    public @NotNull MockResourceResolverFactoryOptions setMockResourceFactory(MockResourceFactory factory) {
│ +        this.mockResourceFactory = factory;
│ +        return this;
│ +    }
│ +
│ +}
├── org/apache/sling/testing/resourceresolver/MockValueMap.java
│ @@ -1,112 +1,112 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.io.ByteArrayInputStream;
│ -import java.io.IOException;
│ -import java.io.InputStream;
│ -import java.util.Calendar;
│ -import java.util.Date;
│ -import java.util.HashMap;
│ -import java.util.Map;
│ -
│ -import org.apache.commons.io.IOUtils;
│ -import org.apache.sling.api.resource.ModifiableValueMap;
│ -import org.apache.sling.api.resource.Resource;
│ -import org.apache.sling.api.wrappers.DeepReadModifiableValueMapDecorator;
│ -import org.apache.sling.api.wrappers.ValueMapDecorator;
│ -
│ -/**
│ - * ValueMap for mocked resources to mimick JCR-like behavior.
│ - * <p>Implements the following conversions:</p>
│ - * <ul>
│ - * <li>Converts all Date values to Calendar objects internally and vice versa.</li>
│ - * <li>Converts InputStream to byte array and vice versa.</li>
│ - * </ul>
│ - */
│ -public class MockValueMap extends DeepReadModifiableValueMapDecorator implements ModifiableValueMap {
│ -
│ -    public MockValueMap(Resource resource) {
│ -        this(resource, new HashMap<String, Object>());
│ -    }
│ -
│ -    public MockValueMap(Resource resource, Map<String,Object> map) {
│ -        super(resource, new ValueMapDecorator(convertForWriteAll(map)));
│ -    }
│ -
│ -    @SuppressWarnings({ "unchecked", "null", "unused" })
│ -    @Override
│ -    public <T> T get(String name, Class<T> type) {
│ -
│ -        if (type == InputStream.class) {
│ -            // Support conversion from byte array to InputStream
│ -            byte[] data = get(name, byte[].class);
│ -            if (data!=null) {
│ -                return (T)new ByteArrayInputStream(data);
│ -            }
│ -            else {
│ -                return null;
│ -            }
│ -        }
│ -        else if ( type == null ) {
│ -            return (T) super.get(name);
│ -        }
│ -        return super.get(name, type);
│ -    }
│ -
│ -    @Override
│ -    public Object put(String key, Object value) {
│ -        return super.put(key, convertForWrite(value));
│ -    }
│ -
│ -    @SuppressWarnings("unchecked")
│ -    @Override
│ -    public void putAll(Map<? extends String, ?> map) {
│ -        super.putAll((Map<? extends String, ?>)convertForWriteAll((Map<String, Object>)map));
│ -    }
│ -
│ -    private static Object convertForWrite(Object value) {
│ -        if (value instanceof Date) {
│ -            // Store Date values as Calendar values
│ -            Calendar calendar = Calendar.getInstance();
│ -            calendar.setTime((Date)value);
│ -            value = calendar;
│ -        }
│ -        else if (value instanceof InputStream) {
│ -            // Store InputStream values as byte array
│ -            try {
│ -                value = IOUtils.toByteArray((InputStream)value);
│ -            } catch (IOException ex) {
│ -                throw new RuntimeException("Unable to convert input stream to byte array.");
│ -            }
│ -        }
│ -        return value;
│ -    }
│ -
│ -    private static Map<String, Object> convertForWriteAll(Map<String, Object> map) {
│ -        Map<String,Object> newMap = new HashMap<String, Object>();
│ -        if (map != null) {
│ -            for (Map.Entry<String, Object> entry : map.entrySet()) {
│ -                newMap.put(entry.getKey(), convertForWrite(entry.getValue()));
│ -            }
│ -        }
│ -        return newMap;
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.io.ByteArrayInputStream;
│ +import java.io.IOException;
│ +import java.io.InputStream;
│ +import java.util.Calendar;
│ +import java.util.Date;
│ +import java.util.HashMap;
│ +import java.util.Map;
│ +
│ +import org.apache.commons.io.IOUtils;
│ +import org.apache.sling.api.resource.ModifiableValueMap;
│ +import org.apache.sling.api.resource.Resource;
│ +import org.apache.sling.api.wrappers.DeepReadModifiableValueMapDecorator;
│ +import org.apache.sling.api.wrappers.ValueMapDecorator;
│ +
│ +/**
│ + * ValueMap for mocked resources to mimick JCR-like behavior.
│ + * <p>Implements the following conversions:</p>
│ + * <ul>
│ + * <li>Converts all Date values to Calendar objects internally and vice versa.</li>
│ + * <li>Converts InputStream to byte array and vice versa.</li>
│ + * </ul>
│ + */
│ +public class MockValueMap extends DeepReadModifiableValueMapDecorator implements ModifiableValueMap {
│ +
│ +    public MockValueMap(Resource resource) {
│ +        this(resource, new HashMap<String, Object>());
│ +    }
│ +
│ +    public MockValueMap(Resource resource, Map<String,Object> map) {
│ +        super(resource, new ValueMapDecorator(convertForWriteAll(map)));
│ +    }
│ +
│ +    @SuppressWarnings({ "unchecked", "null", "unused" })
│ +    @Override
│ +    public <T> T get(String name, Class<T> type) {
│ +
│ +        if (type == InputStream.class) {
│ +            // Support conversion from byte array to InputStream
│ +            byte[] data = get(name, byte[].class);
│ +            if (data!=null) {
│ +                return (T)new ByteArrayInputStream(data);
│ +            }
│ +            else {
│ +                return null;
│ +            }
│ +        }
│ +        else if ( type == null ) {
│ +            return (T) super.get(name);
│ +        }
│ +        return super.get(name, type);
│ +    }
│ +
│ +    @Override
│ +    public Object put(String key, Object value) {
│ +        return super.put(key, convertForWrite(value));
│ +    }
│ +
│ +    @SuppressWarnings("unchecked")
│ +    @Override
│ +    public void putAll(Map<? extends String, ?> map) {
│ +        super.putAll((Map<? extends String, ?>)convertForWriteAll((Map<String, Object>)map));
│ +    }
│ +
│ +    private static Object convertForWrite(Object value) {
│ +        if (value instanceof Date) {
│ +            // Store Date values as Calendar values
│ +            Calendar calendar = Calendar.getInstance();
│ +            calendar.setTime((Date)value);
│ +            value = calendar;
│ +        }
│ +        else if (value instanceof InputStream) {
│ +            // Store InputStream values as byte array
│ +            try {
│ +                value = IOUtils.toByteArray((InputStream)value);
│ +            } catch (IOException ex) {
│ +                throw new RuntimeException("Unable to convert input stream to byte array.");
│ +            }
│ +        }
│ +        return value;
│ +    }
│ +
│ +    private static Map<String, Object> convertForWriteAll(Map<String, Object> map) {
│ +        Map<String,Object> newMap = new HashMap<String, Object>();
│ +        if (map != null) {
│ +            for (Map.Entry<String, Object> entry : map.entrySet()) {
│ +                newMap.put(entry.getKey(), convertForWrite(entry.getValue()));
│ +            }
│ +        }
│ +        return newMap;
│ +    }
│ +
│ +}
├── org/apache/sling/testing/resourceresolver/NamespaceMangler.java
│ @@ -1,80 +1,80 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.regex.Matcher;
│ -import java.util.regex.Pattern;
│ -
│ -final class NamespaceMangler {
│ -
│ -    private static final String MANGLED_NAMESPACE_PREFIX = "_";
│ -    private static final String MANGLED_NAMESPACE_SUFFIX = "_";
│ -    private static final char NAMESPACE_SEPARATOR = ':';
│ -    private static final Pattern NAMESPACE_PATTERN = Pattern.compile("/([^:/]+):");
│ -    private static final Pattern MANGLED_NAMESPACE_PATTERN = Pattern.compile("/_([^_/]+)_");
│ -
│ -    private NamespaceMangler() {
│ -        // static methods only
│ -    }
│ -
│ -    /**
│ -     * Mangle the namespaces in the given path for usage in sling-based URLs.
│ -     * <p>
│ -     * Example: /path/jcr:content to /path/_jcr_content
│ -     * </p>
│ -     * @param path Path to mangle
│ -     * @return Mangled path
│ -     */
│ -    public static String mangleNamespaces(String path) {
│ -        if (path == null) {
│ -            return null;
│ -        }
│ -        Matcher matcher = NAMESPACE_PATTERN.matcher(path);
│ -        StringBuffer sb = new StringBuffer();
│ -        while (matcher.find()) {
│ -            String replacement = "/" + MANGLED_NAMESPACE_PREFIX + matcher.group(1) + MANGLED_NAMESPACE_SUFFIX;
│ -            matcher.appendReplacement(sb, replacement);
│ -        }
│ -        matcher.appendTail(sb);
│ -        return sb.toString();
│ -    }
│ -
│ -    /**
│ -     * Unmangle the namespaces in the given path for usage in sling-based URLs.
│ -     * <p>
│ -     * Example: /path/_jcr_content to /path/jcr:content
│ -     * </p>
│ -     * @param path Path to unmangle
│ -     * @return Unmangled path
│ -     */
│ -    public static String unmangleNamespaces(String path) {
│ -        if (path == null) {
│ -            return null;
│ -        }
│ -        Matcher matcher = MANGLED_NAMESPACE_PATTERN.matcher(path);
│ -        StringBuffer sb = new StringBuffer();
│ -        while (matcher.find()) {
│ -            String replacement = "/" + matcher.group(1) + NAMESPACE_SEPARATOR;
│ -            matcher.appendReplacement(sb, replacement);
│ -        }
│ -        matcher.appendTail(sb);
│ -        return sb.toString();
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.regex.Matcher;
│ +import java.util.regex.Pattern;
│ +
│ +final class NamespaceMangler {
│ +
│ +    private static final String MANGLED_NAMESPACE_PREFIX = "_";
│ +    private static final String MANGLED_NAMESPACE_SUFFIX = "_";
│ +    private static final char NAMESPACE_SEPARATOR = ':';
│ +    private static final Pattern NAMESPACE_PATTERN = Pattern.compile("/([^:/]+):");
│ +    private static final Pattern MANGLED_NAMESPACE_PATTERN = Pattern.compile("/_([^_/]+)_");
│ +
│ +    private NamespaceMangler() {
│ +        // static methods only
│ +    }
│ +
│ +    /**
│ +     * Mangle the namespaces in the given path for usage in sling-based URLs.
│ +     * <p>
│ +     * Example: /path/jcr:content to /path/_jcr_content
│ +     * </p>
│ +     * @param path Path to mangle
│ +     * @return Mangled path
│ +     */
│ +    public static String mangleNamespaces(String path) {
│ +        if (path == null) {
│ +            return null;
│ +        }
│ +        Matcher matcher = NAMESPACE_PATTERN.matcher(path);
│ +        StringBuffer sb = new StringBuffer();
│ +        while (matcher.find()) {
│ +            String replacement = "/" + MANGLED_NAMESPACE_PREFIX + matcher.group(1) + MANGLED_NAMESPACE_SUFFIX;
│ +            matcher.appendReplacement(sb, replacement);
│ +        }
│ +        matcher.appendTail(sb);
│ +        return sb.toString();
│ +    }
│ +
│ +    /**
│ +     * Unmangle the namespaces in the given path for usage in sling-based URLs.
│ +     * <p>
│ +     * Example: /path/_jcr_content to /path/jcr:content
│ +     * </p>
│ +     * @param path Path to unmangle
│ +     * @return Unmangled path
│ +     */
│ +    public static String unmangleNamespaces(String path) {
│ +        if (path == null) {
│ +            return null;
│ +        }
│ +        Matcher matcher = MANGLED_NAMESPACE_PATTERN.matcher(path);
│ +        StringBuffer sb = new StringBuffer();
│ +        while (matcher.find()) {
│ +            String replacement = "/" + matcher.group(1) + NAMESPACE_SEPARATOR;
│ +            matcher.appendReplacement(sb, replacement);
│ +        }
│ +        matcher.appendTail(sb);
│ +        return sb.toString();
│ +    }
│ +
│ +}
├── org/apache/sling/testing/resourceresolver/ReadonlyValueMapDecorator.java
│ @@ -1,113 +1,113 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -import java.util.Collection;
│ -import java.util.Map;
│ -import java.util.Set;
│ -
│ -import org.apache.sling.api.resource.ValueMap;
│ -import org.jetbrains.annotations.NotNull;
│ -
│ -/**
│ - * Decorator that disallows access to all methods that modify the value map.
│ - */
│ -class ReadonlyValueMapDecorator implements ValueMap {
│ -
│ -    private final ValueMap delegate;
│ -
│ -    public ReadonlyValueMapDecorator(ValueMap base) {
│ -        this.delegate = base;
│ -    }
│ -
│ -    public Object put(String key, Object value) {
│ -        throw new UnsupportedOperationException("ValueMap is read-only.");
│ -    }
│ -
│ -    public Object remove(Object key) {
│ -        throw new UnsupportedOperationException("ValueMap is read-only.");
│ -    }
│ -
│ -    public void putAll(Map<? extends String, ?> t) {
│ -        throw new UnsupportedOperationException("ValueMap is read-only.");
│ -    }
│ -
│ -    public void clear() {
│ -        throw new UnsupportedOperationException("ValueMap is read-only.");
│ -    }
│ -
│ -    @SuppressWarnings("null")
│ -    public <T> T get(@NotNull String name, @NotNull Class<T> type) {
│ -        return delegate.get(name, type);
│ -    }
│ -
│ -    public @NotNull <T> T get(@NotNull String name, @NotNull T defaultValue) {
│ -        return delegate.get(name, defaultValue);
│ -    }
│ -
│ -    public int size() {
│ -        return delegate.size();
│ -    }
│ -
│ -    public boolean isEmpty() {
│ -        return delegate.isEmpty();
│ -    }
│ -
│ -    public boolean containsKey(Object key) {
│ -        return delegate.containsKey(key);
│ -    }
│ -
│ -    public boolean containsValue(Object value) {
│ -        return delegate.containsValue(value);
│ -    }
│ -
│ -    public Object get(Object key) {
│ -        return delegate.get(key);
│ -    }
│ -
│ -    public Set<String> keySet() {
│ -        return delegate.keySet();
│ -    }
│ -
│ -    public Collection<Object> values() {
│ -        return delegate.values();
│ -    }
│ -
│ -    public Set<java.util.Map.Entry<String, Object>> entrySet() {
│ -        return delegate.entrySet();
│ -    }
│ -
│ -    public boolean equals(Object o) {
│ -        return delegate.equals(o);
│ -    }
│ -
│ -    public int hashCode() {
│ -        return delegate.hashCode();
│ -    }
│ -
│ -    ValueMap getDelegate() {
│ -        return delegate;
│ -    }
│ -
│ -    @Override
│ -    public String toString() {
│ -        return delegate.toString();
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +import java.util.Collection;
│ +import java.util.Map;
│ +import java.util.Set;
│ +
│ +import org.apache.sling.api.resource.ValueMap;
│ +import org.jetbrains.annotations.NotNull;
│ +
│ +/**
│ + * Decorator that disallows access to all methods that modify the value map.
│ + */
│ +class ReadonlyValueMapDecorator implements ValueMap {
│ +
│ +    private final ValueMap delegate;
│ +
│ +    public ReadonlyValueMapDecorator(ValueMap base) {
│ +        this.delegate = base;
│ +    }
│ +
│ +    public Object put(String key, Object value) {
│ +        throw new UnsupportedOperationException("ValueMap is read-only.");
│ +    }
│ +
│ +    public Object remove(Object key) {
│ +        throw new UnsupportedOperationException("ValueMap is read-only.");
│ +    }
│ +
│ +    public void putAll(Map<? extends String, ?> t) {
│ +        throw new UnsupportedOperationException("ValueMap is read-only.");
│ +    }
│ +
│ +    public void clear() {
│ +        throw new UnsupportedOperationException("ValueMap is read-only.");
│ +    }
│ +
│ +    @SuppressWarnings("null")
│ +    public <T> T get(@NotNull String name, @NotNull Class<T> type) {
│ +        return delegate.get(name, type);
│ +    }
│ +
│ +    public @NotNull <T> T get(@NotNull String name, @NotNull T defaultValue) {
│ +        return delegate.get(name, defaultValue);
│ +    }
│ +
│ +    public int size() {
│ +        return delegate.size();
│ +    }
│ +
│ +    public boolean isEmpty() {
│ +        return delegate.isEmpty();
│ +    }
│ +
│ +    public boolean containsKey(Object key) {
│ +        return delegate.containsKey(key);
│ +    }
│ +
│ +    public boolean containsValue(Object value) {
│ +        return delegate.containsValue(value);
│ +    }
│ +
│ +    public Object get(Object key) {
│ +        return delegate.get(key);
│ +    }
│ +
│ +    public Set<String> keySet() {
│ +        return delegate.keySet();
│ +    }
│ +
│ +    public Collection<Object> values() {
│ +        return delegate.values();
│ +    }
│ +
│ +    public Set<java.util.Map.Entry<String, Object>> entrySet() {
│ +        return delegate.entrySet();
│ +    }
│ +
│ +    public boolean equals(Object o) {
│ +        return delegate.equals(o);
│ +    }
│ +
│ +    public int hashCode() {
│ +        return delegate.hashCode();
│ +    }
│ +
│ +    ValueMap getDelegate() {
│ +        return delegate;
│ +    }
│ +
│ +    @Override
│ +    public String toString() {
│ +        return delegate.toString();
│ +    }
│ +
│ +}
├── org/apache/sling/testing/resourceresolver/ResourceTypeUtil.java
│ @@ -1,62 +1,62 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -package org.apache.sling.testing.resourceresolver;
│ -
│ -/**
│ - * Some helper methods for doing comparisons on resource types.
│ - * This class is private the resource resolver bundle.
│ - * Consumers should rely on {@link Resource#isResourceType(String)} or {@link ResourceResolver#isResourceType(Resource, String)} instead.
│ - */
│ -class ResourceTypeUtil {
│ -
│ -    /**
│ -     * Returns <code>true</code> if the given resource type are equal.
│ -     *
│ -     * In case the value of any of the given resource types
│ -     * starts with one of the resource resolver's search paths
│ -     * it is converted to a relative resource type by stripping off
│ -     * the resource resolver's search path before doing the comparison.
│ -     *
│ -     * @param resourceType A resource type
│ -     * @param anotherResourceType Another resource type to compare with {@link resourceType}.
│ -     * @return <code>true</code> if the resource type equals the given resource type.
│ -     */
│ -    public static boolean areResourceTypesEqual(String resourceType, String anotherResourceType, String[] searchPath) {
│ -        return relativizeResourceType(resourceType, searchPath).equals(relativizeResourceType(anotherResourceType, searchPath));
│ -    }
│ -
│ -    /**
│ -     * Makes the given resource type relative by stripping off any prefix which equals one of the given search paths.
│ -     * In case the given resource type does not start with any of the given search paths it is returned unmodified.
│ -     * @param resourceType the resourceType to relativize.
│ -     * @param searchPath the search paths to strip off from the given resource type.
│ -     * @return the relative resource type
│ -     */
│ -    public static String relativizeResourceType(String resourceType, String[] searchPath) {
│ -        if (resourceType.startsWith("/")) {
│ -            for (String prefix : searchPath) {
│ -                if (resourceType.startsWith(prefix)) {
│ -                    return resourceType.substring(prefix.length());
│ -                }
│ -            }
│ -        }
│ -        return resourceType;
│ -    }
│ -
│ -}
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +package org.apache.sling.testing.resourceresolver;
│ +
│ +/**
│ + * Some helper methods for doing comparisons on resource types.
│ + * This class is private the resource resolver bundle.
│ + * Consumers should rely on {@link Resource#isResourceType(String)} or {@link ResourceResolver#isResourceType(Resource, String)} instead.
│ + */
│ +class ResourceTypeUtil {
│ +
│ +    /**
│ +     * Returns <code>true</code> if the given resource type are equal.
│ +     *
│ +     * In case the value of any of the given resource types
│ +     * starts with one of the resource resolver's search paths
│ +     * it is converted to a relative resource type by stripping off
│ +     * the resource resolver's search path before doing the comparison.
│ +     *
│ +     * @param resourceType A resource type
│ +     * @param anotherResourceType Another resource type to compare with {@link resourceType}.
│ +     * @return <code>true</code> if the resource type equals the given resource type.
│ +     */
│ +    public static boolean areResourceTypesEqual(String resourceType, String anotherResourceType, String[] searchPath) {
│ +        return relativizeResourceType(resourceType, searchPath).equals(relativizeResourceType(anotherResourceType, searchPath));
│ +    }
│ +
│ +    /**
│ +     * Makes the given resource type relative by stripping off any prefix which equals one of the given search paths.
│ +     * In case the given resource type does not start with any of the given search paths it is returned unmodified.
│ +     * @param resourceType the resourceType to relativize.
│ +     * @param searchPath the search paths to strip off from the given resource type.
│ +     * @return the relative resource type
│ +     */
│ +    public static String relativizeResourceType(String resourceType, String[] searchPath) {
│ +        if (resourceType.startsWith("/")) {
│ +            for (String prefix : searchPath) {
│ +                if (resourceType.startsWith(prefix)) {
│ +                    return resourceType.substring(prefix.length());
│ +                }
│ +            }
│ +        }
│ +        return resourceType;
│ +    }
│ +
│ +}
├── org/apache/sling/testing/resourceresolver/package-info.java
│ @@ -1,23 +1,23 @@
│ -/*
│ - * Licensed to the Apache Software Foundation (ASF) under one
│ - * or more contributor license agreements.  See the NOTICE file
│ - * distributed with this work for additional information
│ - * regarding copyright ownership.  The ASF licenses this file
│ - * to you under the Apache License, Version 2.0 (the
│ - * "License"); you may not use this file except in compliance
│ - * with the License.  You may obtain a copy of the License at
│ - *
│ - *   http://www.apache.org/licenses/LICENSE-2.0
│ - *
│ - * Unless required by applicable law or agreed to in writing,
│ - * software distributed under the License is distributed on an
│ - * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ - * KIND, either express or implied.  See the License for the
│ - * specific language governing permissions and limitations
│ - * under the License.
│ - */
│ -/**
│ - * Apache Sling Testing Resource Resolver Mock
│ - */
│ -@org.osgi.annotation.versioning.Version("2.2.1")
│ -package org.apache.sling.testing.resourceresolver;
│ +/*
│ + * Licensed to the Apache Software Foundation (ASF) under one
│ + * or more contributor license agreements.  See the NOTICE file
│ + * distributed with this work for additional information
│ + * regarding copyright ownership.  The ASF licenses this file
│ + * to you under the Apache License, Version 2.0 (the
│ + * "License"); you may not use this file except in compliance
│ + * with the License.  You may obtain a copy of the License at
│ + *
│ + *   http://www.apache.org/licenses/LICENSE-2.0
│ + *
│ + * Unless required by applicable law or agreed to in writing,
│ + * software distributed under the License is distributed on an
│ + * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
│ + * KIND, either express or implied.  See the License for the
│ + * specific language governing permissions and limitations
│ + * under the License.
│ + */
│ +/**
│ + * Apache Sling Testing Resource Resolver Mock
│ + */
│ +@org.osgi.annotation.versioning.Version("2.2.1")
│ +package org.apache.sling.testing.resourceresolver;
├── META-INF/maven/org.apache.sling/org.apache.sling.testing.resourceresolver-mock/pom.xml
│┄ Format-specific differences are supported for XML files but no file-specific differences were detected; falling back to a binary diff. file(1) reports: XML 1.0 document, ASCII text
│ @@ -1,453 +1,466 @@
│  00000000: 3c3f 786d 6c20 7665 7273 696f 6e3d 2231  <?xml version="1
│  00000010: 2e30 2220 656e 636f 6469 6e67 3d22 4953  .0" encoding="IS
│ -00000020: 4f2d 3838 3539 2d31 223f 3e0a 3c21 2d2d  O-8859-1"?>.<!--
│ -00000030: 0a20 204c 6963 656e 7365 6420 746f 2074  .  Licensed to t
│ -00000040: 6865 2041 7061 6368 6520 536f 6674 7761  he Apache Softwa
│ -00000050: 7265 2046 6f75 6e64 6174 696f 6e20 2841  re Foundation (A
│ -00000060: 5346 2920 756e 6465 7220 6f6e 650a 2020  SF) under one.  
│ -00000070: 6f72 206d 6f72 6520 636f 6e74 7269 6275  or more contribu
│ -00000080: 746f 7220 6c69 6365 6e73 6520 6167 7265  tor license agre
│ -00000090: 656d 656e 7473 2e20 2053 6565 2074 6865  ements.  See the
│ -000000a0: 204e 4f54 4943 4520 6669 6c65 0a20 2064   NOTICE file.  d
│ -000000b0: 6973 7472 6962 7574 6564 2077 6974 6820  istributed with 
│ -000000c0: 7468 6973 2077 6f72 6b20 666f 7220 6164  this work for ad
│ -000000d0: 6469 7469 6f6e 616c 2069 6e66 6f72 6d61  ditional informa
│ -000000e0: 7469 6f6e 0a20 2072 6567 6172 6469 6e67  tion.  regarding
│ -000000f0: 2063 6f70 7972 6967 6874 206f 776e 6572   copyright owner
│ -00000100: 7368 6970 2e20 2054 6865 2041 5346 206c  ship.  The ASF l
│ -00000110: 6963 656e 7365 7320 7468 6973 2066 696c  icenses this fil
│ -00000120: 650a 2020 746f 2079 6f75 2075 6e64 6572  e.  to you under
│ -00000130: 2074 6865 2041 7061 6368 6520 4c69 6365   the Apache Lice
│ -00000140: 6e73 652c 2056 6572 7369 6f6e 2032 2e30  nse, Version 2.0
│ -00000150: 2028 7468 650a 2020 224c 6963 656e 7365   (the.  "License
│ -00000160: 2229 3b20 796f 7520 6d61 7920 6e6f 7420  "); you may not 
│ -00000170: 7573 6520 7468 6973 2066 696c 6520 6578  use this file ex
│ -00000180: 6365 7074 2069 6e20 636f 6d70 6c69 616e  cept in complian
│ -00000190: 6365 0a20 2077 6974 6820 7468 6520 4c69  ce.  with the Li
│ -000001a0: 6365 6e73 652e 2020 596f 7520 6d61 7920  cense.  You may 
│ -000001b0: 6f62 7461 696e 2061 2063 6f70 7920 6f66  obtain a copy of
│ -000001c0: 2074 6865 204c 6963 656e 7365 2061 740a   the License at.
│ -000001d0: 0a20 2020 6874 7470 3a2f 2f77 7777 2e61  .   http://www.a
│ -000001e0: 7061 6368 652e 6f72 672f 6c69 6365 6e73  pache.org/licens
│ -000001f0: 6573 2f4c 4943 454e 5345 2d32 2e30 0a0a  es/LICENSE-2.0..
│ -00000200: 2020 556e 6c65 7373 2072 6571 7569 7265    Unless require
│ -00000210: 6420 6279 2061 7070 6c69 6361 626c 6520  d by applicable 
│ -00000220: 6c61 7720 6f72 2061 6772 6565 6420 746f  law or agreed to
│ -00000230: 2069 6e20 7772 6974 696e 672c 0a20 2073   in writing,.  s
│ -00000240: 6f66 7477 6172 6520 6469 7374 7269 6275  oftware distribu
│ -00000250: 7465 6420 756e 6465 7220 7468 6520 4c69  ted under the Li
│ -00000260: 6365 6e73 6520 6973 2064 6973 7472 6962  cense is distrib
│ -00000270: 7574 6564 206f 6e20 616e 0a20 2022 4153  uted on an.  "AS
│ -00000280: 2049 5322 2042 4153 4953 2c20 5749 5448   IS" BASIS, WITH
│ -00000290: 4f55 5420 5741 5252 414e 5449 4553 204f  OUT WARRANTIES O
│ -000002a0: 5220 434f 4e44 4954 494f 4e53 204f 4620  R CONDITIONS OF 
│ -000002b0: 414e 590a 2020 4b49 4e44 2c20 6569 7468  ANY.  KIND, eith
│ -000002c0: 6572 2065 7870 7265 7373 206f 7220 696d  er express or im
│ -000002d0: 706c 6965 642e 2020 5365 6520 7468 6520  plied.  See the 
│ -000002e0: 4c69 6365 6e73 6520 666f 7220 7468 650a  License for the.
│ -000002f0: 2020 7370 6563 6966 6963 206c 616e 6775    specific langu
│ -00000300: 6167 6520 676f 7665 726e 696e 6720 7065  age governing pe
│ -00000310: 726d 6973 7369 6f6e 7320 616e 6420 6c69  rmissions and li
│ -00000320: 6d69 7461 7469 6f6e 730a 2020 756e 6465  mitations.  unde
│ -00000330: 7220 7468 6520 4c69 6365 6e73 652e 0a2d  r the License..-
│ -00000340: 2d3e 0a3c 7072 6f6a 6563 7420 786d 6c6e  ->.<project xmln
│ -00000350: 733d 2268 7474 703a 2f2f 6d61 7665 6e2e  s="http://maven.
│ -00000360: 6170 6163 6865 2e6f 7267 2f50 4f4d 2f34  apache.org/POM/4
│ -00000370: 2e30 2e30 2220 786d 6c6e 733a 7873 693d  .0.0" xmlns:xsi=
│ -00000380: 2268 7474 703a 2f2f 7777 772e 7733 2e6f  "http://www.w3.o
│ -00000390: 7267 2f32 3030 312f 584d 4c53 6368 656d  rg/2001/XMLSchem
│ -000003a0: 612d 696e 7374 616e 6365 2220 7873 693a  a-instance" xsi:
│ -000003b0: 7363 6865 6d61 4c6f 6361 7469 6f6e 3d22  schemaLocation="
│ -000003c0: 6874 7470 3a2f 2f6d 6176 656e 2e61 7061  http://maven.apa
│ -000003d0: 6368 652e 6f72 672f 504f 4d2f 342e 302e  che.org/POM/4.0.
│ -000003e0: 3020 6874 7470 3a2f 2f6d 6176 656e 2e61  0 http://maven.a
│ -000003f0: 7061 6368 652e 6f72 672f 6d61 7665 6e2d  pache.org/maven-
│ -00000400: 7634 5f30 5f30 2e78 7364 223e 0a0a 2020  v4_0_0.xsd">..  
│ -00000410: 2020 3c6d 6f64 656c 5665 7273 696f 6e3e    <modelVersion>
│ -00000420: 342e 302e 303c 2f6d 6f64 656c 5665 7273  4.0.0</modelVers
│ -00000430: 696f 6e3e 0a20 2020 203c 7061 7265 6e74  ion>.    <parent
│ -00000440: 3e0a 2020 2020 2020 2020 3c67 726f 7570  >.        <group
│ -00000450: 4964 3e6f 7267 2e61 7061 6368 652e 736c  Id>org.apache.sl
│ -00000460: 696e 673c 2f67 726f 7570 4964 3e0a 2020  ing</groupId>.  
│ -00000470: 2020 2020 2020 3c61 7274 6966 6163 7449        <artifactI
│ -00000480: 643e 736c 696e 672d 6275 6e64 6c65 2d70  d>sling-bundle-p
│ -00000490: 6172 656e 743c 2f61 7274 6966 6163 7449  arent</artifactI
│ -000004a0: 643e 0a20 2020 2020 2020 203c 7665 7273  d>.        <vers
│ -000004b0: 696f 6e3e 3437 3c2f 7665 7273 696f 6e3e  ion>47</version>
│ -000004c0: 0a20 2020 2020 2020 203c 7265 6c61 7469  .        <relati
│ -000004d0: 7665 5061 7468 202f 3e0a 2020 2020 3c2f  vePath />.    </
│ -000004e0: 7061 7265 6e74 3e0a 0a20 2020 203c 6172  parent>..    <ar
│ -000004f0: 7469 6661 6374 4964 3e6f 7267 2e61 7061  tifactId>org.apa
│ -00000500: 6368 652e 736c 696e 672e 7465 7374 696e  che.sling.testin
│ -00000510: 672e 7265 736f 7572 6365 7265 736f 6c76  g.resourceresolv
│ -00000520: 6572 2d6d 6f63 6b3c 2f61 7274 6966 6163  er-mock</artifac
│ -00000530: 7449 643e 0a20 2020 203c 7665 7273 696f  tId>.    <versio
│ -00000540: 6e3e 312e 332e 303c 2f76 6572 7369 6f6e  n>1.3.0</version
│ -00000550: 3e0a 0a20 2020 203c 6e61 6d65 3e41 7061  >..    <name>Apa
│ -00000560: 6368 6520 536c 696e 6720 5465 7374 696e  che Sling Testin
│ -00000570: 6720 5265 736f 7572 6365 2052 6573 6f6c  g Resource Resol
│ -00000580: 7665 7220 4d6f 636b 3c2f 6e61 6d65 3e0a  ver Mock</name>.
│ -00000590: 2020 2020 3c64 6573 6372 6970 7469 6f6e      <description
│ -000005a0: 3e0a 2020 2020 2020 2020 4d6f 636b 2066  >.        Mock f
│ -000005b0: 6f72 2074 6865 2072 6573 6f75 7263 6520  or the resource 
│ -000005c0: 7265 736f 6c76 6572 202f 2066 6163 746f  resolver / facto
│ -000005d0: 7279 2066 6f72 2065 6173 6965 7220 7465  ry for easier te
│ -000005e0: 7374 696e 672e 0a20 2020 203c 2f64 6573  sting..    </des
│ -000005f0: 6372 6970 7469 6f6e 3e0a 0a20 2020 203c  cription>..    <
│ -00000600: 7363 6d3e 0a20 2020 2020 2020 203c 636f  scm>.        <co
│ -00000610: 6e6e 6563 7469 6f6e 3e73 636d 3a67 6974  nnection>scm:git
│ -00000620: 3a68 7474 7073 3a2f 2f67 6974 626f 782e  :https://gitbox.
│ -00000630: 6170 6163 6865 2e6f 7267 2f72 6570 6f73  apache.org/repos
│ -00000640: 2f61 7366 2f73 6c69 6e67 2d6f 7267 2d61  /asf/sling-org-a
│ -00000650: 7061 6368 652d 736c 696e 672d 7465 7374  pache-sling-test
│ -00000660: 696e 672d 7265 736f 7572 6365 7265 736f  ing-resourcereso
│ -00000670: 6c76 6572 2d6d 6f63 6b2e 6769 743c 2f63  lver-mock.git</c
│ -00000680: 6f6e 6e65 6374 696f 6e3e 0a20 2020 2020  onnection>.     
│ -00000690: 2020 203c 6465 7665 6c6f 7065 7243 6f6e     <developerCon
│ -000006a0: 6e65 6374 696f 6e3e 7363 6d3a 6769 743a  nection>scm:git:
│ -000006b0: 6874 7470 733a 2f2f 6769 7462 6f78 2e61  https://gitbox.a
│ -000006c0: 7061 6368 652e 6f72 672f 7265 706f 732f  pache.org/repos/
│ -000006d0: 6173 662f 736c 696e 672d 6f72 672d 6170  asf/sling-org-ap
│ -000006e0: 6163 6865 2d73 6c69 6e67 2d74 6573 7469  ache-sling-testi
│ -000006f0: 6e67 2d72 6573 6f75 7263 6572 6573 6f6c  ng-resourceresol
│ -00000700: 7665 722d 6d6f 636b 2e67 6974 3c2f 6465  ver-mock.git</de
│ -00000710: 7665 6c6f 7065 7243 6f6e 6e65 6374 696f  veloperConnectio
│ -00000720: 6e3e 0a20 2020 2020 2020 203c 7572 6c3e  n>.        <url>
│ -00000730: 6874 7470 733a 2f2f 6769 7462 6f78 2e61  https://gitbox.a
│ -00000740: 7061 6368 652e 6f72 672f 7265 706f 732f  pache.org/repos/
│ -00000750: 6173 663f 703d 736c 696e 672d 6f72 672d  asf?p=sling-org-
│ -00000760: 6170 6163 6865 2d73 6c69 6e67 2d74 6573  apache-sling-tes
│ -00000770: 7469 6e67 2d72 6573 6f75 7263 6572 6573  ting-resourceres
│ -00000780: 6f6c 7665 722d 6d6f 636b 2e67 6974 3c2f  olver-mock.git</
│ -00000790: 7572 6c3e 0a20 2020 2020 2020 203c 7461  url>.        <ta
│ -000007a0: 673e 6f72 672e 6170 6163 6865 2e73 6c69  g>org.apache.sli
│ -000007b0: 6e67 2e74 6573 7469 6e67 2e72 6573 6f75  ng.testing.resou
│ -000007c0: 7263 6572 6573 6f6c 7665 722d 6d6f 636b  rceresolver-mock
│ -000007d0: 2d31 2e33 2e30 3c2f 7461 673e 0a20 2020  -1.3.0</tag>.   
│ -000007e0: 203c 2f73 636d 3e0a 0a20 2020 203c 7072   </scm>..    <pr
│ -000007f0: 6f70 6572 7469 6573 3e0a 2020 2020 2020  operties>.      
│ -00000800: 2020 3c70 726f 6a65 6374 2e62 7569 6c64    <project.build
│ -00000810: 2e6f 7574 7075 7454 696d 6573 7461 6d70  .outputTimestamp
│ -00000820: 3e32 3032 322d 3035 2d30 3554 3136 3a32  >2022-05-05T16:2
│ -00000830: 313a 3235 5a3c 2f70 726f 6a65 6374 2e62  1:25Z</project.b
│ -00000840: 7569 6c64 2e6f 7574 7075 7454 696d 6573  uild.outputTimes
│ -00000850: 7461 6d70 3e0a 2020 2020 3c2f 7072 6f70  tamp>.    </prop
│ -00000860: 6572 7469 6573 3e0a 0a20 2020 203c 7265  erties>..    <re
│ -00000870: 706f 7274 696e 673e 0a20 2020 2020 2020  porting>.       
│ -00000880: 203c 706c 7567 696e 733e 0a20 2020 2020   <plugins>.     
│ -00000890: 2020 2020 2020 203c 706c 7567 696e 3e0a         <plugin>.
│ -000008a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -000008b0: 3c67 726f 7570 4964 3e6f 7267 2e61 7061  <groupId>org.apa
│ -000008c0: 6368 652e 6d61 7665 6e2e 706c 7567 696e  che.maven.plugin
│ -000008d0: 733c 2f67 726f 7570 4964 3e0a 2020 2020  s</groupId>.    
│ -000008e0: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
│ -000008f0: 6966 6163 7449 643e 6d61 7665 6e2d 6a61  ifactId>maven-ja
│ -00000900: 7661 646f 632d 706c 7567 696e 3c2f 6172  vadoc-plugin</ar
│ -00000910: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
│ -00000920: 2020 2020 2020 2020 2020 3c63 6f6e 6669            <confi
│ -00000930: 6775 7261 7469 6f6e 3e0a 2020 2020 2020  guration>.      
│ -00000940: 2020 2020 2020 2020 2020 2020 2020 3c65                <e
│ -00000950: 7863 6c75 6465 5061 636b 6167 654e 616d  xcludePackageNam
│ -00000960: 6573 3e0a 2020 2020 2020 2020 2020 2020  es>.            
│ -00000970: 2020 2020 2020 2020 2020 2020 6f72 672e              org.
│ -00000980: 6170 6163 6865 2e73 6c69 6e67 2e74 6573  apache.sling.tes
│ -00000990: 7469 6e67 2e72 6573 6f75 7263 6572 6573  ting.resourceres
│ -000009a0: 6f6c 7665 720a 2020 2020 2020 2020 2020  olver.          
│ -000009b0: 2020 2020 2020 2020 2020 3c2f 6578 636c            </excl
│ -000009c0: 7564 6550 6163 6b61 6765 4e61 6d65 733e  udePackageNames>
│ -000009d0: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
│ -000009e0: 203c 2f63 6f6e 6669 6775 7261 7469 6f6e   </configuration
│ -000009f0: 3e0a 2020 2020 2020 2020 2020 2020 3c2f  >.            </
│ -00000a00: 706c 7567 696e 3e0a 2020 2020 2020 2020  plugin>.        
│ -00000a10: 3c2f 706c 7567 696e 733e 0a20 2020 203c  </plugins>.    <
│ -00000a20: 2f72 6570 6f72 7469 6e67 3e0a 2020 2020  /reporting>.    
│ -00000a30: 3c64 6570 656e 6465 6e63 6965 733e 0a20  <dependencies>. 
│ -00000a40: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
│ -00000a50: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
│ -00000a60: 3c67 726f 7570 4964 3e6f 7267 2e6f 7367  <groupId>org.osg
│ -00000a70: 693c 2f67 726f 7570 4964 3e0a 2020 2020  i</groupId>.    
│ -00000a80: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
│ -00000a90: 7449 643e 6f72 672e 6f73 6769 2e61 6e6e  tId>org.osgi.ann
│ -00000aa0: 6f74 6174 696f 6e2e 7665 7273 696f 6e69  otation.versioni
│ -00000ab0: 6e67 3c2f 6172 7469 6661 6374 4964 3e0a  ng</artifactId>.
│ -00000ac0: 2020 2020 2020 2020 2020 2020 3c73 636f              <sco
│ -00000ad0: 7065 3e70 726f 7669 6465 643c 2f73 636f  pe>provided</sco
│ -00000ae0: 7065 3e0a 2020 2020 2020 2020 3c2f 6465  pe>.        </de
│ -00000af0: 7065 6e64 656e 6379 3e0a 2020 2020 2020  pendency>.      
│ -00000b00: 2020 3c64 6570 656e 6465 6e63 793e 0a20    <dependency>. 
│ -00000b10: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
│ -00000b20: 7049 643e 6f72 672e 6a65 7462 7261 696e  pId>org.jetbrain
│ -00000b30: 733c 2f67 726f 7570 4964 3e0a 2020 2020  s</groupId>.    
│ -00000b40: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
│ -00000b50: 7449 643e 616e 6e6f 7461 7469 6f6e 733c  tId>annotations<
│ -00000b60: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
│ -00000b70: 2020 2020 2020 2020 203c 7363 6f70 653e           <scope>
│ -00000b80: 7072 6f76 6964 6564 3c2f 7363 6f70 653e  provided</scope>
│ -00000b90: 0a20 2020 2020 2020 203c 2f64 6570 656e  .        </depen
│ -00000ba0: 6465 6e63 793e 0a20 2020 2020 2020 203c  dency>.        <
│ -00000bb0: 6465 7065 6e64 656e 6379 3e0a 2020 2020  dependency>.    
│ -00000bc0: 2020 2020 2020 2020 3c67 726f 7570 4964          <groupId
│ -00000bd0: 3e6a 6176 6178 2e73 6572 766c 6574 3c2f  >javax.servlet</
│ -00000be0: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
│ -00000bf0: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
│ -00000c00: 3e6a 6176 6178 2e73 6572 766c 6574 2d61  >javax.servlet-a
│ -00000c10: 7069 3c2f 6172 7469 6661 6374 4964 3e0a  pi</artifactId>.
│ -00000c20: 2020 2020 2020 2020 2020 2020 3c73 636f              <sco
│ -00000c30: 7065 3e70 726f 7669 6465 643c 2f73 636f  pe>provided</sco
│ -00000c40: 7065 3e0a 2020 2020 2020 2020 3c2f 6465  pe>.        </de
│ -00000c50: 7065 6e64 656e 6379 3e0a 0a20 2020 2020  pendency>..     
│ -00000c60: 2020 203c 6465 7065 6e64 656e 6379 3e0a     <dependency>.
│ -00000c70: 2020 2020 2020 2020 2020 2020 3c67 726f              <gro
│ -00000c80: 7570 4964 3e6f 7267 2e61 7061 6368 652e  upId>org.apache.
│ -00000c90: 736c 696e 673c 2f67 726f 7570 4964 3e0a  sling</groupId>.
│ -00000ca0: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
│ -00000cb0: 6966 6163 7449 643e 6f72 672e 6170 6163  ifactId>org.apac
│ -00000cc0: 6865 2e73 6c69 6e67 2e61 7069 3c2f 6172  he.sling.api</ar
│ -00000cd0: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
│ -00000ce0: 2020 2020 2020 3c73 636f 7065 3e70 726f        <scope>pro
│ -00000cf0: 7669 6465 643c 2f73 636f 7065 3e0a 2020  vided</scope>.  
│ -00000d00: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ -00000d10: 6379 3e0a 2020 2020 2020 2020 3c64 6570  cy>.        <dep
│ -00000d20: 656e 6465 6e63 793e 0a20 2020 2020 2020  endency>.       
│ -00000d30: 2020 2020 203c 6772 6f75 7049 643e 6f72       <groupId>or
│ -00000d40: 672e 6f73 6769 3c2f 6772 6f75 7049 643e  g.osgi</groupId>
│ -00000d50: 0a20 2020 2020 2020 2020 2020 203c 6172  .            <ar
│ -00000d60: 7469 6661 6374 4964 3e6f 7267 2e6f 7367  tifactId>org.osg
│ -00000d70: 692e 7365 7276 6963 652e 6576 656e 743c  i.service.event<
│ -00000d80: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
│ -00000d90: 2020 2020 2020 2020 203c 7363 6f70 653e           <scope>
│ -00000da0: 7072 6f76 6964 6564 3c2f 7363 6f70 653e  provided</scope>
│ -00000db0: 0a20 2020 2020 2020 203c 2f64 6570 656e  .        </depen
│ -00000dc0: 6465 6e63 793e 0a20 2020 2020 2020 203c  dency>.        <
│ -00000dd0: 6465 7065 6e64 656e 6379 3e0a 2020 2020  dependency>.    
│ -00000de0: 2020 2020 2020 2020 3c67 726f 7570 4964          <groupId
│ -00000df0: 3e6f 7267 2e6f 7367 693c 2f67 726f 7570  >org.osgi</group
│ -00000e00: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
│ -00000e10: 3c61 7274 6966 6163 7449 643e 6f72 672e  <artifactId>org.
│ -00000e20: 6f73 6769 2e75 7469 6c2e 636f 6e76 6572  osgi.util.conver
│ -00000e30: 7465 723c 2f61 7274 6966 6163 7449 643e  ter</artifactId>
│ -00000e40: 0a20 2020 2020 2020 2020 2020 203c 7363  .            <sc
│ -00000e50: 6f70 653e 7072 6f76 6964 6564 3c2f 7363  ope>provided</sc
│ -00000e60: 6f70 653e 0a20 2020 2020 2020 203c 2f64  ope>.        </d
│ -00000e70: 6570 656e 6465 6e63 793e 0a20 2020 2020  ependency>.     
│ -00000e80: 2020 203c 6465 7065 6e64 656e 6379 3e0a     <dependency>.
│ -00000e90: 2020 2020 2020 2020 2020 2020 3c67 726f              <gro
│ -00000ea0: 7570 4964 3e6f 7267 2e6f 7367 693c 2f67  upId>org.osgi</g
│ -00000eb0: 726f 7570 4964 3e0a 2020 2020 2020 2020  roupId>.        
│ -00000ec0: 2020 2020 3c61 7274 6966 6163 7449 643e      <artifactId>
│ -00000ed0: 6f72 672e 6f73 6769 2e75 7469 6c2e 6675  org.osgi.util.fu
│ -00000ee0: 6e63 7469 6f6e 3c2f 6172 7469 6661 6374  nction</artifact
│ -00000ef0: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
│ -00000f00: 3c73 636f 7065 3e70 726f 7669 6465 643c  <scope>provided<
│ -00000f10: 2f73 636f 7065 3e0a 2020 2020 2020 2020  /scope>.        
│ -00000f20: 3c2f 6465 7065 6e64 656e 6379 3e0a 2020  </dependency>.  
│ -00000f30: 2020 2020 2020 3c64 6570 656e 6465 6e63        <dependenc
│ -00000f40: 793e 0a20 2020 2020 2020 2020 2020 203c  y>.            <
│ -00000f50: 6772 6f75 7049 643e 636f 6d6d 6f6e 732d  groupId>commons-
│ -00000f60: 696f 3c2f 6772 6f75 7049 643e 0a20 2020  io</groupId>.   
│ -00000f70: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
│ -00000f80: 6374 4964 3e63 6f6d 6d6f 6e73 2d69 6f3c  ctId>commons-io<
│ -00000f90: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
│ -00000fa0: 2020 2020 2020 2020 203c 7363 6f70 653e           <scope>
│ -00000fb0: 636f 6d70 696c 653c 2f73 636f 7065 3e0a  compile</scope>.
│ -00000fc0: 2020 2020 2020 2020 3c2f 6465 7065 6e64          </depend
│ -00000fd0: 656e 6379 3e0a 2020 2020 2020 2020 3c64  ency>.        <d
│ -00000fe0: 6570 656e 6465 6e63 793e 0a20 2020 2020  ependency>.     
│ -00000ff0: 2020 2020 2020 203c 6772 6f75 7049 643e         <groupId>
│ -00001000: 6f72 672e 6170 6163 6865 2e6a 6163 6b72  org.apache.jackr
│ -00001010: 6162 6269 743c 2f67 726f 7570 4964 3e0a  abbit</groupId>.
│ -00001020: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
│ -00001030: 6966 6163 7449 643e 6a61 636b 7261 6262  ifactId>jackrabb
│ -00001040: 6974 2d6a 6372 2d63 6f6d 6d6f 6e73 3c2f  it-jcr-commons</
│ -00001050: 6172 7469 6661 6374 4964 3e0a 2020 2020  artifactId>.    
│ -00001060: 2020 2020 2020 2020 3c73 636f 7065 3e63          <scope>c
│ -00001070: 6f6d 7069 6c65 3c2f 7363 6f70 653e 0a20  ompile</scope>. 
│ -00001080: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
│ -00001090: 6e63 793e 0a0a 2020 2020 2020 2020 3c21  ncy>..        <!
│ -000010a0: 2d2d 2074 6573 7469 6e67 202d 2d3e 0a20  -- testing -->. 
│ -000010b0: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
│ -000010c0: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
│ -000010d0: 3c67 726f 7570 4964 3e6a 756e 6974 3c2f  <groupId>junit</
│ -000010e0: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
│ -000010f0: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
│ -00001100: 3e6a 756e 6974 3c2f 6172 7469 6661 6374  >junit</artifact
│ -00001110: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
│ -00001120: 3c73 636f 7065 3e74 6573 743c 2f73 636f  <scope>test</sco
│ -00001130: 7065 3e0a 2020 2020 2020 2020 3c2f 6465  pe>.        </de
│ -00001140: 7065 6e64 656e 6379 3e0a 2020 2020 2020  pendency>.      
│ -00001150: 2020 3c64 6570 656e 6465 6e63 793e 0a20    <dependency>. 
│ -00001160: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
│ -00001170: 7049 643e 636f 6d2e 676f 6f67 6c65 2e67  pId>com.google.g
│ -00001180: 7561 7661 3c2f 6772 6f75 7049 643e 0a20  uava</groupId>. 
│ -00001190: 2020 2020 2020 2020 2020 203c 6172 7469             <arti
│ -000011a0: 6661 6374 4964 3e67 7561 7661 3c2f 6172  factId>guava</ar
│ -000011b0: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
│ -000011c0: 2020 2020 2020 3c76 6572 7369 6f6e 3e31        <version>1
│ -000011d0: 352e 303c 2f76 6572 7369 6f6e 3e0a 2020  5.0</version>.  
│ -000011e0: 2020 2020 2020 2020 2020 3c73 636f 7065            <scope
│ -000011f0: 3e74 6573 743c 2f73 636f 7065 3e0a 2020  >test</scope>.  
│ -00001200: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ -00001210: 6379 3e0a 2020 2020 2020 2020 3c64 6570  cy>.        <dep
│ -00001220: 656e 6465 6e63 793e 0a20 2020 2020 2020  endency>.       
│ -00001230: 2020 2020 203c 6772 6f75 7049 643e 6f72       <groupId>or
│ -00001240: 672e 6d6f 636b 6974 6f3c 2f67 726f 7570  g.mockito</group
│ -00001250: 4964 3e0a 2020 2020 2020 2020 2020 2020  Id>.            
│ -00001260: 3c61 7274 6966 6163 7449 643e 6d6f 636b  <artifactId>mock
│ -00001270: 6974 6f2d 636f 7265 3c2f 6172 7469 6661  ito-core</artifa
│ -00001280: 6374 4964 3e0a 2020 2020 2020 2020 2020  ctId>.          
│ -00001290: 2020 3c76 6572 7369 6f6e 3e34 2e35 2e31    <version>4.5.1
│ -000012a0: 3c2f 7665 7273 696f 6e3e 0a20 2020 2020  </version>.     
│ -000012b0: 2020 2020 2020 203c 7363 6f70 653e 7465         <scope>te
│ -000012c0: 7374 3c2f 7363 6f70 653e 0a20 2020 2020  st</scope>.     
│ -000012d0: 2020 203c 2f64 6570 656e 6465 6e63 793e     </dependency>
│ -000012e0: 0a20 2020 2020 2020 203c 6465 7065 6e64  .        <depend
│ -000012f0: 656e 6379 3e0a 2020 2020 2020 2020 2020  ency>.          
│ -00001300: 2020 3c67 726f 7570 4964 3e6f 7267 2e61    <groupId>org.a
│ -00001310: 7061 6368 652e 636f 6d6d 6f6e 733c 2f67  pache.commons</g
│ -00001320: 726f 7570 4964 3e0a 2020 2020 2020 2020  roupId>.        
│ -00001330: 2020 2020 3c61 7274 6966 6163 7449 643e      <artifactId>
│ -00001340: 636f 6d6d 6f6e 732d 6c61 6e67 333c 2f61  commons-lang3</a
│ -00001350: 7274 6966 6163 7449 643e 0a20 2020 2020  rtifactId>.     
│ -00001360: 2020 2020 2020 203c 7665 7273 696f 6e3e         <version>
│ -00001370: 332e 393c 2f76 6572 7369 6f6e 3e0a 2020  3.9</version>.  
│ -00001380: 2020 2020 2020 2020 2020 3c73 636f 7065            <scope
│ -00001390: 3e74 6573 743c 2f73 636f 7065 3e0a 2020  >test</scope>.  
│ -000013a0: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ -000013b0: 6379 3e0a 2020 2020 3c2f 6465 7065 6e64  cy>.    </depend
│ -000013c0: 656e 6369 6573 3e0a 0a20 2020 203c 6465  encies>..    <de
│ -000013d0: 7065 6e64 656e 6379 4d61 6e61 6765 6d65  pendencyManageme
│ -000013e0: 6e74 3e0a 2020 2020 2020 2020 3c64 6570  nt>.        <dep
│ -000013f0: 656e 6465 6e63 6965 733e 0a20 2020 2020  endencies>.     
│ -00001400: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
│ -00001410: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
│ -00001420: 2020 2020 3c67 726f 7570 4964 3e6f 7267      <groupId>org
│ -00001430: 2e61 7061 6368 652e 736c 696e 673c 2f67  .apache.sling</g
│ -00001440: 726f 7570 4964 3e0a 2020 2020 2020 2020  roupId>.        
│ -00001450: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
│ -00001460: 7449 643e 6f72 672e 6170 6163 6865 2e73  tId>org.apache.s
│ -00001470: 6c69 6e67 2e61 7069 3c2f 6172 7469 6661  ling.api</artifa
│ -00001480: 6374 4964 3e0a 2020 2020 2020 2020 2020  ctId>.          
│ -00001490: 2020 2020 2020 3c76 6572 7369 6f6e 3e32        <version>2
│ -000014a0: 2e32 322e 303c 2f76 6572 7369 6f6e 3e0a  .22.0</version>.
│ -000014b0: 2020 2020 2020 2020 2020 2020 3c2f 6465              </de
│ -000014c0: 7065 6e64 656e 6379 3e0a 2020 2020 2020  pendency>.      
│ -000014d0: 2020 2020 2020 3c64 6570 656e 6465 6e63        <dependenc
│ -000014e0: 793e 0a20 2020 2020 2020 2020 2020 2020  y>.             
│ -000014f0: 2020 203c 6772 6f75 7049 643e 6f72 672e     <groupId>org.
│ -00001500: 6f73 6769 3c2f 6772 6f75 7049 643e 0a20  osgi</groupId>. 
│ -00001510: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ -00001520: 6172 7469 6661 6374 4964 3e6f 7267 2e6f  artifactId>org.o
│ -00001530: 7367 692e 7365 7276 6963 652e 6576 656e  sgi.service.even
│ -00001540: 743c 2f61 7274 6966 6163 7449 643e 0a20  t</artifactId>. 
│ -00001550: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ -00001560: 7665 7273 696f 6e3e 312e 342e 303c 2f76  version>1.4.0</v
│ -00001570: 6572 7369 6f6e 3e0a 2020 2020 2020 2020  ersion>.        
│ -00001580: 2020 2020 3c2f 6465 7065 6e64 656e 6379      </dependency
│ -00001590: 3e0a 2020 2020 2020 2020 2020 2020 3c64  >.            <d
│ -000015a0: 6570 656e 6465 6e63 793e 0a20 2020 2020  ependency>.     
│ -000015b0: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
│ -000015c0: 7049 643e 636f 6d6d 6f6e 732d 696f 3c2f  pId>commons-io</
│ -000015d0: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
│ -000015e0: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
│ -000015f0: 6374 4964 3e63 6f6d 6d6f 6e73 2d69 6f3c  ctId>commons-io<
│ -00001600: 2f61 7274 6966 6163 7449 643e 0a20 2020  /artifactId>.   
│ -00001610: 2020 2020 2020 2020 2020 2020 203c 7665               <ve
│ -00001620: 7273 696f 6e3e 322e 363c 2f76 6572 7369  rsion>2.6</versi
│ -00001630: 6f6e 3e0a 2020 2020 2020 2020 2020 2020  on>.            
│ -00001640: 3c2f 6465 7065 6e64 656e 6379 3e0a 2020  </dependency>.  
│ -00001650: 2020 2020 2020 2020 2020 3c64 6570 656e            <depen
│ -00001660: 6465 6e63 793e 0a20 2020 2020 2020 2020  dency>.         
│ -00001670: 2020 2020 2020 203c 6772 6f75 7049 643e         <groupId>
│ -00001680: 6f72 672e 6170 6163 6865 2e6a 6163 6b72  org.apache.jackr
│ -00001690: 6162 6269 743c 2f67 726f 7570 4964 3e0a  abbit</groupId>.
│ -000016a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -000016b0: 3c61 7274 6966 6163 7449 643e 6a61 636b  <artifactId>jack
│ -000016c0: 7261 6262 6974 2d6a 6372 2d63 6f6d 6d6f  rabbit-jcr-commo
│ -000016d0: 6e73 3c2f 6172 7469 6661 6374 4964 3e0a  ns</artifactId>.
│ -000016e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -000016f0: 3c76 6572 7369 6f6e 3e32 2e32 302e 313c  <version>2.20.1<
│ -00001700: 2f76 6572 7369 6f6e 3e0a 2020 2020 2020  /version>.      
│ -00001710: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ -00001720: 6379 3e0a 2020 2020 2020 2020 2020 2020  cy>.            
│ -00001730: 3c64 6570 656e 6465 6e63 793e 0a20 2020  <dependency>.   
│ -00001740: 2020 2020 2020 2020 2020 2020 203c 6772               <gr
│ -00001750: 6f75 7049 643e 6f72 672e 6f73 6769 3c2f  oupId>org.osgi</
│ -00001760: 6772 6f75 7049 643e 0a20 2020 2020 2020  groupId>.       
│ -00001770: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
│ -00001780: 6374 4964 3e6f 7267 2e6f 7367 692e 7574  ctId>org.osgi.ut
│ -00001790: 696c 2e63 6f6e 7665 7274 6572 3c2f 6172  il.converter</ar
│ -000017a0: 7469 6661 6374 4964 3e0a 2020 2020 2020  tifactId>.      
│ -000017b0: 2020 2020 2020 2020 2020 3c76 6572 7369            <versi
│ -000017c0: 6f6e 3e31 2e30 2e30 3c2f 7665 7273 696f  on>1.0.0</versio
│ -000017d0: 6e3e 0a20 2020 2020 2020 2020 2020 203c  n>.            <
│ -000017e0: 2f64 6570 656e 6465 6e63 793e 0a20 2020  /dependency>.   
│ -000017f0: 2020 2020 2020 2020 203c 6465 7065 6e64           <depend
│ -00001800: 656e 6379 3e0a 2020 2020 2020 2020 2020  ency>.          
│ -00001810: 2020 2020 2020 3c67 726f 7570 4964 3e6f        <groupId>o
│ -00001820: 7267 2e6f 7367 693c 2f67 726f 7570 4964  rg.osgi</groupId
│ -00001830: 3e0a 2020 2020 2020 2020 2020 2020 2020  >.              
│ -00001840: 2020 3c61 7274 6966 6163 7449 643e 6f72    <artifactId>or
│ -00001850: 672e 6f73 6769 2e75 7469 6c2e 6675 6e63  g.osgi.util.func
│ -00001860: 7469 6f6e 3c2f 6172 7469 6661 6374 4964  tion</artifactId
│ -00001870: 3e0a 2020 2020 2020 2020 2020 2020 2020  >.              
│ -00001880: 2020 3c76 6572 7369 6f6e 3e31 2e31 2e30    <version>1.1.0
│ -00001890: 3c2f 7665 7273 696f 6e3e 0a20 2020 2020  </version>.     
│ -000018a0: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
│ -000018b0: 6e63 793e 0a20 2020 2020 2020 203c 2f64  ncy>.        </d
│ -000018c0: 6570 656e 6465 6e63 6965 733e 0a20 2020  ependencies>.   
│ -000018d0: 203c 2f64 6570 656e 6465 6e63 794d 616e   </dependencyMan
│ -000018e0: 6167 656d 656e 743e 0a0a 2020 203c 7072  agement>..   <pr
│ -000018f0: 6f66 696c 6573 3e0a 2020 2020 2020 2020  ofiles>.        
│ -00001900: 3c70 726f 6669 6c65 3e0a 2020 2020 2020  <profile>.      
│ -00001910: 2020 2020 2020 3c69 643e 6c61 7465 7374        <id>latest
│ -00001920: 2d64 6570 656e 6465 6e63 792d 7665 7273  -dependency-vers
│ -00001930: 696f 6e73 3c2f 6964 3e0a 2020 2020 2020  ions</id>.      
│ -00001940: 2020 2020 2020 3c61 6374 6976 6174 696f        <activatio
│ -00001950: 6e3e 0a20 2020 2020 2020 2020 2020 2020  n>.             
│ -00001960: 2020 203c 6163 7469 7665 4279 4465 6661     <activeByDefa
│ -00001970: 756c 743e 6661 6c73 653c 2f61 6374 6976  ult>false</activ
│ -00001980: 6542 7944 6566 6175 6c74 3e0a 2020 2020  eByDefault>.    
│ -00001990: 2020 2020 2020 2020 3c2f 6163 7469 7661          </activa
│ -000019a0: 7469 6f6e 3e0a 2020 2020 2020 2020 2020  tion>.          
│ -000019b0: 2020 3c64 6570 656e 6465 6e63 794d 616e    <dependencyMan
│ -000019c0: 6167 656d 656e 743e 0a20 2020 2020 2020  agement>.       
│ -000019d0: 2020 2020 2020 2020 203c 6465 7065 6e64           <depend
│ -000019e0: 656e 6369 6573 3e0a 2020 2020 2020 2020  encies>.        
│ -000019f0: 2020 2020 2020 2020 2020 2020 3c64 6570              <dep
│ -00001a00: 656e 6465 6e63 793e 0a20 2020 2020 2020  endency>.       
│ -00001a10: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001a20: 203c 6772 6f75 7049 643e 6f72 672e 6170   <groupId>org.ap
│ -00001a30: 6163 6865 2e73 6c69 6e67 3c2f 6772 6f75  ache.sling</grou
│ -00001a40: 7049 643e 0a20 2020 2020 2020 2020 2020  pId>.           
│ -00001a50: 2020 2020 2020 2020 2020 2020 203c 6172               <ar
│ -00001a60: 7469 6661 6374 4964 3e6f 7267 2e61 7061  tifactId>org.apa
│ -00001a70: 6368 652e 736c 696e 672e 6170 693c 2f61  che.sling.api</a
│ -00001a80: 7274 6966 6163 7449 643e 0a20 2020 2020  rtifactId>.     
│ -00001a90: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001aa0: 2020 203c 7665 7273 696f 6e3e 322e 3235     <version>2.25
│ -00001ab0: 2e30 3c2f 7665 7273 696f 6e3e 0a20 2020  .0</version>.   
│ +00000020: 4f2d 3838 3539 2d31 223f 3e0d 0a3c 212d  O-8859-1"?>..<!-
│ +00000030: 2d0d 0a20 204c 6963 656e 7365 6420 746f  -..  Licensed to
│ +00000040: 2074 6865 2041 7061 6368 6520 536f 6674   the Apache Soft
│ +00000050: 7761 7265 2046 6f75 6e64 6174 696f 6e20  ware Foundation 
│ +00000060: 2841 5346 2920 756e 6465 7220 6f6e 650d  (ASF) under one.
│ +00000070: 0a20 206f 7220 6d6f 7265 2063 6f6e 7472  .  or more contr
│ +00000080: 6962 7574 6f72 206c 6963 656e 7365 2061  ibutor license a
│ +00000090: 6772 6565 6d65 6e74 732e 2020 5365 6520  greements.  See 
│ +000000a0: 7468 6520 4e4f 5449 4345 2066 696c 650d  the NOTICE file.
│ +000000b0: 0a20 2064 6973 7472 6962 7574 6564 2077  .  distributed w
│ +000000c0: 6974 6820 7468 6973 2077 6f72 6b20 666f  ith this work fo
│ +000000d0: 7220 6164 6469 7469 6f6e 616c 2069 6e66  r additional inf
│ +000000e0: 6f72 6d61 7469 6f6e 0d0a 2020 7265 6761  ormation..  rega
│ +000000f0: 7264 696e 6720 636f 7079 7269 6768 7420  rding copyright 
│ +00000100: 6f77 6e65 7273 6869 702e 2020 5468 6520  ownership.  The 
│ +00000110: 4153 4620 6c69 6365 6e73 6573 2074 6869  ASF licenses thi
│ +00000120: 7320 6669 6c65 0d0a 2020 746f 2079 6f75  s file..  to you
│ +00000130: 2075 6e64 6572 2074 6865 2041 7061 6368   under the Apach
│ +00000140: 6520 4c69 6365 6e73 652c 2056 6572 7369  e License, Versi
│ +00000150: 6f6e 2032 2e30 2028 7468 650d 0a20 2022  on 2.0 (the..  "
│ +00000160: 4c69 6365 6e73 6522 293b 2079 6f75 206d  License"); you m
│ +00000170: 6179 206e 6f74 2075 7365 2074 6869 7320  ay not use this 
│ +00000180: 6669 6c65 2065 7863 6570 7420 696e 2063  file except in c
│ +00000190: 6f6d 706c 6961 6e63 650d 0a20 2077 6974  ompliance..  wit
│ +000001a0: 6820 7468 6520 4c69 6365 6e73 652e 2020  h the License.  
│ +000001b0: 596f 7520 6d61 7920 6f62 7461 696e 2061  You may obtain a
│ +000001c0: 2063 6f70 7920 6f66 2074 6865 204c 6963   copy of the Lic
│ +000001d0: 656e 7365 2061 740d 0a0d 0a20 2020 6874  ense at....   ht
│ +000001e0: 7470 3a2f 2f77 7777 2e61 7061 6368 652e  tp://www.apache.
│ +000001f0: 6f72 672f 6c69 6365 6e73 6573 2f4c 4943  org/licenses/LIC
│ +00000200: 454e 5345 2d32 2e30 0d0a 0d0a 2020 556e  ENSE-2.0....  Un
│ +00000210: 6c65 7373 2072 6571 7569 7265 6420 6279  less required by
│ +00000220: 2061 7070 6c69 6361 626c 6520 6c61 7720   applicable law 
│ +00000230: 6f72 2061 6772 6565 6420 746f 2069 6e20  or agreed to in 
│ +00000240: 7772 6974 696e 672c 0d0a 2020 736f 6674  writing,..  soft
│ +00000250: 7761 7265 2064 6973 7472 6962 7574 6564  ware distributed
│ +00000260: 2075 6e64 6572 2074 6865 204c 6963 656e   under the Licen
│ +00000270: 7365 2069 7320 6469 7374 7269 6275 7465  se is distribute
│ +00000280: 6420 6f6e 2061 6e0d 0a20 2022 4153 2049  d on an..  "AS I
│ +00000290: 5322 2042 4153 4953 2c20 5749 5448 4f55  S" BASIS, WITHOU
│ +000002a0: 5420 5741 5252 414e 5449 4553 204f 5220  T WARRANTIES OR 
│ +000002b0: 434f 4e44 4954 494f 4e53 204f 4620 414e  CONDITIONS OF AN
│ +000002c0: 590d 0a20 204b 494e 442c 2065 6974 6865  Y..  KIND, eithe
│ +000002d0: 7220 6578 7072 6573 7320 6f72 2069 6d70  r express or imp
│ +000002e0: 6c69 6564 2e20 2053 6565 2074 6865 204c  lied.  See the L
│ +000002f0: 6963 656e 7365 2066 6f72 2074 6865 0d0a  icense for the..
│ +00000300: 2020 7370 6563 6966 6963 206c 616e 6775    specific langu
│ +00000310: 6167 6520 676f 7665 726e 696e 6720 7065  age governing pe
│ +00000320: 726d 6973 7369 6f6e 7320 616e 6420 6c69  rmissions and li
│ +00000330: 6d69 7461 7469 6f6e 730d 0a20 2075 6e64  mitations..  und
│ +00000340: 6572 2074 6865 204c 6963 656e 7365 2e0d  er the License..
│ +00000350: 0a2d 2d3e 0d0a 3c70 726f 6a65 6374 2078  .-->..<project x
│ +00000360: 6d6c 6e73 3d22 6874 7470 3a2f 2f6d 6176  mlns="http://mav
│ +00000370: 656e 2e61 7061 6368 652e 6f72 672f 504f  en.apache.org/PO
│ +00000380: 4d2f 342e 302e 3022 2078 6d6c 6e73 3a78  M/4.0.0" xmlns:x
│ +00000390: 7369 3d22 6874 7470 3a2f 2f77 7777 2e77  si="http://www.w
│ +000003a0: 332e 6f72 672f 3230 3031 2f58 4d4c 5363  3.org/2001/XMLSc
│ +000003b0: 6865 6d61 2d69 6e73 7461 6e63 6522 2078  hema-instance" x
│ +000003c0: 7369 3a73 6368 656d 614c 6f63 6174 696f  si:schemaLocatio
│ +000003d0: 6e3d 2268 7474 703a 2f2f 6d61 7665 6e2e  n="http://maven.
│ +000003e0: 6170 6163 6865 2e6f 7267 2f50 4f4d 2f34  apache.org/POM/4
│ +000003f0: 2e30 2e30 2068 7474 703a 2f2f 6d61 7665  .0.0 http://mave
│ +00000400: 6e2e 6170 6163 6865 2e6f 7267 2f6d 6176  n.apache.org/mav
│ +00000410: 656e 2d76 345f 305f 302e 7873 6422 3e0d  en-v4_0_0.xsd">.
│ +00000420: 0a0d 0a20 2020 203c 6d6f 6465 6c56 6572  ...    <modelVer
│ +00000430: 7369 6f6e 3e34 2e30 2e30 3c2f 6d6f 6465  sion>4.0.0</mode
│ +00000440: 6c56 6572 7369 6f6e 3e0d 0a20 2020 203c  lVersion>..    <
│ +00000450: 7061 7265 6e74 3e0d 0a20 2020 2020 2020  parent>..       
│ +00000460: 203c 6772 6f75 7049 643e 6f72 672e 6170   <groupId>org.ap
│ +00000470: 6163 6865 2e73 6c69 6e67 3c2f 6772 6f75  ache.sling</grou
│ +00000480: 7049 643e 0d0a 2020 2020 2020 2020 3c61  pId>..        <a
│ +00000490: 7274 6966 6163 7449 643e 736c 696e 672d  rtifactId>sling-
│ +000004a0: 6275 6e64 6c65 2d70 6172 656e 743c 2f61  bundle-parent</a
│ +000004b0: 7274 6966 6163 7449 643e 0d0a 2020 2020  rtifactId>..    
│ +000004c0: 2020 2020 3c76 6572 7369 6f6e 3e34 373c      <version>47<
│ +000004d0: 2f76 6572 7369 6f6e 3e0d 0a20 2020 2020  /version>..     
│ +000004e0: 2020 203c 7265 6c61 7469 7665 5061 7468     <relativePath
│ +000004f0: 202f 3e0d 0a20 2020 203c 2f70 6172 656e   />..    </paren
│ +00000500: 743e 0d0a 0d0a 2020 2020 3c61 7274 6966  t>....    <artif
│ +00000510: 6163 7449 643e 6f72 672e 6170 6163 6865  actId>org.apache
│ +00000520: 2e73 6c69 6e67 2e74 6573 7469 6e67 2e72  .sling.testing.r
│ +00000530: 6573 6f75 7263 6572 6573 6f6c 7665 722d  esourceresolver-
│ +00000540: 6d6f 636b 3c2f 6172 7469 6661 6374 4964  mock</artifactId
│ +00000550: 3e0d 0a20 2020 203c 7665 7273 696f 6e3e  >..    <version>
│ +00000560: 312e 332e 303c 2f76 6572 7369 6f6e 3e0d  1.3.0</version>.
│ +00000570: 0a0d 0a20 2020 203c 6e61 6d65 3e41 7061  ...    <name>Apa
│ +00000580: 6368 6520 536c 696e 6720 5465 7374 696e  che Sling Testin
│ +00000590: 6720 5265 736f 7572 6365 2052 6573 6f6c  g Resource Resol
│ +000005a0: 7665 7220 4d6f 636b 3c2f 6e61 6d65 3e0d  ver Mock</name>.
│ +000005b0: 0a20 2020 203c 6465 7363 7269 7074 696f  .    <descriptio
│ +000005c0: 6e3e 0d0a 2020 2020 2020 2020 4d6f 636b  n>..        Mock
│ +000005d0: 2066 6f72 2074 6865 2072 6573 6f75 7263   for the resourc
│ +000005e0: 6520 7265 736f 6c76 6572 202f 2066 6163  e resolver / fac
│ +000005f0: 746f 7279 2066 6f72 2065 6173 6965 7220  tory for easier 
│ +00000600: 7465 7374 696e 672e 0d0a 2020 2020 3c2f  testing...    </
│ +00000610: 6465 7363 7269 7074 696f 6e3e 0d0a 0d0a  description>....
│ +00000620: 2020 2020 3c73 636d 3e0d 0a20 2020 2020      <scm>..     
│ +00000630: 2020 203c 636f 6e6e 6563 7469 6f6e 3e73     <connection>s
│ +00000640: 636d 3a67 6974 3a68 7474 7073 3a2f 2f67  cm:git:https://g
│ +00000650: 6974 626f 782e 6170 6163 6865 2e6f 7267  itbox.apache.org
│ +00000660: 2f72 6570 6f73 2f61 7366 2f73 6c69 6e67  /repos/asf/sling
│ +00000670: 2d6f 7267 2d61 7061 6368 652d 736c 696e  -org-apache-slin
│ +00000680: 672d 7465 7374 696e 672d 7265 736f 7572  g-testing-resour
│ +00000690: 6365 7265 736f 6c76 6572 2d6d 6f63 6b2e  ceresolver-mock.
│ +000006a0: 6769 743c 2f63 6f6e 6e65 6374 696f 6e3e  git</connection>
│ +000006b0: 0d0a 2020 2020 2020 2020 3c64 6576 656c  ..        <devel
│ +000006c0: 6f70 6572 436f 6e6e 6563 7469 6f6e 3e73  operConnection>s
│ +000006d0: 636d 3a67 6974 3a68 7474 7073 3a2f 2f67  cm:git:https://g
│ +000006e0: 6974 626f 782e 6170 6163 6865 2e6f 7267  itbox.apache.org
│ +000006f0: 2f72 6570 6f73 2f61 7366 2f73 6c69 6e67  /repos/asf/sling
│ +00000700: 2d6f 7267 2d61 7061 6368 652d 736c 696e  -org-apache-slin
│ +00000710: 672d 7465 7374 696e 672d 7265 736f 7572  g-testing-resour
│ +00000720: 6365 7265 736f 6c76 6572 2d6d 6f63 6b2e  ceresolver-mock.
│ +00000730: 6769 743c 2f64 6576 656c 6f70 6572 436f  git</developerCo
│ +00000740: 6e6e 6563 7469 6f6e 3e0d 0a20 2020 2020  nnection>..     
│ +00000750: 2020 203c 7572 6c3e 6874 7470 733a 2f2f     <url>https://
│ +00000760: 6769 7462 6f78 2e61 7061 6368 652e 6f72  gitbox.apache.or
│ +00000770: 672f 7265 706f 732f 6173 663f 703d 736c  g/repos/asf?p=sl
│ +00000780: 696e 672d 6f72 672d 6170 6163 6865 2d73  ing-org-apache-s
│ +00000790: 6c69 6e67 2d74 6573 7469 6e67 2d72 6573  ling-testing-res
│ +000007a0: 6f75 7263 6572 6573 6f6c 7665 722d 6d6f  ourceresolver-mo
│ +000007b0: 636b 2e67 6974 3c2f 7572 6c3e 0d0a 2020  ck.git</url>..  
│ +000007c0: 2020 2020 2020 3c74 6167 3e6f 7267 2e61        <tag>org.a
│ +000007d0: 7061 6368 652e 736c 696e 672e 7465 7374  pache.sling.test
│ +000007e0: 696e 672e 7265 736f 7572 6365 7265 736f  ing.resourcereso
│ +000007f0: 6c76 6572 2d6d 6f63 6b2d 312e 332e 303c  lver-mock-1.3.0<
│ +00000800: 2f74 6167 3e0d 0a20 2020 203c 2f73 636d  /tag>..    </scm
│ +00000810: 3e0d 0a0d 0a20 2020 203c 7072 6f70 6572  >....    <proper
│ +00000820: 7469 6573 3e0d 0a20 2020 2020 2020 203c  ties>..        <
│ +00000830: 7072 6f6a 6563 742e 6275 696c 642e 6f75  project.build.ou
│ +00000840: 7470 7574 5469 6d65 7374 616d 703e 3230  tputTimestamp>20
│ +00000850: 3232 2d30 352d 3035 5431 363a 3231 3a32  22-05-05T16:21:2
│ +00000860: 355a 3c2f 7072 6f6a 6563 742e 6275 696c  5Z</project.buil
│ +00000870: 642e 6f75 7470 7574 5469 6d65 7374 616d  d.outputTimestam
│ +00000880: 703e 0d0a 2020 2020 3c2f 7072 6f70 6572  p>..    </proper
│ +00000890: 7469 6573 3e0d 0a0d 0a20 2020 203c 7265  ties>....    <re
│ +000008a0: 706f 7274 696e 673e 0d0a 2020 2020 2020  porting>..      
│ +000008b0: 2020 3c70 6c75 6769 6e73 3e0d 0a20 2020    <plugins>..   
│ +000008c0: 2020 2020 2020 2020 203c 706c 7567 696e           <plugin
│ +000008d0: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
│ +000008e0: 2020 203c 6772 6f75 7049 643e 6f72 672e     <groupId>org.
│ +000008f0: 6170 6163 6865 2e6d 6176 656e 2e70 6c75  apache.maven.plu
│ +00000900: 6769 6e73 3c2f 6772 6f75 7049 643e 0d0a  gins</groupId>..
│ +00000910: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00000920: 3c61 7274 6966 6163 7449 643e 6d61 7665  <artifactId>mave
│ +00000930: 6e2d 6a61 7661 646f 632d 706c 7567 696e  n-javadoc-plugin
│ +00000940: 3c2f 6172 7469 6661 6374 4964 3e0d 0a20  </artifactId>.. 
│ +00000950: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ +00000960: 636f 6e66 6967 7572 6174 696f 6e3e 0d0a  configuration>..
│ +00000970: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00000980: 2020 2020 3c65 7863 6c75 6465 5061 636b      <excludePack
│ +00000990: 6167 654e 616d 6573 3e0d 0a20 2020 2020  ageNames>..     
│ +000009a0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +000009b0: 2020 206f 7267 2e61 7061 6368 652e 736c     org.apache.sl
│ +000009c0: 696e 672e 7465 7374 696e 672e 7265 736f  ing.testing.reso
│ +000009d0: 7572 6365 7265 736f 6c76 6572 0d0a 2020  urceresolver..  
│ +000009e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +000009f0: 2020 3c2f 6578 636c 7564 6550 6163 6b61    </excludePacka
│ +00000a00: 6765 4e61 6d65 733e 0d0a 2020 2020 2020  geNames>..      
│ +00000a10: 2020 2020 2020 2020 2020 3c2f 636f 6e66            </conf
│ +00000a20: 6967 7572 6174 696f 6e3e 0d0a 2020 2020  iguration>..    
│ +00000a30: 2020 2020 2020 2020 3c2f 706c 7567 696e          </plugin
│ +00000a40: 3e0d 0a20 2020 2020 2020 203c 2f70 6c75  >..        </plu
│ +00000a50: 6769 6e73 3e0d 0a20 2020 203c 2f72 6570  gins>..    </rep
│ +00000a60: 6f72 7469 6e67 3e0d 0a20 2020 203c 6465  orting>..    <de
│ +00000a70: 7065 6e64 656e 6369 6573 3e0d 0a20 2020  pendencies>..   
│ +00000a80: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +00000a90: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00000aa0: 6772 6f75 7049 643e 6f72 672e 6f73 6769  groupId>org.osgi
│ +00000ab0: 3c2f 6772 6f75 7049 643e 0d0a 2020 2020  </groupId>..    
│ +00000ac0: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
│ +00000ad0: 7449 643e 6f72 672e 6f73 6769 2e61 6e6e  tId>org.osgi.ann
│ +00000ae0: 6f74 6174 696f 6e2e 7665 7273 696f 6e69  otation.versioni
│ +00000af0: 6e67 3c2f 6172 7469 6661 6374 4964 3e0d  ng</artifactId>.
│ +00000b00: 0a20 2020 2020 2020 2020 2020 203c 7363  .            <sc
│ +00000b10: 6f70 653e 7072 6f76 6964 6564 3c2f 7363  ope>provided</sc
│ +00000b20: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
│ +00000b30: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
│ +00000b40: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +00000b50: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00000b60: 6772 6f75 7049 643e 6f72 672e 6a65 7462  groupId>org.jetb
│ +00000b70: 7261 696e 733c 2f67 726f 7570 4964 3e0d  rains</groupId>.
│ +00000b80: 0a20 2020 2020 2020 2020 2020 203c 6172  .            <ar
│ +00000b90: 7469 6661 6374 4964 3e61 6e6e 6f74 6174  tifactId>annotat
│ +00000ba0: 696f 6e73 3c2f 6172 7469 6661 6374 4964  ions</artifactId
│ +00000bb0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00000bc0: 7363 6f70 653e 7072 6f76 6964 6564 3c2f  scope>provided</
│ +00000bd0: 7363 6f70 653e 0d0a 2020 2020 2020 2020  scope>..        
│ +00000be0: 3c2f 6465 7065 6e64 656e 6379 3e0d 0a20  </dependency>.. 
│ +00000bf0: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
│ +00000c00: 6379 3e0d 0a20 2020 2020 2020 2020 2020  cy>..           
│ +00000c10: 203c 6772 6f75 7049 643e 6a61 7661 782e   <groupId>javax.
│ +00000c20: 7365 7276 6c65 743c 2f67 726f 7570 4964  servlet</groupId
│ +00000c30: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00000c40: 6172 7469 6661 6374 4964 3e6a 6176 6178  artifactId>javax
│ +00000c50: 2e73 6572 766c 6574 2d61 7069 3c2f 6172  .servlet-api</ar
│ +00000c60: 7469 6661 6374 4964 3e0d 0a20 2020 2020  tifactId>..     
│ +00000c70: 2020 2020 2020 203c 7363 6f70 653e 7072         <scope>pr
│ +00000c80: 6f76 6964 6564 3c2f 7363 6f70 653e 0d0a  ovided</scope>..
│ +00000c90: 2020 2020 2020 2020 3c2f 6465 7065 6e64          </depend
│ +00000ca0: 656e 6379 3e0d 0a0d 0a20 2020 2020 2020  ency>....       
│ +00000cb0: 203c 6465 7065 6e64 656e 6379 3e0d 0a20   <dependency>.. 
│ +00000cc0: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
│ +00000cd0: 7049 643e 6f72 672e 6170 6163 6865 2e73  pId>org.apache.s
│ +00000ce0: 6c69 6e67 3c2f 6772 6f75 7049 643e 0d0a  ling</groupId>..
│ +00000cf0: 2020 2020 2020 2020 2020 2020 3c61 7274              <art
│ +00000d00: 6966 6163 7449 643e 6f72 672e 6170 6163  ifactId>org.apac
│ +00000d10: 6865 2e73 6c69 6e67 2e61 7069 3c2f 6172  he.sling.api</ar
│ +00000d20: 7469 6661 6374 4964 3e0d 0a20 2020 2020  tifactId>..     
│ +00000d30: 2020 2020 2020 203c 7363 6f70 653e 7072         <scope>pr
│ +00000d40: 6f76 6964 6564 3c2f 7363 6f70 653e 0d0a  ovided</scope>..
│ +00000d50: 2020 2020 2020 2020 3c2f 6465 7065 6e64          </depend
│ +00000d60: 656e 6379 3e0d 0a20 2020 2020 2020 203c  ency>..        <
│ +00000d70: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
│ +00000d80: 2020 2020 2020 2020 203c 6772 6f75 7049           <groupI
│ +00000d90: 643e 6f72 672e 6f73 6769 3c2f 6772 6f75  d>org.osgi</grou
│ +00000da0: 7049 643e 0d0a 2020 2020 2020 2020 2020  pId>..          
│ +00000db0: 2020 3c61 7274 6966 6163 7449 643e 6f72    <artifactId>or
│ +00000dc0: 672e 6f73 6769 2e73 6572 7669 6365 2e65  g.osgi.service.e
│ +00000dd0: 7665 6e74 3c2f 6172 7469 6661 6374 4964  vent</artifactId
│ +00000de0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00000df0: 7363 6f70 653e 7072 6f76 6964 6564 3c2f  scope>provided</
│ +00000e00: 7363 6f70 653e 0d0a 2020 2020 2020 2020  scope>..        
│ +00000e10: 3c2f 6465 7065 6e64 656e 6379 3e0d 0a20  </dependency>.. 
│ +00000e20: 2020 2020 2020 203c 6465 7065 6e64 656e         <dependen
│ +00000e30: 6379 3e0d 0a20 2020 2020 2020 2020 2020  cy>..           
│ +00000e40: 203c 6772 6f75 7049 643e 6f72 672e 6f73   <groupId>org.os
│ +00000e50: 6769 3c2f 6772 6f75 7049 643e 0d0a 2020  gi</groupId>..  
│ +00000e60: 2020 2020 2020 2020 2020 3c61 7274 6966            <artif
│ +00000e70: 6163 7449 643e 6f72 672e 6f73 6769 2e75  actId>org.osgi.u
│ +00000e80: 7469 6c2e 636f 6e76 6572 7465 723c 2f61  til.converter</a
│ +00000e90: 7274 6966 6163 7449 643e 0d0a 2020 2020  rtifactId>..    
│ +00000ea0: 2020 2020 2020 2020 3c73 636f 7065 3e70          <scope>p
│ +00000eb0: 726f 7669 6465 643c 2f73 636f 7065 3e0d  rovided</scope>.
│ +00000ec0: 0a20 2020 2020 2020 203c 2f64 6570 656e  .        </depen
│ +00000ed0: 6465 6e63 793e 0d0a 2020 2020 2020 2020  dency>..        
│ +00000ee0: 3c64 6570 656e 6465 6e63 793e 0d0a 2020  <dependency>..  
│ +00000ef0: 2020 2020 2020 2020 2020 3c67 726f 7570            <group
│ +00000f00: 4964 3e6f 7267 2e6f 7367 693c 2f67 726f  Id>org.osgi</gro
│ +00000f10: 7570 4964 3e0d 0a20 2020 2020 2020 2020  upId>..         
│ +00000f20: 2020 203c 6172 7469 6661 6374 4964 3e6f     <artifactId>o
│ +00000f30: 7267 2e6f 7367 692e 7574 696c 2e66 756e  rg.osgi.util.fun
│ +00000f40: 6374 696f 6e3c 2f61 7274 6966 6163 7449  ction</artifactI
│ +00000f50: 643e 0d0a 2020 2020 2020 2020 2020 2020  d>..            
│ +00000f60: 3c73 636f 7065 3e70 726f 7669 6465 643c  <scope>provided<
│ +00000f70: 2f73 636f 7065 3e0d 0a20 2020 2020 2020  /scope>..       
│ +00000f80: 203c 2f64 6570 656e 6465 6e63 793e 0d0a   </dependency>..
│ +00000f90: 2020 2020 2020 2020 3c64 6570 656e 6465          <depende
│ +00000fa0: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
│ +00000fb0: 2020 3c67 726f 7570 4964 3e63 6f6d 6d6f    <groupId>commo
│ +00000fc0: 6e73 2d69 6f3c 2f67 726f 7570 4964 3e0d  ns-io</groupId>.
│ +00000fd0: 0a20 2020 2020 2020 2020 2020 203c 6172  .            <ar
│ +00000fe0: 7469 6661 6374 4964 3e63 6f6d 6d6f 6e73  tifactId>commons
│ +00000ff0: 2d69 6f3c 2f61 7274 6966 6163 7449 643e  -io</artifactId>
│ +00001000: 0d0a 2020 2020 2020 2020 2020 2020 3c73  ..            <s
│ +00001010: 636f 7065 3e63 6f6d 7069 6c65 3c2f 7363  cope>compile</sc
│ +00001020: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
│ +00001030: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
│ +00001040: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +00001050: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00001060: 6772 6f75 7049 643e 6f72 672e 6170 6163  groupId>org.apac
│ +00001070: 6865 2e6a 6163 6b72 6162 6269 743c 2f67  he.jackrabbit</g
│ +00001080: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
│ +00001090: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
│ +000010a0: 3e6a 6163 6b72 6162 6269 742d 6a63 722d  >jackrabbit-jcr-
│ +000010b0: 636f 6d6d 6f6e 733c 2f61 7274 6966 6163  commons</artifac
│ +000010c0: 7449 643e 0d0a 2020 2020 2020 2020 2020  tId>..          
│ +000010d0: 2020 3c73 636f 7065 3e63 6f6d 7069 6c65    <scope>compile
│ +000010e0: 3c2f 7363 6f70 653e 0d0a 2020 2020 2020  </scope>..      
│ +000010f0: 2020 3c2f 6465 7065 6e64 656e 6379 3e0d    </dependency>.
│ +00001100: 0a0d 0a20 2020 2020 2020 203c 212d 2d20  ...        <!-- 
│ +00001110: 7465 7374 696e 6720 2d2d 3e0d 0a20 2020  testing -->..   
│ +00001120: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +00001130: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +00001140: 6772 6f75 7049 643e 6a75 6e69 743c 2f67  groupId>junit</g
│ +00001150: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
│ +00001160: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
│ +00001170: 3e6a 756e 6974 3c2f 6172 7469 6661 6374  >junit</artifact
│ +00001180: 4964 3e0d 0a20 2020 2020 2020 2020 2020  Id>..           
│ +00001190: 203c 7363 6f70 653e 7465 7374 3c2f 7363   <scope>test</sc
│ +000011a0: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
│ +000011b0: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
│ +000011c0: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +000011d0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +000011e0: 6772 6f75 7049 643e 636f 6d2e 676f 6f67  groupId>com.goog
│ +000011f0: 6c65 2e67 7561 7661 3c2f 6772 6f75 7049  le.guava</groupI
│ +00001200: 643e 0d0a 2020 2020 2020 2020 2020 2020  d>..            
│ +00001210: 3c61 7274 6966 6163 7449 643e 6775 6176  <artifactId>guav
│ +00001220: 613c 2f61 7274 6966 6163 7449 643e 0d0a  a</artifactId>..
│ +00001230: 2020 2020 2020 2020 2020 2020 3c76 6572              <ver
│ +00001240: 7369 6f6e 3e31 352e 303c 2f76 6572 7369  sion>15.0</versi
│ +00001250: 6f6e 3e0d 0a20 2020 2020 2020 2020 2020  on>..           
│ +00001260: 203c 7363 6f70 653e 7465 7374 3c2f 7363   <scope>test</sc
│ +00001270: 6f70 653e 0d0a 2020 2020 2020 2020 3c2f  ope>..        </
│ +00001280: 6465 7065 6e64 656e 6379 3e0d 0a20 2020  dependency>..   
│ +00001290: 2020 2020 203c 6465 7065 6e64 656e 6379       <dependency
│ +000012a0: 3e0d 0a20 2020 2020 2020 2020 2020 203c  >..            <
│ +000012b0: 6772 6f75 7049 643e 6f72 672e 6d6f 636b  groupId>org.mock
│ +000012c0: 6974 6f3c 2f67 726f 7570 4964 3e0d 0a20  ito</groupId>.. 
│ +000012d0: 2020 2020 2020 2020 2020 203c 6172 7469             <arti
│ +000012e0: 6661 6374 4964 3e6d 6f63 6b69 746f 2d63  factId>mockito-c
│ +000012f0: 6f72 653c 2f61 7274 6966 6163 7449 643e  ore</artifactId>
│ +00001300: 0d0a 2020 2020 2020 2020 2020 2020 3c76  ..            <v
│ +00001310: 6572 7369 6f6e 3e34 2e35 2e31 3c2f 7665  ersion>4.5.1</ve
│ +00001320: 7273 696f 6e3e 0d0a 2020 2020 2020 2020  rsion>..        
│ +00001330: 2020 2020 3c73 636f 7065 3e74 6573 743c      <scope>test<
│ +00001340: 2f73 636f 7065 3e0d 0a20 2020 2020 2020  /scope>..       
│ +00001350: 203c 2f64 6570 656e 6465 6e63 793e 0d0a   </dependency>..
│ +00001360: 2020 2020 2020 2020 3c64 6570 656e 6465          <depende
│ +00001370: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
│ +00001380: 2020 3c67 726f 7570 4964 3e6f 7267 2e61    <groupId>org.a
│ +00001390: 7061 6368 652e 636f 6d6d 6f6e 733c 2f67  pache.commons</g
│ +000013a0: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
│ +000013b0: 2020 2020 203c 6172 7469 6661 6374 4964       <artifactId
│ +000013c0: 3e63 6f6d 6d6f 6e73 2d6c 616e 6733 3c2f  >commons-lang3</
│ +000013d0: 6172 7469 6661 6374 4964 3e0d 0a20 2020  artifactId>..   
│ +000013e0: 2020 2020 2020 2020 203c 7665 7273 696f           <versio
│ +000013f0: 6e3e 332e 393c 2f76 6572 7369 6f6e 3e0d  n>3.9</version>.
│ +00001400: 0a20 2020 2020 2020 2020 2020 203c 7363  .            <sc
│ +00001410: 6f70 653e 7465 7374 3c2f 7363 6f70 653e  ope>test</scope>
│ +00001420: 0d0a 2020 2020 2020 2020 3c2f 6465 7065  ..        </depe
│ +00001430: 6e64 656e 6379 3e0d 0a20 2020 203c 2f64  ndency>..    </d
│ +00001440: 6570 656e 6465 6e63 6965 733e 0d0a 0d0a  ependencies>....
│ +00001450: 2020 2020 3c64 6570 656e 6465 6e63 794d      <dependencyM
│ +00001460: 616e 6167 656d 656e 743e 0d0a 2020 2020  anagement>..    
│ +00001470: 2020 2020 3c64 6570 656e 6465 6e63 6965      <dependencie
│ +00001480: 733e 0d0a 2020 2020 2020 2020 2020 2020  s>..            
│ +00001490: 3c64 6570 656e 6465 6e63 793e 0d0a 2020  <dependency>..  
│ +000014a0: 2020 2020 2020 2020 2020 2020 2020 3c67                <g
│ +000014b0: 726f 7570 4964 3e6f 7267 2e61 7061 6368  roupId>org.apach
│ +000014c0: 652e 736c 696e 673c 2f67 726f 7570 4964  e.sling</groupId
│ +000014d0: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
│ +000014e0: 2020 203c 6172 7469 6661 6374 4964 3e6f     <artifactId>o
│ +000014f0: 7267 2e61 7061 6368 652e 736c 696e 672e  rg.apache.sling.
│ +00001500: 6170 693c 2f61 7274 6966 6163 7449 643e  api</artifactId>
│ +00001510: 0d0a 2020 2020 2020 2020 2020 2020 2020  ..              
│ +00001520: 2020 3c76 6572 7369 6f6e 3e32 2e32 322e    <version>2.22.
│ +00001530: 303c 2f76 6572 7369 6f6e 3e0d 0a20 2020  0</version>..   
│ +00001540: 2020 2020 2020 2020 203c 2f64 6570 656e           </depen
│ +00001550: 6465 6e63 793e 0d0a 2020 2020 2020 2020  dency>..        
│ +00001560: 2020 2020 3c64 6570 656e 6465 6e63 793e      <dependency>
│ +00001570: 0d0a 2020 2020 2020 2020 2020 2020 2020  ..              
│ +00001580: 2020 3c67 726f 7570 4964 3e6f 7267 2e6f    <groupId>org.o
│ +00001590: 7367 693c 2f67 726f 7570 4964 3e0d 0a20  sgi</groupId>.. 
│ +000015a0: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ +000015b0: 6172 7469 6661 6374 4964 3e6f 7267 2e6f  artifactId>org.o
│ +000015c0: 7367 692e 7365 7276 6963 652e 6576 656e  sgi.service.even
│ +000015d0: 743c 2f61 7274 6966 6163 7449 643e 0d0a  t</artifactId>..
│ +000015e0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +000015f0: 3c76 6572 7369 6f6e 3e31 2e34 2e30 3c2f  <version>1.4.0</
│ +00001600: 7665 7273 696f 6e3e 0d0a 2020 2020 2020  version>..      
│ +00001610: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ +00001620: 6379 3e0d 0a20 2020 2020 2020 2020 2020  cy>..           
│ +00001630: 203c 6465 7065 6e64 656e 6379 3e0d 0a20   <dependency>.. 
│ +00001640: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ +00001650: 6772 6f75 7049 643e 636f 6d6d 6f6e 732d  groupId>commons-
│ +00001660: 696f 3c2f 6772 6f75 7049 643e 0d0a 2020  io</groupId>..  
│ +00001670: 2020 2020 2020 2020 2020 2020 2020 3c61                <a
│ +00001680: 7274 6966 6163 7449 643e 636f 6d6d 6f6e  rtifactId>common
│ +00001690: 732d 696f 3c2f 6172 7469 6661 6374 4964  s-io</artifactId
│ +000016a0: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
│ +000016b0: 2020 203c 7665 7273 696f 6e3e 322e 363c     <version>2.6<
│ +000016c0: 2f76 6572 7369 6f6e 3e0d 0a20 2020 2020  /version>..     
│ +000016d0: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
│ +000016e0: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
│ +000016f0: 2020 3c64 6570 656e 6465 6e63 793e 0d0a    <dependency>..
│ +00001700: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00001710: 3c67 726f 7570 4964 3e6f 7267 2e61 7061  <groupId>org.apa
│ +00001720: 6368 652e 6a61 636b 7261 6262 6974 3c2f  che.jackrabbit</
│ +00001730: 6772 6f75 7049 643e 0d0a 2020 2020 2020  groupId>..      
│ +00001740: 2020 2020 2020 2020 2020 3c61 7274 6966            <artif
│ +00001750: 6163 7449 643e 6a61 636b 7261 6262 6974  actId>jackrabbit
│ +00001760: 2d6a 6372 2d63 6f6d 6d6f 6e73 3c2f 6172  -jcr-commons</ar
│ +00001770: 7469 6661 6374 4964 3e0d 0a20 2020 2020  tifactId>..     
│ +00001780: 2020 2020 2020 2020 2020 203c 7665 7273             <vers
│ +00001790: 696f 6e3e 322e 3230 2e31 3c2f 7665 7273  ion>2.20.1</vers
│ +000017a0: 696f 6e3e 0d0a 2020 2020 2020 2020 2020  ion>..          
│ +000017b0: 2020 3c2f 6465 7065 6e64 656e 6379 3e0d    </dependency>.
│ +000017c0: 0a20 2020 2020 2020 2020 2020 203c 6465  .            <de
│ +000017d0: 7065 6e64 656e 6379 3e0d 0a20 2020 2020  pendency>..     
│ +000017e0: 2020 2020 2020 2020 2020 203c 6772 6f75             <grou
│ +000017f0: 7049 643e 6f72 672e 6f73 6769 3c2f 6772  pId>org.osgi</gr
│ +00001800: 6f75 7049 643e 0d0a 2020 2020 2020 2020  oupId>..        
│ +00001810: 2020 2020 2020 2020 3c61 7274 6966 6163          <artifac
│ +00001820: 7449 643e 6f72 672e 6f73 6769 2e75 7469  tId>org.osgi.uti
│ +00001830: 6c2e 636f 6e76 6572 7465 723c 2f61 7274  l.converter</art
│ +00001840: 6966 6163 7449 643e 0d0a 2020 2020 2020  ifactId>..      
│ +00001850: 2020 2020 2020 2020 2020 3c76 6572 7369            <versi
│ +00001860: 6f6e 3e31 2e30 2e30 3c2f 7665 7273 696f  on>1.0.0</versio
│ +00001870: 6e3e 0d0a 2020 2020 2020 2020 2020 2020  n>..            
│ +00001880: 3c2f 6465 7065 6e64 656e 6379 3e0d 0a20  </dependency>.. 
│ +00001890: 2020 2020 2020 2020 2020 203c 6465 7065             <depe
│ +000018a0: 6e64 656e 6379 3e0d 0a20 2020 2020 2020  ndency>..       
│ +000018b0: 2020 2020 2020 2020 203c 6772 6f75 7049           <groupI
│ +000018c0: 643e 6f72 672e 6f73 6769 3c2f 6772 6f75  d>org.osgi</grou
│ +000018d0: 7049 643e 0d0a 2020 2020 2020 2020 2020  pId>..          
│ +000018e0: 2020 2020 2020 3c61 7274 6966 6163 7449        <artifactI
│ +000018f0: 643e 6f72 672e 6f73 6769 2e75 7469 6c2e  d>org.osgi.util.
│ +00001900: 6675 6e63 7469 6f6e 3c2f 6172 7469 6661  function</artifa
│ +00001910: 6374 4964 3e0d 0a20 2020 2020 2020 2020  ctId>..         
│ +00001920: 2020 2020 2020 203c 7665 7273 696f 6e3e         <version>
│ +00001930: 312e 312e 303c 2f76 6572 7369 6f6e 3e0d  1.1.0</version>.
│ +00001940: 0a20 2020 2020 2020 2020 2020 203c 2f64  .            </d
│ +00001950: 6570 656e 6465 6e63 793e 0d0a 2020 2020  ependency>..    
│ +00001960: 2020 2020 3c2f 6465 7065 6e64 656e 6369      </dependenci
│ +00001970: 6573 3e0d 0a20 2020 203c 2f64 6570 656e  es>..    </depen
│ +00001980: 6465 6e63 794d 616e 6167 656d 656e 743e  dencyManagement>
│ +00001990: 0d0a 0d0a 2020 203c 7072 6f66 696c 6573  ....   <profiles
│ +000019a0: 3e0d 0a20 2020 2020 2020 203c 7072 6f66  >..        <prof
│ +000019b0: 696c 653e 0d0a 2020 2020 2020 2020 2020  ile>..          
│ +000019c0: 2020 3c69 643e 6c61 7465 7374 2d64 6570    <id>latest-dep
│ +000019d0: 656e 6465 6e63 792d 7665 7273 696f 6e73  endency-versions
│ +000019e0: 3c2f 6964 3e0d 0a20 2020 2020 2020 2020  </id>..         
│ +000019f0: 2020 203c 6163 7469 7661 7469 6f6e 3e0d     <activation>.
│ +00001a00: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
│ +00001a10: 203c 6163 7469 7665 4279 4465 6661 756c   <activeByDefaul
│ +00001a20: 743e 6661 6c73 653c 2f61 6374 6976 6542  t>false</activeB
│ +00001a30: 7944 6566 6175 6c74 3e0d 0a20 2020 2020  yDefault>..     
│ +00001a40: 2020 2020 2020 203c 2f61 6374 6976 6174         </activat
│ +00001a50: 696f 6e3e 0d0a 2020 2020 2020 2020 2020  ion>..          
│ +00001a60: 2020 3c64 6570 656e 6465 6e63 794d 616e    <dependencyMan
│ +00001a70: 6167 656d 656e 743e 0d0a 2020 2020 2020  agement>..      
│ +00001a80: 2020 2020 2020 2020 2020 3c64 6570 656e            <depen
│ +00001a90: 6465 6e63 6965 733e 0d0a 2020 2020 2020  dencies>..      
│ +00001aa0: 2020 2020 2020 2020 2020 2020 2020 3c64                <d
│ +00001ab0: 6570 656e 6465 6e63 793e 0d0a 2020 2020  ependency>..    
│  00001ac0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001ad0: 203c 2f64 6570 656e 6465 6e63 793e 0a20   </dependency>. 
│ -00001ae0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001af0: 2020 203c 6465 7065 6e64 656e 6379 3e0a     <dependency>.
│ +00001ad0: 2020 2020 3c67 726f 7570 4964 3e6f 7267      <groupId>org
│ +00001ae0: 2e61 7061 6368 652e 736c 696e 673c 2f67  .apache.sling</g
│ +00001af0: 726f 7570 4964 3e0d 0a20 2020 2020 2020  roupId>..       
│  00001b00: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001b10: 2020 2020 2020 2020 3c67 726f 7570 4964          <groupId
│ -00001b20: 3e6f 7267 2e61 7061 6368 652e 6a61 636b  >org.apache.jack
│ -00001b30: 7261 6262 6974 3c2f 6772 6f75 7049 643e  rabbit</groupId>
│ -00001b40: 0a20 2020 2020 2020 2020 2020 2020 2020  .               
│ -00001b50: 2020 2020 2020 2020 203c 6172 7469 6661           <artifa
│ -00001b60: 6374 4964 3e6a 6163 6b72 6162 6269 742d  ctId>jackrabbit-
│ -00001b70: 6a63 722d 636f 6d6d 6f6e 733c 2f61 7274  jcr-commons</art
│ -00001b80: 6966 6163 7449 643e 0a20 2020 2020 2020  ifactId>.       
│ -00001b90: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ -00001ba0: 203c 7665 7273 696f 6e3e 322e 3231 2e39   <version>2.21.9
│ -00001bb0: 3c2f 7665 7273 696f 6e3e 0a20 2020 2020  </version>.     
│ -00001bc0: 2020 2020 2020 2020 2020 2020 2020 203c                 <
│ -00001bd0: 2f64 6570 656e 6465 6e63 793e 0a20 2020  /dependency>.   
│ -00001be0: 2020 2020 2020 2020 2020 2020 203c 2f64               </d
│ -00001bf0: 6570 656e 6465 6e63 6965 733e 0a20 2020  ependencies>.   
│ -00001c00: 2020 2020 2020 2020 203c 2f64 6570 656e           </depen
│ -00001c10: 6465 6e63 794d 616e 6167 656d 656e 743e  dencyManagement>
│ -00001c20: 0a20 2020 2020 2020 203c 2f70 726f 6669  .        </profi
│ -00001c30: 6c65 3e0a 2020 2020 3c2f 7072 6f66 696c  le>.    </profil
│ -00001c40: 6573 3e0a 0a3c 2f70 726f 6a65 6374 3e0a  es>..</project>.
│ +00001b10: 203c 6172 7469 6661 6374 4964 3e6f 7267   <artifactId>org
│ +00001b20: 2e61 7061 6368 652e 736c 696e 672e 6170  .apache.sling.ap
│ +00001b30: 693c 2f61 7274 6966 6163 7449 643e 0d0a  i</artifactId>..
│ +00001b40: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00001b50: 2020 2020 2020 2020 3c76 6572 7369 6f6e          <version
│ +00001b60: 3e32 2e32 352e 303c 2f76 6572 7369 6f6e  >2.25.0</version
│ +00001b70: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
│ +00001b80: 2020 2020 2020 203c 2f64 6570 656e 6465         </depende
│ +00001b90: 6e63 793e 0d0a 2020 2020 2020 2020 2020  ncy>..          
│ +00001ba0: 2020 2020 2020 2020 2020 3c64 6570 656e            <depen
│ +00001bb0: 6465 6e63 793e 0d0a 2020 2020 2020 2020  dency>..        
│ +00001bc0: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00001bd0: 3c67 726f 7570 4964 3e6f 7267 2e61 7061  <groupId>org.apa
│ +00001be0: 6368 652e 6a61 636b 7261 6262 6974 3c2f  che.jackrabbit</
│ +00001bf0: 6772 6f75 7049 643e 0d0a 2020 2020 2020  groupId>..      
│ +00001c00: 2020 2020 2020 2020 2020 2020 2020 2020                  
│ +00001c10: 2020 3c61 7274 6966 6163 7449 643e 6a61    <artifactId>ja
│ +00001c20: 636b 7261 6262 6974 2d6a 6372 2d63 6f6d  ckrabbit-jcr-com
│ +00001c30: 6d6f 6e73 3c2f 6172 7469 6661 6374 4964  mons</artifactId
│ +00001c40: 3e0d 0a20 2020 2020 2020 2020 2020 2020  >..             
│ +00001c50: 2020 2020 2020 2020 2020 203c 7665 7273             <vers
│ +00001c60: 696f 6e3e 322e 3231 2e39 3c2f 7665 7273  ion>2.21.9</vers
│ +00001c70: 696f 6e3e 0d0a 2020 2020 2020 2020 2020  ion>..          
│ +00001c80: 2020 2020 2020 2020 2020 3c2f 6465 7065            </depe
│ +00001c90: 6e64 656e 6379 3e0d 0a20 2020 2020 2020  ndency>..       
│ +00001ca0: 2020 2020 2020 2020 203c 2f64 6570 656e           </depen
│ +00001cb0: 6465 6e63 6965 733e 0d0a 2020 2020 2020  dencies>..      
│ +00001cc0: 2020 2020 2020 3c2f 6465 7065 6e64 656e        </dependen
│ +00001cd0: 6379 4d61 6e61 6765 6d65 6e74 3e0d 0a20  cyManagement>.. 
│ +00001ce0: 2020 2020 2020 203c 2f70 726f 6669 6c65         </profile
│ +00001cf0: 3e0d 0a20 2020 203c 2f70 726f 6669 6c65  >..    </profile
│ +00001d00: 733e 0d0a 0d0a 3c2f 7072 6f6a 6563 743e  s>....</project>
│ +00001d10: 0d0a                                     ..

